
EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001370  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800142c  0800142c  0001142c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001468  08001468  00011468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800146c  0800146c  0001146c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000090  20000004  08001474  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000094  08001474  00020094  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b87f  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c13  00000000  00000000  0002b8ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026cf  00000000  00000000  0002d4be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000548  00000000  00000000  0002fb90  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006c0  00000000  00000000  000300d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003599  00000000  00000000  00030798  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000213d  00000000  00000000  00033d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00035e6e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000d24  00000000  00000000  00035eec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001414 	.word	0x08001414

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08001414 	.word	0x08001414

08000104 <__gnu_thumb1_case_sqi>:
 8000104:	b402      	push	{r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0049      	lsls	r1, r1, #1
 800010c:	5609      	ldrsb	r1, [r1, r0]
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	448e      	add	lr, r1
 8000112:	bc02      	pop	{r1}
 8000114:	4770      	bx	lr
 8000116:	46c0      	nop			; (mov r8, r8)

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000244:	b510      	push	{r4, lr}
 8000246:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000248:	f000 fca2 	bl	8000b90 <HAL_RCC_GetHCLKFreq>
 800024c:	21fa      	movs	r1, #250	; 0xfa
 800024e:	0089      	lsls	r1, r1, #2
 8000250:	f7ff ff6c 	bl	800012c <__udivsi3>
 8000254:	f000 f870 	bl	8000338 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000258:	2001      	movs	r0, #1
 800025a:	2200      	movs	r2, #0
 800025c:	0021      	movs	r1, r4
 800025e:	4240      	negs	r0, r0
 8000260:	f000 f830 	bl	80002c4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000264:	2000      	movs	r0, #0
 8000266:	bd10      	pop	{r4, pc}

08000268 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000268:	2310      	movs	r3, #16
 800026a:	4a06      	ldr	r2, [pc, #24]	; (8000284 <HAL_Init+0x1c>)
{
 800026c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000270:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000272:	430b      	orrs	r3, r1
 8000274:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000276:	f7ff ffe5 	bl	8000244 <HAL_InitTick>
  HAL_MspInit();
 800027a:	f000 ffeb 	bl	8001254 <HAL_MspInit>
}
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	40022000 	.word	0x40022000

08000288 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000288:	4a02      	ldr	r2, [pc, #8]	; (8000294 <HAL_IncTick+0xc>)
 800028a:	6813      	ldr	r3, [r2, #0]
 800028c:	3301      	adds	r3, #1
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	4770      	bx	lr
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	20000020 	.word	0x20000020

08000298 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000298:	4b01      	ldr	r3, [pc, #4]	; (80002a0 <HAL_GetTick+0x8>)
 800029a:	6818      	ldr	r0, [r3, #0]
}
 800029c:	4770      	bx	lr
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	20000020 	.word	0x20000020

080002a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80002a6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002a8:	f7ff fff6 	bl	8000298 <HAL_GetTick>
  uint32_t wait = Delay;
 80002ac:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002ae:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80002b0:	1c63      	adds	r3, r4, #1
 80002b2:	1e5a      	subs	r2, r3, #1
 80002b4:	4193      	sbcs	r3, r2
 80002b6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002b8:	f7ff ffee 	bl	8000298 <HAL_GetTick>
 80002bc:	1b40      	subs	r0, r0, r5
 80002be:	42a0      	cmp	r0, r4
 80002c0:	d3fa      	bcc.n	80002b8 <HAL_Delay+0x14>
  {
  }
}
 80002c2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002c4:	b570      	push	{r4, r5, r6, lr}
 80002c6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002c8:	2800      	cmp	r0, #0
 80002ca:	da14      	bge.n	80002f6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002cc:	230f      	movs	r3, #15
 80002ce:	b2c0      	uxtb	r0, r0
 80002d0:	4003      	ands	r3, r0
 80002d2:	3b08      	subs	r3, #8
 80002d4:	4a11      	ldr	r2, [pc, #68]	; (800031c <HAL_NVIC_SetPriority+0x58>)
 80002d6:	089b      	lsrs	r3, r3, #2
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	189b      	adds	r3, r3, r2
 80002dc:	2203      	movs	r2, #3
 80002de:	4010      	ands	r0, r2
 80002e0:	4090      	lsls	r0, r2
 80002e2:	32fc      	adds	r2, #252	; 0xfc
 80002e4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002e6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ec:	69dc      	ldr	r4, [r3, #28]
 80002ee:	43ac      	bics	r4, r5
 80002f0:	4321      	orrs	r1, r4
 80002f2:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002f4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002f6:	2503      	movs	r5, #3
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	4028      	ands	r0, r5
 80002fc:	40a8      	lsls	r0, r5
 80002fe:	35fc      	adds	r5, #252	; 0xfc
 8000300:	002e      	movs	r6, r5
 8000302:	4a07      	ldr	r2, [pc, #28]	; (8000320 <HAL_NVIC_SetPriority+0x5c>)
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	189b      	adds	r3, r3, r2
 8000308:	22c0      	movs	r2, #192	; 0xc0
 800030a:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800030c:	4029      	ands	r1, r5
 800030e:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000310:	0092      	lsls	r2, r2, #2
 8000312:	589c      	ldr	r4, [r3, r2]
 8000314:	43b4      	bics	r4, r6
 8000316:	4321      	orrs	r1, r4
 8000318:	5099      	str	r1, [r3, r2]
 800031a:	e7eb      	b.n	80002f4 <HAL_NVIC_SetPriority+0x30>
 800031c:	e000ed00 	.word	0xe000ed00
 8000320:	e000e100 	.word	0xe000e100

08000324 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000324:	231f      	movs	r3, #31
 8000326:	4018      	ands	r0, r3
 8000328:	3b1e      	subs	r3, #30
 800032a:	4083      	lsls	r3, r0
 800032c:	4a01      	ldr	r2, [pc, #4]	; (8000334 <HAL_NVIC_EnableIRQ+0x10>)
 800032e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000330:	4770      	bx	lr
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	e000e100 	.word	0xe000e100

08000338 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000338:	4a09      	ldr	r2, [pc, #36]	; (8000360 <HAL_SYSTICK_Config+0x28>)
 800033a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 800033c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800033e:	4293      	cmp	r3, r2
 8000340:	d80d      	bhi.n	800035e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000342:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000344:	4a07      	ldr	r2, [pc, #28]	; (8000364 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000346:	4808      	ldr	r0, [pc, #32]	; (8000368 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000348:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800034a:	6a03      	ldr	r3, [r0, #32]
 800034c:	0609      	lsls	r1, r1, #24
 800034e:	021b      	lsls	r3, r3, #8
 8000350:	0a1b      	lsrs	r3, r3, #8
 8000352:	430b      	orrs	r3, r1
 8000354:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000356:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000358:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800035a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800035e:	4770      	bx	lr
 8000360:	00ffffff 	.word	0x00ffffff
 8000364:	e000e010 	.word	0xe000e010
 8000368:	e000ed00 	.word	0xe000ed00

0800036c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800036e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000370:	2804      	cmp	r0, #4
 8000372:	d102      	bne.n	800037a <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000374:	4310      	orrs	r0, r2
 8000376:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000378:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800037a:	2104      	movs	r1, #4
 800037c:	438a      	bics	r2, r1
 800037e:	601a      	str	r2, [r3, #0]
}
 8000380:	e7fa      	b.n	8000378 <HAL_SYSTICK_CLKSourceConfig+0xc>
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	e000e010 	.word	0xe000e010

08000388 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000388:	4770      	bx	lr

0800038a <HAL_SYSTICK_IRQHandler>:
{
 800038a:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 800038c:	f7ff fffc 	bl	8000388 <HAL_SYSTICK_Callback>
}
 8000390:	bd10      	pop	{r4, pc}
	...

08000394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000394:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000396:	4a56      	ldr	r2, [pc, #344]	; (80004f0 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000398:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800039a:	1882      	adds	r2, r0, r2
 800039c:	1e54      	subs	r4, r2, #1
 800039e:	41a2      	sbcs	r2, r4
{ 
 80003a0:	b089      	sub	sp, #36	; 0x24
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003a2:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00U;
 80003a4:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003a6:	3204      	adds	r2, #4
 80003a8:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003aa:	9a03      	ldr	r2, [sp, #12]
 80003ac:	40da      	lsrs	r2, r3
 80003ae:	d101      	bne.n	80003b4 <HAL_GPIO_Init+0x20>
      }
    }
    
    position++;
  } 
}
 80003b0:	b009      	add	sp, #36	; 0x24
 80003b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80003b4:	2201      	movs	r2, #1
 80003b6:	409a      	lsls	r2, r3
 80003b8:	4694      	mov	ip, r2
 80003ba:	4664      	mov	r4, ip
 80003bc:	9a03      	ldr	r2, [sp, #12]
 80003be:	4022      	ands	r2, r4
 80003c0:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 80003c2:	d100      	bne.n	80003c6 <HAL_GPIO_Init+0x32>
 80003c4:	e092      	b.n	80004ec <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80003c6:	684a      	ldr	r2, [r1, #4]
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	2210      	movs	r2, #16
 80003cc:	9e01      	ldr	r6, [sp, #4]
 80003ce:	4396      	bics	r6, r2
 80003d0:	2e02      	cmp	r6, #2
 80003d2:	d10d      	bne.n	80003f0 <HAL_GPIO_Init+0x5c>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003d4:	2407      	movs	r4, #7
 80003d6:	270f      	movs	r7, #15
 80003d8:	401c      	ands	r4, r3
 80003da:	00a4      	lsls	r4, r4, #2
 80003dc:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3];
 80003de:	08da      	lsrs	r2, r3, #3
 80003e0:	0092      	lsls	r2, r2, #2
 80003e2:	1882      	adds	r2, r0, r2
 80003e4:	6a15      	ldr	r5, [r2, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003e6:	43bd      	bics	r5, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80003e8:	690f      	ldr	r7, [r1, #16]
 80003ea:	40a7      	lsls	r7, r4
 80003ec:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3U] = temp;
 80003ee:	6215      	str	r5, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003f0:	2203      	movs	r2, #3
 80003f2:	0014      	movs	r4, r2
 80003f4:	005d      	lsls	r5, r3, #1
 80003f6:	40ac      	lsls	r4, r5
 80003f8:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003fa:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003fc:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003fe:	4027      	ands	r7, r4
 8000400:	9704      	str	r7, [sp, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000402:	9f01      	ldr	r7, [sp, #4]
 8000404:	403a      	ands	r2, r7
 8000406:	40aa      	lsls	r2, r5
 8000408:	9f04      	ldr	r7, [sp, #16]
 800040a:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 800040c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800040e:	2e01      	cmp	r6, #1
 8000410:	d80e      	bhi.n	8000430 <HAL_GPIO_Init+0x9c>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000412:	68ca      	ldr	r2, [r1, #12]
        temp = GPIOx->OSPEEDR; 
 8000414:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000416:	40aa      	lsls	r2, r5
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000418:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800041a:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 800041c:	6082      	str	r2, [r0, #8]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800041e:	4662      	mov	r2, ip
        temp = GPIOx->OTYPER;
 8000420:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000422:	4396      	bics	r6, r2
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000424:	9a01      	ldr	r2, [sp, #4]
 8000426:	06d2      	lsls	r2, r2, #27
 8000428:	0fd2      	lsrs	r2, r2, #31
 800042a:	409a      	lsls	r2, r3
 800042c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800042e:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000430:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000432:	4014      	ands	r4, r2
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000434:	688a      	ldr	r2, [r1, #8]
 8000436:	40aa      	lsls	r2, r5
 8000438:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800043a:	9a01      	ldr	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 800043c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800043e:	00d2      	lsls	r2, r2, #3
 8000440:	d554      	bpl.n	80004ec <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000442:	2601      	movs	r6, #1
 8000444:	4a2b      	ldr	r2, [pc, #172]	; (80004f4 <HAL_GPIO_Init+0x160>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000446:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000448:	6994      	ldr	r4, [r2, #24]
 800044a:	4334      	orrs	r4, r6
 800044c:	6194      	str	r4, [r2, #24]
 800044e:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000450:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000452:	4032      	ands	r2, r6
 8000454:	9207      	str	r2, [sp, #28]
 8000456:	9a07      	ldr	r2, [sp, #28]
 8000458:	4a27      	ldr	r2, [pc, #156]	; (80004f8 <HAL_GPIO_Init+0x164>)
 800045a:	00a4      	lsls	r4, r4, #2
 800045c:	18a4      	adds	r4, r4, r2
        temp = SYSCFG->EXTICR[position >> 2];
 800045e:	68a2      	ldr	r2, [r4, #8]
 8000460:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000462:	2203      	movs	r2, #3
 8000464:	4015      	ands	r5, r2
 8000466:	00ad      	lsls	r5, r5, #2
 8000468:	320c      	adds	r2, #12
 800046a:	40aa      	lsls	r2, r5
 800046c:	4667      	mov	r7, ip
 800046e:	4397      	bics	r7, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000470:	2290      	movs	r2, #144	; 0x90
 8000472:	05d2      	lsls	r2, r2, #23
 8000474:	4694      	mov	ip, r2
 8000476:	2200      	movs	r2, #0
 8000478:	4560      	cmp	r0, ip
 800047a:	d00d      	beq.n	8000498 <HAL_GPIO_Init+0x104>
 800047c:	4a1f      	ldr	r2, [pc, #124]	; (80004fc <HAL_GPIO_Init+0x168>)
 800047e:	4694      	mov	ip, r2
 8000480:	0032      	movs	r2, r6
 8000482:	4560      	cmp	r0, ip
 8000484:	d008      	beq.n	8000498 <HAL_GPIO_Init+0x104>
 8000486:	4e1e      	ldr	r6, [pc, #120]	; (8000500 <HAL_GPIO_Init+0x16c>)
 8000488:	1892      	adds	r2, r2, r2
 800048a:	42b0      	cmp	r0, r6
 800048c:	d004      	beq.n	8000498 <HAL_GPIO_Init+0x104>
 800048e:	4e1d      	ldr	r6, [pc, #116]	; (8000504 <HAL_GPIO_Init+0x170>)
 8000490:	3201      	adds	r2, #1
 8000492:	42b0      	cmp	r0, r6
 8000494:	d000      	beq.n	8000498 <HAL_GPIO_Init+0x104>
 8000496:	9a05      	ldr	r2, [sp, #20]
 8000498:	40aa      	lsls	r2, r5
 800049a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800049c:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 800049e:	4a1a      	ldr	r2, [pc, #104]	; (8000508 <HAL_GPIO_Init+0x174>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80004a0:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 80004a2:	6816      	ldr	r6, [r2, #0]
          SET_BIT(temp, iocurrent); 
 80004a4:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004a6:	9f01      	ldr	r7, [sp, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80004a8:	43e4      	mvns	r4, r4
          SET_BIT(temp, iocurrent); 
 80004aa:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004ac:	03ff      	lsls	r7, r7, #15
 80004ae:	d401      	bmi.n	80004b4 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80004b0:	0035      	movs	r5, r6
 80004b2:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 80004b4:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80004b6:	6856      	ldr	r6, [r2, #4]
          SET_BIT(temp, iocurrent); 
 80004b8:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004ba:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 80004bc:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004be:	03bf      	lsls	r7, r7, #14
 80004c0:	d401      	bmi.n	80004c6 <HAL_GPIO_Init+0x132>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80004c2:	0035      	movs	r5, r6
 80004c4:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80004c6:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80004c8:	6896      	ldr	r6, [r2, #8]
          SET_BIT(temp, iocurrent); 
 80004ca:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004cc:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 80004ce:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004d0:	02ff      	lsls	r7, r7, #11
 80004d2:	d401      	bmi.n	80004d8 <HAL_GPIO_Init+0x144>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80004d4:	0035      	movs	r5, r6
 80004d6:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80004d8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80004da:	68d5      	ldr	r5, [r2, #12]
          SET_BIT(temp, iocurrent); 
 80004dc:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004de:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 80004e0:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004e2:	02bf      	lsls	r7, r7, #10
 80004e4:	d401      	bmi.n	80004ea <HAL_GPIO_Init+0x156>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80004e6:	4025      	ands	r5, r4
 80004e8:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80004ea:	60d6      	str	r6, [r2, #12]
    position++;
 80004ec:	3301      	adds	r3, #1
 80004ee:	e75c      	b.n	80003aa <HAL_GPIO_Init+0x16>
 80004f0:	b7fff000 	.word	0xb7fff000
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010000 	.word	0x40010000
 80004fc:	48000400 	.word	0x48000400
 8000500:	48000800 	.word	0x48000800
 8000504:	48000c00 	.word	0x48000c00
 8000508:	40010400 	.word	0x40010400

0800050c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800050c:	2a00      	cmp	r2, #0
 800050e:	d001      	beq.n	8000514 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000510:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000512:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000514:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000516:	e7fc      	b.n	8000512 <HAL_GPIO_WritePin+0x6>

08000518 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000518:	6943      	ldr	r3, [r0, #20]
 800051a:	4059      	eors	r1, r3
 800051c:	6141      	str	r1, [r0, #20]
}
 800051e:	4770      	bx	lr

08000520 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8000522:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000524:	695a      	ldr	r2, [r3, #20]
 8000526:	4210      	tst	r0, r2
 8000528:	d002      	beq.n	8000530 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800052a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800052c:	f000 fddc 	bl	80010e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000530:	bd10      	pop	{r4, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	40010400 	.word	0x40010400

08000538 <HAL_PWR_EnterSLEEPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8000538:	2004      	movs	r0, #4
 800053a:	4a06      	ldr	r2, [pc, #24]	; (8000554 <HAL_PWR_EnterSLEEPMode+0x1c>)
 800053c:	6913      	ldr	r3, [r2, #16]
 800053e:	4383      	bics	r3, r0
 8000540:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000542:	2901      	cmp	r1, #1
 8000544:	d101      	bne.n	800054a <HAL_PWR_EnterSLEEPMode+0x12>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8000546:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8000548:	4770      	bx	lr
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 800054a:	bf40      	sev
  __ASM volatile ("wfe");
 800054c:	bf20      	wfe
 800054e:	bf20      	wfe
 8000550:	e7fa      	b.n	8000548 <HAL_PWR_EnterSLEEPMode+0x10>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000558:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800055a:	6803      	ldr	r3, [r0, #0]
{
 800055c:	b085      	sub	sp, #20
 800055e:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000560:	07db      	lsls	r3, r3, #31
 8000562:	d433      	bmi.n	80005cc <HAL_RCC_OscConfig+0x74>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000564:	682b      	ldr	r3, [r5, #0]
 8000566:	079b      	lsls	r3, r3, #30
 8000568:	d500      	bpl.n	800056c <HAL_RCC_OscConfig+0x14>
 800056a:	e08a      	b.n	8000682 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800056c:	682b      	ldr	r3, [r5, #0]
 800056e:	071b      	lsls	r3, r3, #28
 8000570:	d500      	bpl.n	8000574 <HAL_RCC_OscConfig+0x1c>
 8000572:	e0ca      	b.n	800070a <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000574:	682b      	ldr	r3, [r5, #0]
 8000576:	075b      	lsls	r3, r3, #29
 8000578:	d500      	bpl.n	800057c <HAL_RCC_OscConfig+0x24>
 800057a:	e0ed      	b.n	8000758 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800057c:	682b      	ldr	r3, [r5, #0]
 800057e:	06db      	lsls	r3, r3, #27
 8000580:	d51a      	bpl.n	80005b8 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000582:	696a      	ldr	r2, [r5, #20]
 8000584:	4cbc      	ldr	r4, [pc, #752]	; (8000878 <HAL_RCC_OscConfig+0x320>)
 8000586:	2304      	movs	r3, #4
 8000588:	2a01      	cmp	r2, #1
 800058a:	d000      	beq.n	800058e <HAL_RCC_OscConfig+0x36>
 800058c:	e159      	b.n	8000842 <HAL_RCC_OscConfig+0x2ea>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800058e:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000590:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000592:	430b      	orrs	r3, r1
 8000594:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000596:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000598:	431a      	orrs	r2, r3
 800059a:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 800059c:	f7ff fe7c 	bl	8000298 <HAL_GetTick>
 80005a0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80005a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80005a4:	4233      	tst	r3, r6
 80005a6:	d100      	bne.n	80005aa <HAL_RCC_OscConfig+0x52>
 80005a8:	e144      	b.n	8000834 <HAL_RCC_OscConfig+0x2dc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80005aa:	21f8      	movs	r1, #248	; 0xf8
 80005ac:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80005ae:	69ab      	ldr	r3, [r5, #24]
 80005b0:	438a      	bics	r2, r1
 80005b2:	00db      	lsls	r3, r3, #3
 80005b4:	4313      	orrs	r3, r2
 80005b6:	6363      	str	r3, [r4, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80005b8:	682b      	ldr	r3, [r5, #0]
 80005ba:	069b      	lsls	r3, r3, #26
 80005bc:	d500      	bpl.n	80005c0 <HAL_RCC_OscConfig+0x68>
 80005be:	e167      	b.n	8000890 <HAL_RCC_OscConfig+0x338>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005c0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80005c2:	2900      	cmp	r1, #0
 80005c4:	d000      	beq.n	80005c8 <HAL_RCC_OscConfig+0x70>
 80005c6:	e1a4      	b.n	8000912 <HAL_RCC_OscConfig+0x3ba>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80005c8:	2000      	movs	r0, #0
 80005ca:	e018      	b.n	80005fe <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005cc:	210c      	movs	r1, #12
 80005ce:	4caa      	ldr	r4, [pc, #680]	; (8000878 <HAL_RCC_OscConfig+0x320>)
 80005d0:	6862      	ldr	r2, [r4, #4]
 80005d2:	400a      	ands	r2, r1
 80005d4:	2a04      	cmp	r2, #4
 80005d6:	d00b      	beq.n	80005f0 <HAL_RCC_OscConfig+0x98>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005d8:	6863      	ldr	r3, [r4, #4]
 80005da:	400b      	ands	r3, r1
 80005dc:	2b08      	cmp	r3, #8
 80005de:	d110      	bne.n	8000602 <HAL_RCC_OscConfig+0xaa>
 80005e0:	22c0      	movs	r2, #192	; 0xc0
 80005e2:	6863      	ldr	r3, [r4, #4]
 80005e4:	0252      	lsls	r2, r2, #9
 80005e6:	4013      	ands	r3, r2
 80005e8:	2280      	movs	r2, #128	; 0x80
 80005ea:	0252      	lsls	r2, r2, #9
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d108      	bne.n	8000602 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005f0:	6823      	ldr	r3, [r4, #0]
 80005f2:	039b      	lsls	r3, r3, #14
 80005f4:	d5b6      	bpl.n	8000564 <HAL_RCC_OscConfig+0xc>
 80005f6:	686b      	ldr	r3, [r5, #4]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d1b3      	bne.n	8000564 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80005fc:	2001      	movs	r0, #1
}
 80005fe:	b005      	add	sp, #20
 8000600:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000602:	686b      	ldr	r3, [r5, #4]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d113      	bne.n	8000630 <HAL_RCC_OscConfig+0xd8>
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	6822      	ldr	r2, [r4, #0]
 800060c:	025b      	lsls	r3, r3, #9
 800060e:	4313      	orrs	r3, r2
 8000610:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000612:	f7ff fe41 	bl	8000298 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000616:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000618:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800061a:	02b6      	lsls	r6, r6, #10
 800061c:	6823      	ldr	r3, [r4, #0]
 800061e:	4233      	tst	r3, r6
 8000620:	d1a0      	bne.n	8000564 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000622:	f7ff fe39 	bl	8000298 <HAL_GetTick>
 8000626:	1bc0      	subs	r0, r0, r7
 8000628:	2864      	cmp	r0, #100	; 0x64
 800062a:	d9f7      	bls.n	800061c <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 800062c:	2003      	movs	r0, #3
 800062e:	e7e6      	b.n	80005fe <HAL_RCC_OscConfig+0xa6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000630:	2b00      	cmp	r3, #0
 8000632:	d116      	bne.n	8000662 <HAL_RCC_OscConfig+0x10a>
 8000634:	6823      	ldr	r3, [r4, #0]
 8000636:	4a91      	ldr	r2, [pc, #580]	; (800087c <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000638:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800063a:	4013      	ands	r3, r2
 800063c:	6023      	str	r3, [r4, #0]
 800063e:	6823      	ldr	r3, [r4, #0]
 8000640:	4a8f      	ldr	r2, [pc, #572]	; (8000880 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000642:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000644:	4013      	ands	r3, r2
 8000646:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000648:	f7ff fe26 	bl	8000298 <HAL_GetTick>
 800064c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800064e:	6823      	ldr	r3, [r4, #0]
 8000650:	4233      	tst	r3, r6
 8000652:	d100      	bne.n	8000656 <HAL_RCC_OscConfig+0xfe>
 8000654:	e786      	b.n	8000564 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000656:	f7ff fe1f 	bl	8000298 <HAL_GetTick>
 800065a:	1bc0      	subs	r0, r0, r7
 800065c:	2864      	cmp	r0, #100	; 0x64
 800065e:	d9f6      	bls.n	800064e <HAL_RCC_OscConfig+0xf6>
 8000660:	e7e4      	b.n	800062c <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000662:	2b05      	cmp	r3, #5
 8000664:	d105      	bne.n	8000672 <HAL_RCC_OscConfig+0x11a>
 8000666:	2380      	movs	r3, #128	; 0x80
 8000668:	6822      	ldr	r2, [r4, #0]
 800066a:	02db      	lsls	r3, r3, #11
 800066c:	4313      	orrs	r3, r2
 800066e:	6023      	str	r3, [r4, #0]
 8000670:	e7ca      	b.n	8000608 <HAL_RCC_OscConfig+0xb0>
 8000672:	6823      	ldr	r3, [r4, #0]
 8000674:	4a81      	ldr	r2, [pc, #516]	; (800087c <HAL_RCC_OscConfig+0x324>)
 8000676:	4013      	ands	r3, r2
 8000678:	6023      	str	r3, [r4, #0]
 800067a:	6823      	ldr	r3, [r4, #0]
 800067c:	4a80      	ldr	r2, [pc, #512]	; (8000880 <HAL_RCC_OscConfig+0x328>)
 800067e:	4013      	ands	r3, r2
 8000680:	e7c6      	b.n	8000610 <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000682:	220c      	movs	r2, #12
 8000684:	4c7c      	ldr	r4, [pc, #496]	; (8000878 <HAL_RCC_OscConfig+0x320>)
 8000686:	6863      	ldr	r3, [r4, #4]
 8000688:	4213      	tst	r3, r2
 800068a:	d00b      	beq.n	80006a4 <HAL_RCC_OscConfig+0x14c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800068c:	6863      	ldr	r3, [r4, #4]
 800068e:	4013      	ands	r3, r2
 8000690:	2b08      	cmp	r3, #8
 8000692:	d115      	bne.n	80006c0 <HAL_RCC_OscConfig+0x168>
 8000694:	22c0      	movs	r2, #192	; 0xc0
 8000696:	6863      	ldr	r3, [r4, #4]
 8000698:	0252      	lsls	r2, r2, #9
 800069a:	4013      	ands	r3, r2
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	0212      	lsls	r2, r2, #8
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d10d      	bne.n	80006c0 <HAL_RCC_OscConfig+0x168>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006a4:	6823      	ldr	r3, [r4, #0]
 80006a6:	079b      	lsls	r3, r3, #30
 80006a8:	d502      	bpl.n	80006b0 <HAL_RCC_OscConfig+0x158>
 80006aa:	68eb      	ldr	r3, [r5, #12]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d1a5      	bne.n	80005fc <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006b0:	21f8      	movs	r1, #248	; 0xf8
 80006b2:	6822      	ldr	r2, [r4, #0]
 80006b4:	692b      	ldr	r3, [r5, #16]
 80006b6:	438a      	bics	r2, r1
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	4313      	orrs	r3, r2
 80006bc:	6023      	str	r3, [r4, #0]
 80006be:	e755      	b.n	800056c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006c0:	68ea      	ldr	r2, [r5, #12]
 80006c2:	2301      	movs	r3, #1
 80006c4:	2a00      	cmp	r2, #0
 80006c6:	d00f      	beq.n	80006e8 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 80006c8:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006ca:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 80006cc:	4313      	orrs	r3, r2
 80006ce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006d0:	f7ff fde2 	bl	8000298 <HAL_GetTick>
 80006d4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006d6:	6823      	ldr	r3, [r4, #0]
 80006d8:	4233      	tst	r3, r6
 80006da:	d1e9      	bne.n	80006b0 <HAL_RCC_OscConfig+0x158>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006dc:	f7ff fddc 	bl	8000298 <HAL_GetTick>
 80006e0:	1bc0      	subs	r0, r0, r7
 80006e2:	2802      	cmp	r0, #2
 80006e4:	d9f7      	bls.n	80006d6 <HAL_RCC_OscConfig+0x17e>
 80006e6:	e7a1      	b.n	800062c <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_DISABLE();
 80006e8:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006ea:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80006ec:	439a      	bics	r2, r3
 80006ee:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 80006f0:	f7ff fdd2 	bl	8000298 <HAL_GetTick>
 80006f4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006f6:	6823      	ldr	r3, [r4, #0]
 80006f8:	4233      	tst	r3, r6
 80006fa:	d100      	bne.n	80006fe <HAL_RCC_OscConfig+0x1a6>
 80006fc:	e736      	b.n	800056c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006fe:	f7ff fdcb 	bl	8000298 <HAL_GetTick>
 8000702:	1bc0      	subs	r0, r0, r7
 8000704:	2802      	cmp	r0, #2
 8000706:	d9f6      	bls.n	80006f6 <HAL_RCC_OscConfig+0x19e>
 8000708:	e790      	b.n	800062c <HAL_RCC_OscConfig+0xd4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800070a:	69ea      	ldr	r2, [r5, #28]
 800070c:	2301      	movs	r3, #1
 800070e:	4c5a      	ldr	r4, [pc, #360]	; (8000878 <HAL_RCC_OscConfig+0x320>)
 8000710:	2a00      	cmp	r2, #0
 8000712:	d010      	beq.n	8000736 <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_LSI_ENABLE();
 8000714:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000716:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000718:	4313      	orrs	r3, r2
 800071a:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800071c:	f7ff fdbc 	bl	8000298 <HAL_GetTick>
 8000720:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000724:	4233      	tst	r3, r6
 8000726:	d000      	beq.n	800072a <HAL_RCC_OscConfig+0x1d2>
 8000728:	e724      	b.n	8000574 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800072a:	f7ff fdb5 	bl	8000298 <HAL_GetTick>
 800072e:	1bc0      	subs	r0, r0, r7
 8000730:	2802      	cmp	r0, #2
 8000732:	d9f6      	bls.n	8000722 <HAL_RCC_OscConfig+0x1ca>
 8000734:	e77a      	b.n	800062c <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_LSI_DISABLE();
 8000736:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000738:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 800073a:	439a      	bics	r2, r3
 800073c:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800073e:	f7ff fdab 	bl	8000298 <HAL_GetTick>
 8000742:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000744:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000746:	4233      	tst	r3, r6
 8000748:	d100      	bne.n	800074c <HAL_RCC_OscConfig+0x1f4>
 800074a:	e713      	b.n	8000574 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800074c:	f7ff fda4 	bl	8000298 <HAL_GetTick>
 8000750:	1bc0      	subs	r0, r0, r7
 8000752:	2802      	cmp	r0, #2
 8000754:	d9f6      	bls.n	8000744 <HAL_RCC_OscConfig+0x1ec>
 8000756:	e769      	b.n	800062c <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000758:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800075a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800075c:	4c46      	ldr	r4, [pc, #280]	; (8000878 <HAL_RCC_OscConfig+0x320>)
 800075e:	0552      	lsls	r2, r2, #21
 8000760:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000762:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000764:	4213      	tst	r3, r2
 8000766:	d108      	bne.n	800077a <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000768:	69e3      	ldr	r3, [r4, #28]
 800076a:	4313      	orrs	r3, r2
 800076c:	61e3      	str	r3, [r4, #28]
 800076e:	69e3      	ldr	r3, [r4, #28]
 8000770:	4013      	ands	r3, r2
 8000772:	9303      	str	r3, [sp, #12]
 8000774:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000776:	2301      	movs	r3, #1
 8000778:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800077a:	2780      	movs	r7, #128	; 0x80
 800077c:	4e41      	ldr	r6, [pc, #260]	; (8000884 <HAL_RCC_OscConfig+0x32c>)
 800077e:	007f      	lsls	r7, r7, #1
 8000780:	6833      	ldr	r3, [r6, #0]
 8000782:	423b      	tst	r3, r7
 8000784:	d006      	beq.n	8000794 <HAL_RCC_OscConfig+0x23c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000786:	68ab      	ldr	r3, [r5, #8]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d113      	bne.n	80007b4 <HAL_RCC_OscConfig+0x25c>
 800078c:	6a22      	ldr	r2, [r4, #32]
 800078e:	4313      	orrs	r3, r2
 8000790:	6223      	str	r3, [r4, #32]
 8000792:	e030      	b.n	80007f6 <HAL_RCC_OscConfig+0x29e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000794:	6833      	ldr	r3, [r6, #0]
 8000796:	433b      	orrs	r3, r7
 8000798:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800079a:	f7ff fd7d 	bl	8000298 <HAL_GetTick>
 800079e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007a0:	6833      	ldr	r3, [r6, #0]
 80007a2:	423b      	tst	r3, r7
 80007a4:	d1ef      	bne.n	8000786 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80007a6:	f7ff fd77 	bl	8000298 <HAL_GetTick>
 80007aa:	9b01      	ldr	r3, [sp, #4]
 80007ac:	1ac0      	subs	r0, r0, r3
 80007ae:	2864      	cmp	r0, #100	; 0x64
 80007b0:	d9f6      	bls.n	80007a0 <HAL_RCC_OscConfig+0x248>
 80007b2:	e73b      	b.n	800062c <HAL_RCC_OscConfig+0xd4>
 80007b4:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d114      	bne.n	80007e4 <HAL_RCC_OscConfig+0x28c>
 80007ba:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007bc:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007be:	4393      	bics	r3, r2
 80007c0:	6223      	str	r3, [r4, #32]
 80007c2:	6a23      	ldr	r3, [r4, #32]
 80007c4:	3203      	adds	r2, #3
 80007c6:	4393      	bics	r3, r2
 80007c8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007ca:	f7ff fd65 	bl	8000298 <HAL_GetTick>
 80007ce:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007d0:	6a23      	ldr	r3, [r4, #32]
 80007d2:	423b      	tst	r3, r7
 80007d4:	d025      	beq.n	8000822 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007d6:	f7ff fd5f 	bl	8000298 <HAL_GetTick>
 80007da:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <HAL_RCC_OscConfig+0x330>)
 80007dc:	1b80      	subs	r0, r0, r6
 80007de:	4298      	cmp	r0, r3
 80007e0:	d9f6      	bls.n	80007d0 <HAL_RCC_OscConfig+0x278>
 80007e2:	e723      	b.n	800062c <HAL_RCC_OscConfig+0xd4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007e4:	2b05      	cmp	r3, #5
 80007e6:	d10b      	bne.n	8000800 <HAL_RCC_OscConfig+0x2a8>
 80007e8:	6a21      	ldr	r1, [r4, #32]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	430b      	orrs	r3, r1
 80007ee:	6223      	str	r3, [r4, #32]
 80007f0:	6a23      	ldr	r3, [r4, #32]
 80007f2:	431a      	orrs	r2, r3
 80007f4:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 80007f6:	f7ff fd4f 	bl	8000298 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007fa:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80007fc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007fe:	e00d      	b.n	800081c <HAL_RCC_OscConfig+0x2c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000800:	6a23      	ldr	r3, [r4, #32]
 8000802:	4393      	bics	r3, r2
 8000804:	2204      	movs	r2, #4
 8000806:	6223      	str	r3, [r4, #32]
 8000808:	6a23      	ldr	r3, [r4, #32]
 800080a:	4393      	bics	r3, r2
 800080c:	e7c0      	b.n	8000790 <HAL_RCC_OscConfig+0x238>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800080e:	f7ff fd43 	bl	8000298 <HAL_GetTick>
 8000812:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <HAL_RCC_OscConfig+0x330>)
 8000814:	1b80      	subs	r0, r0, r6
 8000816:	4298      	cmp	r0, r3
 8000818:	d900      	bls.n	800081c <HAL_RCC_OscConfig+0x2c4>
 800081a:	e707      	b.n	800062c <HAL_RCC_OscConfig+0xd4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800081c:	6a23      	ldr	r3, [r4, #32]
 800081e:	423b      	tst	r3, r7
 8000820:	d0f5      	beq.n	800080e <HAL_RCC_OscConfig+0x2b6>
    if(pwrclkchanged == SET)
 8000822:	9b00      	ldr	r3, [sp, #0]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d000      	beq.n	800082a <HAL_RCC_OscConfig+0x2d2>
 8000828:	e6a8      	b.n	800057c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800082a:	69e3      	ldr	r3, [r4, #28]
 800082c:	4a17      	ldr	r2, [pc, #92]	; (800088c <HAL_RCC_OscConfig+0x334>)
 800082e:	4013      	ands	r3, r2
 8000830:	61e3      	str	r3, [r4, #28]
 8000832:	e6a3      	b.n	800057c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000834:	f7ff fd30 	bl	8000298 <HAL_GetTick>
 8000838:	1bc0      	subs	r0, r0, r7
 800083a:	2802      	cmp	r0, #2
 800083c:	d800      	bhi.n	8000840 <HAL_RCC_OscConfig+0x2e8>
 800083e:	e6b0      	b.n	80005a2 <HAL_RCC_OscConfig+0x4a>
 8000840:	e6f4      	b.n	800062c <HAL_RCC_OscConfig+0xd4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000842:	3205      	adds	r2, #5
 8000844:	d103      	bne.n	800084e <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000846:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000848:	439a      	bics	r2, r3
 800084a:	6362      	str	r2, [r4, #52]	; 0x34
 800084c:	e6ad      	b.n	80005aa <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 800084e:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000850:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000852:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000854:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000856:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000858:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800085a:	4393      	bics	r3, r2
 800085c:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 800085e:	f7ff fd1b 	bl	8000298 <HAL_GetTick>
 8000862:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000864:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000866:	4233      	tst	r3, r6
 8000868:	d100      	bne.n	800086c <HAL_RCC_OscConfig+0x314>
 800086a:	e6a5      	b.n	80005b8 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800086c:	f7ff fd14 	bl	8000298 <HAL_GetTick>
 8000870:	1bc0      	subs	r0, r0, r7
 8000872:	2802      	cmp	r0, #2
 8000874:	d9f6      	bls.n	8000864 <HAL_RCC_OscConfig+0x30c>
 8000876:	e6d9      	b.n	800062c <HAL_RCC_OscConfig+0xd4>
 8000878:	40021000 	.word	0x40021000
 800087c:	fffeffff 	.word	0xfffeffff
 8000880:	fffbffff 	.word	0xfffbffff
 8000884:	40007000 	.word	0x40007000
 8000888:	00001388 	.word	0x00001388
 800088c:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000890:	210c      	movs	r1, #12
 8000892:	4c46      	ldr	r4, [pc, #280]	; (80009ac <HAL_RCC_OscConfig+0x454>)
 8000894:	6862      	ldr	r2, [r4, #4]
 8000896:	400a      	ands	r2, r1
 8000898:	428a      	cmp	r2, r1
 800089a:	d009      	beq.n	80008b0 <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800089c:	6863      	ldr	r3, [r4, #4]
 800089e:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80008a0:	2b08      	cmp	r3, #8
 80008a2:	d10e      	bne.n	80008c2 <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80008a4:	22c0      	movs	r2, #192	; 0xc0
 80008a6:	6863      	ldr	r3, [r4, #4]
 80008a8:	0252      	lsls	r2, r2, #9
 80008aa:	4013      	ands	r3, r2
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d108      	bne.n	80008c2 <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80008b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008b2:	03db      	lsls	r3, r3, #15
 80008b4:	d400      	bmi.n	80008b8 <HAL_RCC_OscConfig+0x360>
 80008b6:	e683      	b.n	80005c0 <HAL_RCC_OscConfig+0x68>
 80008b8:	6a2b      	ldr	r3, [r5, #32]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d000      	beq.n	80008c0 <HAL_RCC_OscConfig+0x368>
 80008be:	e69d      	b.n	80005fc <HAL_RCC_OscConfig+0xa4>
 80008c0:	e67e      	b.n	80005c0 <HAL_RCC_OscConfig+0x68>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80008c2:	6a2b      	ldr	r3, [r5, #32]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d011      	beq.n	80008ec <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_HSI48_ENABLE();
 80008c8:	2680      	movs	r6, #128	; 0x80
 80008ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008cc:	0276      	lsls	r6, r6, #9
 80008ce:	4333      	orrs	r3, r6
 80008d0:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 80008d2:	f7ff fce1 	bl	8000298 <HAL_GetTick>
 80008d6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80008d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008da:	4233      	tst	r3, r6
 80008dc:	d000      	beq.n	80008e0 <HAL_RCC_OscConfig+0x388>
 80008de:	e66f      	b.n	80005c0 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80008e0:	f7ff fcda 	bl	8000298 <HAL_GetTick>
 80008e4:	1bc0      	subs	r0, r0, r7
 80008e6:	2802      	cmp	r0, #2
 80008e8:	d9f6      	bls.n	80008d8 <HAL_RCC_OscConfig+0x380>
 80008ea:	e69f      	b.n	800062c <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI48_DISABLE();
 80008ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008ee:	4a30      	ldr	r2, [pc, #192]	; (80009b0 <HAL_RCC_OscConfig+0x458>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80008f0:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 80008f2:	4013      	ands	r3, r2
 80008f4:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 80008f6:	f7ff fccf 	bl	8000298 <HAL_GetTick>
 80008fa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80008fc:	0276      	lsls	r6, r6, #9
 80008fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000900:	4233      	tst	r3, r6
 8000902:	d100      	bne.n	8000906 <HAL_RCC_OscConfig+0x3ae>
 8000904:	e65c      	b.n	80005c0 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000906:	f7ff fcc7 	bl	8000298 <HAL_GetTick>
 800090a:	1bc0      	subs	r0, r0, r7
 800090c:	2802      	cmp	r0, #2
 800090e:	d9f6      	bls.n	80008fe <HAL_RCC_OscConfig+0x3a6>
 8000910:	e68c      	b.n	800062c <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000912:	220c      	movs	r2, #12
 8000914:	4c25      	ldr	r4, [pc, #148]	; (80009ac <HAL_RCC_OscConfig+0x454>)
 8000916:	6863      	ldr	r3, [r4, #4]
 8000918:	4013      	ands	r3, r2
 800091a:	2b08      	cmp	r3, #8
 800091c:	d100      	bne.n	8000920 <HAL_RCC_OscConfig+0x3c8>
 800091e:	e66d      	b.n	80005fc <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_PLL_DISABLE();
 8000920:	6823      	ldr	r3, [r4, #0]
 8000922:	4a24      	ldr	r2, [pc, #144]	; (80009b4 <HAL_RCC_OscConfig+0x45c>)
 8000924:	4013      	ands	r3, r2
 8000926:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000928:	2902      	cmp	r1, #2
 800092a:	d12f      	bne.n	800098c <HAL_RCC_OscConfig+0x434>
        tickstart = HAL_GetTick();
 800092c:	f7ff fcb4 	bl	8000298 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000930:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000932:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000934:	04b6      	lsls	r6, r6, #18
 8000936:	6823      	ldr	r3, [r4, #0]
 8000938:	4233      	tst	r3, r6
 800093a:	d121      	bne.n	8000980 <HAL_RCC_OscConfig+0x428>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800093c:	220f      	movs	r2, #15
 800093e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000940:	4393      	bics	r3, r2
 8000942:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000944:	4313      	orrs	r3, r2
 8000946:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000948:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800094a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800094c:	6862      	ldr	r2, [r4, #4]
 800094e:	430b      	orrs	r3, r1
 8000950:	4919      	ldr	r1, [pc, #100]	; (80009b8 <HAL_RCC_OscConfig+0x460>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000952:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000954:	400a      	ands	r2, r1
 8000956:	4313      	orrs	r3, r2
 8000958:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	6822      	ldr	r2, [r4, #0]
 800095e:	045b      	lsls	r3, r3, #17
 8000960:	4313      	orrs	r3, r2
 8000962:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000964:	f7ff fc98 	bl	8000298 <HAL_GetTick>
 8000968:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800096a:	04ad      	lsls	r5, r5, #18
 800096c:	6823      	ldr	r3, [r4, #0]
 800096e:	422b      	tst	r3, r5
 8000970:	d000      	beq.n	8000974 <HAL_RCC_OscConfig+0x41c>
 8000972:	e629      	b.n	80005c8 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000974:	f7ff fc90 	bl	8000298 <HAL_GetTick>
 8000978:	1b80      	subs	r0, r0, r6
 800097a:	2802      	cmp	r0, #2
 800097c:	d9f6      	bls.n	800096c <HAL_RCC_OscConfig+0x414>
 800097e:	e655      	b.n	800062c <HAL_RCC_OscConfig+0xd4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000980:	f7ff fc8a 	bl	8000298 <HAL_GetTick>
 8000984:	1bc0      	subs	r0, r0, r7
 8000986:	2802      	cmp	r0, #2
 8000988:	d9d5      	bls.n	8000936 <HAL_RCC_OscConfig+0x3de>
 800098a:	e64f      	b.n	800062c <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 800098c:	f7ff fc84 	bl	8000298 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000990:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000992:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000994:	04ad      	lsls	r5, r5, #18
 8000996:	6823      	ldr	r3, [r4, #0]
 8000998:	422b      	tst	r3, r5
 800099a:	d100      	bne.n	800099e <HAL_RCC_OscConfig+0x446>
 800099c:	e614      	b.n	80005c8 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800099e:	f7ff fc7b 	bl	8000298 <HAL_GetTick>
 80009a2:	1b80      	subs	r0, r0, r6
 80009a4:	2802      	cmp	r0, #2
 80009a6:	d9f6      	bls.n	8000996 <HAL_RCC_OscConfig+0x43e>
 80009a8:	e640      	b.n	800062c <HAL_RCC_OscConfig+0xd4>
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	40021000 	.word	0x40021000
 80009b0:	fffeffff 	.word	0xfffeffff
 80009b4:	feffffff 	.word	0xfeffffff
 80009b8:	ffc27fff 	.word	0xffc27fff

080009bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80009bc:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80009be:	4c19      	ldr	r4, [pc, #100]	; (8000a24 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80009c0:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80009c2:	2210      	movs	r2, #16
 80009c4:	0021      	movs	r1, r4
 80009c6:	4668      	mov	r0, sp
 80009c8:	f000 fd1a 	bl	8001400 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80009cc:	0021      	movs	r1, r4
 80009ce:	ad04      	add	r5, sp, #16
 80009d0:	2210      	movs	r2, #16
 80009d2:	3110      	adds	r1, #16
 80009d4:	0028      	movs	r0, r5
 80009d6:	f000 fd13 	bl	8001400 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009da:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80009dc:	4e12      	ldr	r6, [pc, #72]	; (8000a28 <HAL_RCC_GetSysClockFreq+0x6c>)
 80009de:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80009e0:	401a      	ands	r2, r3
 80009e2:	2a08      	cmp	r2, #8
 80009e4:	d004      	beq.n	80009f0 <HAL_RCC_GetSysClockFreq+0x34>
 80009e6:	2a0c      	cmp	r2, #12
 80009e8:	d11a      	bne.n	8000a20 <HAL_RCC_GetSysClockFreq+0x64>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80009ea:	4810      	ldr	r0, [pc, #64]	; (8000a2c <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80009ec:	b008      	add	sp, #32
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80009f0:	200f      	movs	r0, #15
 80009f2:	466a      	mov	r2, sp
 80009f4:	0c99      	lsrs	r1, r3, #18
 80009f6:	4001      	ands	r1, r0
 80009f8:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80009fa:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80009fc:	4002      	ands	r2, r0
 80009fe:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000a00:	22c0      	movs	r2, #192	; 0xc0
 8000a02:	2080      	movs	r0, #128	; 0x80
 8000a04:	0252      	lsls	r2, r2, #9
 8000a06:	4013      	ands	r3, r2
 8000a08:	0240      	lsls	r0, r0, #9
 8000a0a:	4283      	cmp	r3, r0
 8000a0c:	d101      	bne.n	8000a12 <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a0e:	4808      	ldr	r0, [pc, #32]	; (8000a30 <HAL_RCC_GetSysClockFreq+0x74>)
 8000a10:	e002      	b.n	8000a18 <HAL_RCC_GetSysClockFreq+0x5c>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d1fb      	bne.n	8000a0e <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_RCC_GetSysClockFreq+0x70>)
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a18:	f7ff fb88 	bl	800012c <__udivsi3>
 8000a1c:	4360      	muls	r0, r4
 8000a1e:	e7e5      	b.n	80009ec <HAL_RCC_GetSysClockFreq+0x30>
      sysclockfreq = HSE_VALUE;
 8000a20:	4803      	ldr	r0, [pc, #12]	; (8000a30 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000a22:	e7e3      	b.n	80009ec <HAL_RCC_GetSysClockFreq+0x30>
 8000a24:	0800142c 	.word	0x0800142c
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	02dc6c00 	.word	0x02dc6c00
 8000a30:	007a1200 	.word	0x007a1200

08000a34 <HAL_RCC_ClockConfig>:
{
 8000a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a36:	2201      	movs	r2, #1
 8000a38:	4c4f      	ldr	r4, [pc, #316]	; (8000b78 <HAL_RCC_ClockConfig+0x144>)
{
 8000a3a:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a3c:	6823      	ldr	r3, [r4, #0]
{
 8000a3e:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a40:	4013      	ands	r3, r2
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d31f      	bcc.n	8000a86 <HAL_RCC_ClockConfig+0x52>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a46:	6832      	ldr	r2, [r6, #0]
 8000a48:	0793      	lsls	r3, r2, #30
 8000a4a:	d428      	bmi.n	8000a9e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a4c:	07d3      	lsls	r3, r2, #31
 8000a4e:	d42e      	bmi.n	8000aae <HAL_RCC_ClockConfig+0x7a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a50:	2301      	movs	r3, #1
 8000a52:	6822      	ldr	r2, [r4, #0]
 8000a54:	9901      	ldr	r1, [sp, #4]
 8000a56:	401a      	ands	r2, r3
 8000a58:	4291      	cmp	r1, r2
 8000a5a:	d200      	bcs.n	8000a5e <HAL_RCC_ClockConfig+0x2a>
 8000a5c:	e07e      	b.n	8000b5c <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a5e:	6833      	ldr	r3, [r6, #0]
 8000a60:	4c46      	ldr	r4, [pc, #280]	; (8000b7c <HAL_RCC_ClockConfig+0x148>)
 8000a62:	075b      	lsls	r3, r3, #29
 8000a64:	d500      	bpl.n	8000a68 <HAL_RCC_ClockConfig+0x34>
 8000a66:	e080      	b.n	8000b6a <HAL_RCC_ClockConfig+0x136>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a68:	f7ff ffa8 	bl	80009bc <HAL_RCC_GetSysClockFreq>
 8000a6c:	6863      	ldr	r3, [r4, #4]
 8000a6e:	4a44      	ldr	r2, [pc, #272]	; (8000b80 <HAL_RCC_ClockConfig+0x14c>)
 8000a70:	061b      	lsls	r3, r3, #24
 8000a72:	0f1b      	lsrs	r3, r3, #28
 8000a74:	5cd3      	ldrb	r3, [r2, r3]
 8000a76:	40d8      	lsrs	r0, r3
 8000a78:	4b42      	ldr	r3, [pc, #264]	; (8000b84 <HAL_RCC_ClockConfig+0x150>)
 8000a7a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff fbe1 	bl	8000244 <HAL_InitTick>
  return HAL_OK;
 8000a82:	2000      	movs	r0, #0
 8000a84:	e00a      	b.n	8000a9c <HAL_RCC_ClockConfig+0x68>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a86:	6823      	ldr	r3, [r4, #0]
 8000a88:	9901      	ldr	r1, [sp, #4]
 8000a8a:	4393      	bics	r3, r2
 8000a8c:	430b      	orrs	r3, r1
 8000a8e:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a90:	6823      	ldr	r3, [r4, #0]
 8000a92:	4013      	ands	r3, r2
 8000a94:	9a01      	ldr	r2, [sp, #4]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d0d5      	beq.n	8000a46 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000a9a:	2001      	movs	r0, #1
}
 8000a9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a9e:	20f0      	movs	r0, #240	; 0xf0
 8000aa0:	4936      	ldr	r1, [pc, #216]	; (8000b7c <HAL_RCC_ClockConfig+0x148>)
 8000aa2:	684b      	ldr	r3, [r1, #4]
 8000aa4:	4383      	bics	r3, r0
 8000aa6:	68b0      	ldr	r0, [r6, #8]
 8000aa8:	4303      	orrs	r3, r0
 8000aaa:	604b      	str	r3, [r1, #4]
 8000aac:	e7ce      	b.n	8000a4c <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000aae:	6872      	ldr	r2, [r6, #4]
 8000ab0:	4d32      	ldr	r5, [pc, #200]	; (8000b7c <HAL_RCC_ClockConfig+0x148>)
 8000ab2:	2a01      	cmp	r2, #1
 8000ab4:	d11a      	bne.n	8000aec <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ab6:	682b      	ldr	r3, [r5, #0]
 8000ab8:	039b      	lsls	r3, r3, #14
 8000aba:	d5ee      	bpl.n	8000a9a <HAL_RCC_ClockConfig+0x66>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000abc:	2103      	movs	r1, #3
 8000abe:	686b      	ldr	r3, [r5, #4]
 8000ac0:	438b      	bics	r3, r1
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000ac6:	f7ff fbe7 	bl	8000298 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000aca:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000acc:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d11c      	bne.n	8000b0c <HAL_RCC_ClockConfig+0xd8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	686b      	ldr	r3, [r5, #4]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	d0b9      	beq.n	8000a50 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000adc:	f7ff fbdc 	bl	8000298 <HAL_GetTick>
 8000ae0:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <HAL_RCC_ClockConfig+0x154>)
 8000ae2:	1bc0      	subs	r0, r0, r7
 8000ae4:	4298      	cmp	r0, r3
 8000ae6:	d9f4      	bls.n	8000ad2 <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 8000ae8:	2003      	movs	r0, #3
 8000aea:	e7d7      	b.n	8000a9c <HAL_RCC_ClockConfig+0x68>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000aec:	2a02      	cmp	r2, #2
 8000aee:	d103      	bne.n	8000af8 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000af0:	682b      	ldr	r3, [r5, #0]
 8000af2:	019b      	lsls	r3, r3, #6
 8000af4:	d4e2      	bmi.n	8000abc <HAL_RCC_ClockConfig+0x88>
 8000af6:	e7d0      	b.n	8000a9a <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000af8:	2a03      	cmp	r2, #3
 8000afa:	d103      	bne.n	8000b04 <HAL_RCC_ClockConfig+0xd0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000afc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000afe:	03db      	lsls	r3, r3, #15
 8000b00:	d4dc      	bmi.n	8000abc <HAL_RCC_ClockConfig+0x88>
 8000b02:	e7ca      	b.n	8000a9a <HAL_RCC_ClockConfig+0x66>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b04:	682b      	ldr	r3, [r5, #0]
 8000b06:	079b      	lsls	r3, r3, #30
 8000b08:	d4d8      	bmi.n	8000abc <HAL_RCC_ClockConfig+0x88>
 8000b0a:	e7c6      	b.n	8000a9a <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d10b      	bne.n	8000b28 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b10:	220c      	movs	r2, #12
 8000b12:	686b      	ldr	r3, [r5, #4]
 8000b14:	4013      	ands	r3, r2
 8000b16:	2b08      	cmp	r3, #8
 8000b18:	d09a      	beq.n	8000a50 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b1a:	f7ff fbbd 	bl	8000298 <HAL_GetTick>
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <HAL_RCC_ClockConfig+0x154>)
 8000b20:	1bc0      	subs	r0, r0, r7
 8000b22:	4298      	cmp	r0, r3
 8000b24:	d9f4      	bls.n	8000b10 <HAL_RCC_ClockConfig+0xdc>
 8000b26:	e7df      	b.n	8000ae8 <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000b28:	2b03      	cmp	r3, #3
 8000b2a:	d011      	beq.n	8000b50 <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b2c:	220c      	movs	r2, #12
 8000b2e:	686b      	ldr	r3, [r5, #4]
 8000b30:	4213      	tst	r3, r2
 8000b32:	d100      	bne.n	8000b36 <HAL_RCC_ClockConfig+0x102>
 8000b34:	e78c      	b.n	8000a50 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b36:	f7ff fbaf 	bl	8000298 <HAL_GetTick>
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <HAL_RCC_ClockConfig+0x154>)
 8000b3c:	1bc0      	subs	r0, r0, r7
 8000b3e:	4298      	cmp	r0, r3
 8000b40:	d9f4      	bls.n	8000b2c <HAL_RCC_ClockConfig+0xf8>
 8000b42:	e7d1      	b.n	8000ae8 <HAL_RCC_ClockConfig+0xb4>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b44:	f7ff fba8 	bl	8000298 <HAL_GetTick>
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_RCC_ClockConfig+0x154>)
 8000b4a:	1bc0      	subs	r0, r0, r7
 8000b4c:	4298      	cmp	r0, r3
 8000b4e:	d8cb      	bhi.n	8000ae8 <HAL_RCC_ClockConfig+0xb4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8000b50:	220c      	movs	r2, #12
 8000b52:	686b      	ldr	r3, [r5, #4]
 8000b54:	4013      	ands	r3, r2
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d1f4      	bne.n	8000b44 <HAL_RCC_ClockConfig+0x110>
 8000b5a:	e779      	b.n	8000a50 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b5c:	6822      	ldr	r2, [r4, #0]
 8000b5e:	439a      	bics	r2, r3
 8000b60:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b62:	6822      	ldr	r2, [r4, #0]
 8000b64:	421a      	tst	r2, r3
 8000b66:	d198      	bne.n	8000a9a <HAL_RCC_ClockConfig+0x66>
 8000b68:	e779      	b.n	8000a5e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000b6a:	6863      	ldr	r3, [r4, #4]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_RCC_ClockConfig+0x158>)
 8000b6e:	4013      	ands	r3, r2
 8000b70:	68f2      	ldr	r2, [r6, #12]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	6063      	str	r3, [r4, #4]
 8000b76:	e777      	b.n	8000a68 <HAL_RCC_ClockConfig+0x34>
 8000b78:	40022000 	.word	0x40022000
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	08001450 	.word	0x08001450
 8000b84:	20000000 	.word	0x20000000
 8000b88:	00001388 	.word	0x00001388
 8000b8c:	fffff8ff 	.word	0xfffff8ff

08000b90 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000b90:	4b01      	ldr	r3, [pc, #4]	; (8000b98 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b92:	6818      	ldr	r0, [r3, #0]
}
 8000b94:	4770      	bx	lr
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	20000000 	.word	0x20000000

08000b9c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	055b      	lsls	r3, r3, #21
 8000ba4:	0f5b      	lsrs	r3, r3, #29
 8000ba6:	5cd3      	ldrb	r3, [r2, r3]
 8000ba8:	4a03      	ldr	r2, [pc, #12]	; (8000bb8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000baa:	6810      	ldr	r0, [r2, #0]
 8000bac:	40d8      	lsrs	r0, r3
}    
 8000bae:	4770      	bx	lr
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	08001460 	.word	0x08001460
 8000bb8:	20000000 	.word	0x20000000

08000bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000bbc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000bbe:	6803      	ldr	r3, [r0, #0]
{
 8000bc0:	b085      	sub	sp, #20
 8000bc2:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000bc4:	03db      	lsls	r3, r3, #15
 8000bc6:	d528      	bpl.n	8000c1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bc8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000bca:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bcc:	4c44      	ldr	r4, [pc, #272]	; (8000ce0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000bce:	0552      	lsls	r2, r2, #21
 8000bd0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000bd2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bd4:	4213      	tst	r3, r2
 8000bd6:	d108      	bne.n	8000bea <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000bd8:	69e3      	ldr	r3, [r4, #28]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	61e3      	str	r3, [r4, #28]
 8000bde:	69e3      	ldr	r3, [r4, #28]
 8000be0:	4013      	ands	r3, r2
 8000be2:	9303      	str	r3, [sp, #12]
 8000be4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000be6:	2301      	movs	r3, #1
 8000be8:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bea:	2780      	movs	r7, #128	; 0x80
 8000bec:	4e3d      	ldr	r6, [pc, #244]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8000bee:	007f      	lsls	r7, r7, #1
 8000bf0:	6833      	ldr	r3, [r6, #0]
 8000bf2:	423b      	tst	r3, r7
 8000bf4:	d041      	beq.n	8000c7a <HAL_RCCEx_PeriphCLKConfig+0xbe>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000bf6:	22c0      	movs	r2, #192	; 0xc0
 8000bf8:	6a23      	ldr	r3, [r4, #32]
 8000bfa:	0092      	lsls	r2, r2, #2
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	4e3a      	ldr	r6, [pc, #232]	; (8000ce8 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c00:	d14d      	bne.n	8000c9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000c02:	6a23      	ldr	r3, [r4, #32]
 8000c04:	401e      	ands	r6, r3
 8000c06:	686b      	ldr	r3, [r5, #4]
 8000c08:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c0a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000c0c:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d103      	bne.n	8000c1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c12:	69e3      	ldr	r3, [r4, #28]
 8000c14:	4a35      	ldr	r2, [pc, #212]	; (8000cec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8000c16:	4013      	ands	r3, r2
 8000c18:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000c1a:	682b      	ldr	r3, [r5, #0]
 8000c1c:	07da      	lsls	r2, r3, #31
 8000c1e:	d506      	bpl.n	8000c2e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000c20:	2003      	movs	r0, #3
 8000c22:	492f      	ldr	r1, [pc, #188]	; (8000ce0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000c24:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000c26:	4382      	bics	r2, r0
 8000c28:	68a8      	ldr	r0, [r5, #8]
 8000c2a:	4302      	orrs	r2, r0
 8000c2c:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000c2e:	079a      	lsls	r2, r3, #30
 8000c30:	d506      	bpl.n	8000c40 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000c32:	492b      	ldr	r1, [pc, #172]	; (8000ce0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000c34:	482e      	ldr	r0, [pc, #184]	; (8000cf0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8000c36:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000c38:	4002      	ands	r2, r0
 8000c3a:	68e8      	ldr	r0, [r5, #12]
 8000c3c:	4302      	orrs	r2, r0
 8000c3e:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000c40:	035a      	lsls	r2, r3, #13
 8000c42:	d506      	bpl.n	8000c52 <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000c44:	4926      	ldr	r1, [pc, #152]	; (8000ce0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000c46:	482b      	ldr	r0, [pc, #172]	; (8000cf4 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8000c48:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000c4a:	4002      	ands	r2, r0
 8000c4c:	6928      	ldr	r0, [r5, #16]
 8000c4e:	4302      	orrs	r2, r0
 8000c50:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000c52:	069a      	lsls	r2, r3, #26
 8000c54:	d506      	bpl.n	8000c64 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000c56:	2010      	movs	r0, #16
 8000c58:	4921      	ldr	r1, [pc, #132]	; (8000ce0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000c5a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000c5c:	4382      	bics	r2, r0
 8000c5e:	6968      	ldr	r0, [r5, #20]
 8000c60:	4302      	orrs	r2, r0
 8000c62:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000c64:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8000c66:	055b      	lsls	r3, r3, #21
 8000c68:	d517      	bpl.n	8000c9a <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8000c6a:	2140      	movs	r1, #64	; 0x40
 8000c6c:	4a1c      	ldr	r2, [pc, #112]	; (8000ce0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000c6e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c70:	438b      	bics	r3, r1
 8000c72:	69a9      	ldr	r1, [r5, #24]
 8000c74:	430b      	orrs	r3, r1
 8000c76:	6313      	str	r3, [r2, #48]	; 0x30
 8000c78:	e00f      	b.n	8000c9a <HAL_RCCEx_PeriphCLKConfig+0xde>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c7a:	6833      	ldr	r3, [r6, #0]
 8000c7c:	433b      	orrs	r3, r7
 8000c7e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c80:	f7ff fb0a 	bl	8000298 <HAL_GetTick>
 8000c84:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c86:	6833      	ldr	r3, [r6, #0]
 8000c88:	423b      	tst	r3, r7
 8000c8a:	d1b4      	bne.n	8000bf6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c8c:	f7ff fb04 	bl	8000298 <HAL_GetTick>
 8000c90:	9b01      	ldr	r3, [sp, #4]
 8000c92:	1ac0      	subs	r0, r0, r3
 8000c94:	2864      	cmp	r0, #100	; 0x64
 8000c96:	d9f6      	bls.n	8000c86 <HAL_RCCEx_PeriphCLKConfig+0xca>
          return HAL_TIMEOUT;
 8000c98:	2003      	movs	r0, #3
}
 8000c9a:	b005      	add	sp, #20
 8000c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c9e:	6869      	ldr	r1, [r5, #4]
 8000ca0:	400a      	ands	r2, r1
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d0ad      	beq.n	8000c02 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000ca6:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000ca8:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000caa:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000cac:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000cae:	025b      	lsls	r3, r3, #9
 8000cb0:	4303      	orrs	r3, r0
 8000cb2:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000cb4:	6a23      	ldr	r3, [r4, #32]
 8000cb6:	4810      	ldr	r0, [pc, #64]	; (8000cf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000cb8:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000cba:	4003      	ands	r3, r0
 8000cbc:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000cbe:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000cc0:	07d3      	lsls	r3, r2, #31
 8000cc2:	d59e      	bpl.n	8000c02 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fae8 	bl	8000298 <HAL_GetTick>
 8000cc8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cca:	2202      	movs	r2, #2
 8000ccc:	6a23      	ldr	r3, [r4, #32]
 8000cce:	4213      	tst	r3, r2
 8000cd0:	d197      	bne.n	8000c02 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cd2:	f7ff fae1 	bl	8000298 <HAL_GetTick>
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8000cd8:	1bc0      	subs	r0, r0, r7
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d9f5      	bls.n	8000cca <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8000cde:	e7db      	b.n	8000c98 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40007000 	.word	0x40007000
 8000ce8:	fffffcff 	.word	0xfffffcff
 8000cec:	efffffff 	.word	0xefffffff
 8000cf0:	fffcffff 	.word	0xfffcffff
 8000cf4:	fff3ffff 	.word	0xfff3ffff
 8000cf8:	fffeffff 	.word	0xfffeffff
 8000cfc:	00001388 	.word	0x00001388

08000d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000d00:	b570      	push	{r4, r5, r6, lr}
 8000d02:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d04:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d06:	69c3      	ldr	r3, [r0, #28]
 8000d08:	6882      	ldr	r2, [r0, #8]
 8000d0a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d0c:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d0e:	4302      	orrs	r2, r0
 8000d10:	6960      	ldr	r0, [r4, #20]
 8000d12:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d14:	485c      	ldr	r0, [pc, #368]	; (8000e88 <UART_SetConfig+0x188>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d16:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d18:	4001      	ands	r1, r0
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d1e:	686a      	ldr	r2, [r5, #4]
 8000d20:	495a      	ldr	r1, [pc, #360]	; (8000e8c <UART_SetConfig+0x18c>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d22:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d24:	400a      	ands	r2, r1
 8000d26:	68e1      	ldr	r1, [r4, #12]
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d2c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d2e:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d30:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d32:	4857      	ldr	r0, [pc, #348]	; (8000e90 <UART_SetConfig+0x190>)
 8000d34:	4001      	ands	r1, r0
 8000d36:	430a      	orrs	r2, r1
 8000d38:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d3a:	4a56      	ldr	r2, [pc, #344]	; (8000e94 <UART_SetConfig+0x194>)
 8000d3c:	4295      	cmp	r5, r2
 8000d3e:	d112      	bne.n	8000d66 <UART_SetConfig+0x66>
 8000d40:	2103      	movs	r1, #3
 8000d42:	4a55      	ldr	r2, [pc, #340]	; (8000e98 <UART_SetConfig+0x198>)
 8000d44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000d46:	400a      	ands	r2, r1
 8000d48:	4954      	ldr	r1, [pc, #336]	; (8000e9c <UART_SetConfig+0x19c>)
 8000d4a:	5c88      	ldrb	r0, [r1, r2]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	0212      	lsls	r2, r2, #8
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d05c      	beq.n	8000e0e <UART_SetConfig+0x10e>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8000d54:	2808      	cmp	r0, #8
 8000d56:	d81a      	bhi.n	8000d8e <UART_SetConfig+0x8e>
 8000d58:	f7ff f9de 	bl	8000118 <__gnu_thumb1_case_uqi>
 8000d5c:	19261978 	.word	0x19261978
 8000d60:	1919197d 	.word	0x1919197d
 8000d64:	80          	.byte	0x80
 8000d65:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d66:	4a4e      	ldr	r2, [pc, #312]	; (8000ea0 <UART_SetConfig+0x1a0>)
 8000d68:	4295      	cmp	r5, r2
 8000d6a:	d127      	bne.n	8000dbc <UART_SetConfig+0xbc>
 8000d6c:	21c0      	movs	r1, #192	; 0xc0
 8000d6e:	2080      	movs	r0, #128	; 0x80
 8000d70:	4a49      	ldr	r2, [pc, #292]	; (8000e98 <UART_SetConfig+0x198>)
 8000d72:	0289      	lsls	r1, r1, #10
 8000d74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	400a      	ands	r2, r1
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	d100      	bne.n	8000d80 <UART_SetConfig+0x80>
 8000d7e:	e072      	b.n	8000e66 <UART_SetConfig+0x166>
 8000d80:	d807      	bhi.n	8000d92 <UART_SetConfig+0x92>
 8000d82:	2a00      	cmp	r2, #0
 8000d84:	d039      	beq.n	8000dfa <UART_SetConfig+0xfa>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d86:	2280      	movs	r2, #128	; 0x80
 8000d88:	0212      	lsls	r2, r2, #8
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d05b      	beq.n	8000e46 <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8000d8e:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8000d90:	e058      	b.n	8000e44 <UART_SetConfig+0x144>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d92:	2080      	movs	r0, #128	; 0x80
 8000d94:	0280      	lsls	r0, r0, #10
 8000d96:	4282      	cmp	r2, r0
 8000d98:	d100      	bne.n	8000d9c <UART_SetConfig+0x9c>
 8000d9a:	e06b      	b.n	8000e74 <UART_SetConfig+0x174>
 8000d9c:	428a      	cmp	r2, r1
 8000d9e:	d1f2      	bne.n	8000d86 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	0212      	lsls	r2, r2, #8
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d03b      	beq.n	8000e20 <UART_SetConfig+0x120>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000da8:	6861      	ldr	r1, [r4, #4]
 8000daa:	4b3e      	ldr	r3, [pc, #248]	; (8000ea4 <UART_SetConfig+0x1a4>)
 8000dac:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000dae:	18c0      	adds	r0, r0, r3
 8000db0:	f7ff f9bc 	bl	800012c <__udivsi3>
 8000db4:	b280      	uxth	r0, r0
 8000db6:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000db8:	2000      	movs	r0, #0
        break;
 8000dba:	e043      	b.n	8000e44 <UART_SetConfig+0x144>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000dbc:	4a3a      	ldr	r2, [pc, #232]	; (8000ea8 <UART_SetConfig+0x1a8>)
 8000dbe:	4295      	cmp	r5, r2
 8000dc0:	d10c      	bne.n	8000ddc <UART_SetConfig+0xdc>
 8000dc2:	21c0      	movs	r1, #192	; 0xc0
 8000dc4:	2080      	movs	r0, #128	; 0x80
 8000dc6:	4a34      	ldr	r2, [pc, #208]	; (8000e98 <UART_SetConfig+0x198>)
 8000dc8:	0309      	lsls	r1, r1, #12
 8000dca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000dcc:	02c0      	lsls	r0, r0, #11
 8000dce:	400a      	ands	r2, r1
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	d048      	beq.n	8000e66 <UART_SetConfig+0x166>
 8000dd4:	d9d5      	bls.n	8000d82 <UART_SetConfig+0x82>
 8000dd6:	2080      	movs	r0, #128	; 0x80
 8000dd8:	0300      	lsls	r0, r0, #12
 8000dda:	e7dc      	b.n	8000d96 <UART_SetConfig+0x96>
 8000ddc:	4a33      	ldr	r2, [pc, #204]	; (8000eac <UART_SetConfig+0x1ac>)
 8000dde:	4295      	cmp	r5, r2
 8000de0:	d00b      	beq.n	8000dfa <UART_SetConfig+0xfa>
 8000de2:	4a33      	ldr	r2, [pc, #204]	; (8000eb0 <UART_SetConfig+0x1b0>)
 8000de4:	4295      	cmp	r5, r2
 8000de6:	d008      	beq.n	8000dfa <UART_SetConfig+0xfa>
 8000de8:	4a32      	ldr	r2, [pc, #200]	; (8000eb4 <UART_SetConfig+0x1b4>)
 8000dea:	4295      	cmp	r5, r2
 8000dec:	d005      	beq.n	8000dfa <UART_SetConfig+0xfa>
 8000dee:	4a32      	ldr	r2, [pc, #200]	; (8000eb8 <UART_SetConfig+0x1b8>)
 8000df0:	4295      	cmp	r5, r2
 8000df2:	d002      	beq.n	8000dfa <UART_SetConfig+0xfa>
 8000df4:	4a31      	ldr	r2, [pc, #196]	; (8000ebc <UART_SetConfig+0x1bc>)
 8000df6:	4295      	cmp	r5, r2
 8000df8:	d1c5      	bne.n	8000d86 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000dfa:	2280      	movs	r2, #128	; 0x80
 8000dfc:	0212      	lsls	r2, r2, #8
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d124      	bne.n	8000e4c <UART_SetConfig+0x14c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000e02:	f7ff fecb 	bl	8000b9c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000e06:	6863      	ldr	r3, [r4, #4]
 8000e08:	0040      	lsls	r0, r0, #1
 8000e0a:	085b      	lsrs	r3, r3, #1
 8000e0c:	e00b      	b.n	8000e26 <UART_SetConfig+0x126>
    switch (clocksource)
 8000e0e:	2808      	cmp	r0, #8
 8000e10:	d819      	bhi.n	8000e46 <UART_SetConfig+0x146>
 8000e12:	f7ff f977 	bl	8000104 <__gnu_thumb1_case_sqi>
 8000e16:	18f6      	.short	0x18f6
 8000e18:	182c1805 	.word	0x182c1805
 8000e1c:	1818      	.short	0x1818
 8000e1e:	33          	.byte	0x33
 8000e1f:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000e20:	6863      	ldr	r3, [r4, #4]
 8000e22:	0858      	lsrs	r0, r3, #1
 8000e24:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <UART_SetConfig+0x1c0>)
 8000e26:	18c0      	adds	r0, r0, r3
 8000e28:	6861      	ldr	r1, [r4, #4]
 8000e2a:	f7ff f97f 	bl	800012c <__udivsi3>
 8000e2e:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8000e30:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8000e32:	220f      	movs	r2, #15
 8000e34:	0019      	movs	r1, r3
 8000e36:	4391      	bics	r1, r2
 8000e38:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000e3a:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8000e3c:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000e3e:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8000e40:	4313      	orrs	r3, r2
 8000e42:	60cb      	str	r3, [r1, #12]

}
 8000e44:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 8000e46:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	e7f2      	b.n	8000e32 <UART_SetConfig+0x132>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000e4c:	f7ff fea6 	bl	8000b9c <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000e50:	6861      	ldr	r1, [r4, #4]
 8000e52:	084b      	lsrs	r3, r1, #1
 8000e54:	e7ab      	b.n	8000dae <UART_SetConfig+0xae>
 8000e56:	f7ff fdb1 	bl	80009bc <HAL_RCC_GetSysClockFreq>
 8000e5a:	e7f9      	b.n	8000e50 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	6861      	ldr	r1, [r4, #4]
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	0848      	lsrs	r0, r1, #1
 8000e64:	e7a3      	b.n	8000dae <UART_SetConfig+0xae>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e66:	2280      	movs	r2, #128	; 0x80
 8000e68:	0212      	lsls	r2, r2, #8
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d1f3      	bne.n	8000e56 <UART_SetConfig+0x156>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000e6e:	f7ff fda5 	bl	80009bc <HAL_RCC_GetSysClockFreq>
 8000e72:	e7c8      	b.n	8000e06 <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	0212      	lsls	r2, r2, #8
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d1ef      	bne.n	8000e5c <UART_SetConfig+0x15c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000e7c:	6863      	ldr	r3, [r4, #4]
 8000e7e:	0858      	lsrs	r0, r3, #1
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	025b      	lsls	r3, r3, #9
 8000e84:	e7cf      	b.n	8000e26 <UART_SetConfig+0x126>
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	efff69f3 	.word	0xefff69f3
 8000e8c:	ffffcfff 	.word	0xffffcfff
 8000e90:	fffff4ff 	.word	0xfffff4ff
 8000e94:	40013800 	.word	0x40013800
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	0800144c 	.word	0x0800144c
 8000ea0:	40004400 	.word	0x40004400
 8000ea4:	007a1200 	.word	0x007a1200
 8000ea8:	40004800 	.word	0x40004800
 8000eac:	40004c00 	.word	0x40004c00
 8000eb0:	40005000 	.word	0x40005000
 8000eb4:	40011400 	.word	0x40011400
 8000eb8:	40011800 	.word	0x40011800
 8000ebc:	40011c00 	.word	0x40011c00
 8000ec0:	00f42400 	.word	0x00f42400

08000ec4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000ec4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000ec6:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000ec8:	07da      	lsls	r2, r3, #31
 8000eca:	d506      	bpl.n	8000eda <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8000ecc:	6801      	ldr	r1, [r0, #0]
 8000ece:	4c28      	ldr	r4, [pc, #160]	; (8000f70 <UART_AdvFeatureConfig+0xac>)
 8000ed0:	684a      	ldr	r2, [r1, #4]
 8000ed2:	4022      	ands	r2, r4
 8000ed4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8000ed6:	4322      	orrs	r2, r4
 8000ed8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8000eda:	079a      	lsls	r2, r3, #30
 8000edc:	d506      	bpl.n	8000eec <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8000ede:	6801      	ldr	r1, [r0, #0]
 8000ee0:	4c24      	ldr	r4, [pc, #144]	; (8000f74 <UART_AdvFeatureConfig+0xb0>)
 8000ee2:	684a      	ldr	r2, [r1, #4]
 8000ee4:	4022      	ands	r2, r4
 8000ee6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8000ee8:	4322      	orrs	r2, r4
 8000eea:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8000eec:	075a      	lsls	r2, r3, #29
 8000eee:	d506      	bpl.n	8000efe <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8000ef0:	6801      	ldr	r1, [r0, #0]
 8000ef2:	4c21      	ldr	r4, [pc, #132]	; (8000f78 <UART_AdvFeatureConfig+0xb4>)
 8000ef4:	684a      	ldr	r2, [r1, #4]
 8000ef6:	4022      	ands	r2, r4
 8000ef8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8000efa:	4322      	orrs	r2, r4
 8000efc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8000efe:	071a      	lsls	r2, r3, #28
 8000f00:	d506      	bpl.n	8000f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8000f02:	6801      	ldr	r1, [r0, #0]
 8000f04:	4c1d      	ldr	r4, [pc, #116]	; (8000f7c <UART_AdvFeatureConfig+0xb8>)
 8000f06:	684a      	ldr	r2, [r1, #4]
 8000f08:	4022      	ands	r2, r4
 8000f0a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000f0c:	4322      	orrs	r2, r4
 8000f0e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8000f10:	06da      	lsls	r2, r3, #27
 8000f12:	d506      	bpl.n	8000f22 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8000f14:	6801      	ldr	r1, [r0, #0]
 8000f16:	4c1a      	ldr	r4, [pc, #104]	; (8000f80 <UART_AdvFeatureConfig+0xbc>)
 8000f18:	688a      	ldr	r2, [r1, #8]
 8000f1a:	4022      	ands	r2, r4
 8000f1c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8000f1e:	4322      	orrs	r2, r4
 8000f20:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8000f22:	069a      	lsls	r2, r3, #26
 8000f24:	d506      	bpl.n	8000f34 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8000f26:	6801      	ldr	r1, [r0, #0]
 8000f28:	4c16      	ldr	r4, [pc, #88]	; (8000f84 <UART_AdvFeatureConfig+0xc0>)
 8000f2a:	688a      	ldr	r2, [r1, #8]
 8000f2c:	4022      	ands	r2, r4
 8000f2e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8000f30:	4322      	orrs	r2, r4
 8000f32:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8000f34:	065a      	lsls	r2, r3, #25
 8000f36:	d510      	bpl.n	8000f5a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8000f38:	6801      	ldr	r1, [r0, #0]
 8000f3a:	4d13      	ldr	r5, [pc, #76]	; (8000f88 <UART_AdvFeatureConfig+0xc4>)
 8000f3c:	684a      	ldr	r2, [r1, #4]
 8000f3e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000f40:	402a      	ands	r2, r5
 8000f42:	4322      	orrs	r2, r4
 8000f44:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8000f46:	2280      	movs	r2, #128	; 0x80
 8000f48:	0352      	lsls	r2, r2, #13
 8000f4a:	4294      	cmp	r4, r2
 8000f4c:	d105      	bne.n	8000f5a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8000f4e:	684a      	ldr	r2, [r1, #4]
 8000f50:	4c0e      	ldr	r4, [pc, #56]	; (8000f8c <UART_AdvFeatureConfig+0xc8>)
 8000f52:	4022      	ands	r2, r4
 8000f54:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000f56:	4322      	orrs	r2, r4
 8000f58:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8000f5a:	061b      	lsls	r3, r3, #24
 8000f5c:	d506      	bpl.n	8000f6c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8000f5e:	6802      	ldr	r2, [r0, #0]
 8000f60:	490b      	ldr	r1, [pc, #44]	; (8000f90 <UART_AdvFeatureConfig+0xcc>)
 8000f62:	6853      	ldr	r3, [r2, #4]
 8000f64:	400b      	ands	r3, r1
 8000f66:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	6053      	str	r3, [r2, #4]
  }
}
 8000f6c:	bd30      	pop	{r4, r5, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	fffdffff 	.word	0xfffdffff
 8000f74:	fffeffff 	.word	0xfffeffff
 8000f78:	fffbffff 	.word	0xfffbffff
 8000f7c:	ffff7fff 	.word	0xffff7fff
 8000f80:	ffffefff 	.word	0xffffefff
 8000f84:	ffffdfff 	.word	0xffffdfff
 8000f88:	ffefffff 	.word	0xffefffff
 8000f8c:	ff9fffff 	.word	0xff9fffff
 8000f90:	fff7ffff 	.word	0xfff7ffff

08000f94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f96:	0004      	movs	r4, r0
 8000f98:	000e      	movs	r6, r1
 8000f9a:	0015      	movs	r5, r2
 8000f9c:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000f9e:	6822      	ldr	r2, [r4, #0]
 8000fa0:	69d3      	ldr	r3, [r2, #28]
 8000fa2:	4033      	ands	r3, r6
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	4259      	negs	r1, r3
 8000fa8:	414b      	adcs	r3, r1
 8000faa:	42ab      	cmp	r3, r5
 8000fac:	d001      	beq.n	8000fb2 <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000fae:	2000      	movs	r0, #0
 8000fb0:	e018      	b.n	8000fe4 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8000fb2:	9b06      	ldr	r3, [sp, #24]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	d0f3      	beq.n	8000fa0 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000fb8:	9b06      	ldr	r3, [sp, #24]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d113      	bne.n	8000fe6 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <UART_WaitOnFlagUntilTimeout+0x60>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8000fc4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000fc6:	400a      	ands	r2, r1
 8000fc8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	31a3      	adds	r1, #163	; 0xa3
 8000fce:	31ff      	adds	r1, #255	; 0xff
 8000fd0:	438a      	bics	r2, r1
 8000fd2:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8000fd4:	0022      	movs	r2, r4
 8000fd6:	2320      	movs	r3, #32
 8000fd8:	3269      	adds	r2, #105	; 0x69
 8000fda:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8000fdc:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8000fde:	2300      	movs	r3, #0
 8000fe0:	3468      	adds	r4, #104	; 0x68
 8000fe2:	7023      	strb	r3, [r4, #0]
}
 8000fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000fe6:	f7ff f957 	bl	8000298 <HAL_GetTick>
 8000fea:	9b06      	ldr	r3, [sp, #24]
 8000fec:	1bc0      	subs	r0, r0, r7
 8000fee:	4283      	cmp	r3, r0
 8000ff0:	d2d5      	bcs.n	8000f9e <UART_WaitOnFlagUntilTimeout+0xa>
 8000ff2:	e7e4      	b.n	8000fbe <UART_WaitOnFlagUntilTimeout+0x2a>
 8000ff4:	fffffe5f 	.word	0xfffffe5f

08000ff8 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ff8:	2300      	movs	r3, #0
{
 8000ffa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000ffc:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ffe:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001000:	f7ff f94a 	bl	8000298 <HAL_GetTick>
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8001004:	6823      	ldr	r3, [r4, #0]
 8001006:	4a19      	ldr	r2, [pc, #100]	; (800106c <UART_CheckIdleState+0x74>)
  tickstart = HAL_GetTick();
 8001008:	0005      	movs	r5, r0
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 800100a:	4293      	cmp	r3, r2
 800100c:	d00e      	beq.n	800102c <UART_CheckIdleState+0x34>
 800100e:	4a18      	ldr	r2, [pc, #96]	; (8001070 <UART_CheckIdleState+0x78>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d00b      	beq.n	800102c <UART_CheckIdleState+0x34>
 8001014:	4a17      	ldr	r2, [pc, #92]	; (8001074 <UART_CheckIdleState+0x7c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d008      	beq.n	800102c <UART_CheckIdleState+0x34>
  huart->gState  = HAL_UART_STATE_READY;
 800101a:	0022      	movs	r2, r4
 800101c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800101e:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001020:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 8001022:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8001024:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001026:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 8001028:	7020      	strb	r0, [r4, #0]
}
 800102a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	071b      	lsls	r3, r3, #28
 8001030:	d40f      	bmi.n	8001052 <UART_CheckIdleState+0x5a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	075b      	lsls	r3, r3, #29
 8001038:	d5ef      	bpl.n	800101a <UART_CheckIdleState+0x22>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800103a:	2180      	movs	r1, #128	; 0x80
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <UART_CheckIdleState+0x80>)
 800103e:	2200      	movs	r2, #0
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	03c9      	lsls	r1, r1, #15
 8001044:	002b      	movs	r3, r5
 8001046:	0020      	movs	r0, r4
 8001048:	f7ff ffa4 	bl	8000f94 <UART_WaitOnFlagUntilTimeout>
 800104c:	2800      	cmp	r0, #0
 800104e:	d10b      	bne.n	8001068 <UART_CheckIdleState+0x70>
 8001050:	e7e3      	b.n	800101a <UART_CheckIdleState+0x22>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001052:	2180      	movs	r1, #128	; 0x80
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <UART_CheckIdleState+0x80>)
 8001056:	2200      	movs	r2, #0
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	0389      	lsls	r1, r1, #14
 800105c:	002b      	movs	r3, r5
 800105e:	0020      	movs	r0, r4
 8001060:	f7ff ff98 	bl	8000f94 <UART_WaitOnFlagUntilTimeout>
 8001064:	2800      	cmp	r0, #0
 8001066:	d0e4      	beq.n	8001032 <UART_CheckIdleState+0x3a>
        return HAL_TIMEOUT;
 8001068:	2003      	movs	r0, #3
 800106a:	e7de      	b.n	800102a <UART_CheckIdleState+0x32>
 800106c:	40013800 	.word	0x40013800
 8001070:	40004400 	.word	0x40004400
 8001074:	40004800 	.word	0x40004800
 8001078:	01ffffff 	.word	0x01ffffff

0800107c <HAL_UART_Init>:
{
 800107c:	b570      	push	{r4, r5, r6, lr}
 800107e:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001080:	d101      	bne.n	8001086 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001082:	2001      	movs	r0, #1
}
 8001084:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001086:	0005      	movs	r5, r0
 8001088:	3569      	adds	r5, #105	; 0x69
 800108a:	782b      	ldrb	r3, [r5, #0]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d104      	bne.n	800109c <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8001092:	0002      	movs	r2, r0
 8001094:	3268      	adds	r2, #104	; 0x68
 8001096:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001098:	f000 f904 	bl	80012a4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800109c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800109e:	2101      	movs	r1, #1
 80010a0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80010a2:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80010a4:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80010a6:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80010a8:	438b      	bics	r3, r1
 80010aa:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80010ac:	f7ff fe28 	bl	8000d00 <UART_SetConfig>
 80010b0:	2801      	cmp	r0, #1
 80010b2:	d0e6      	beq.n	8001082 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80010b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 80010ba:	0020      	movs	r0, r4
 80010bc:	f7ff ff02 	bl	8000ec4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <HAL_UART_Init+0x68>)
 80010c4:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80010c6:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010c8:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80010ca:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	438a      	bics	r2, r1
 80010d2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80010d4:	2201      	movs	r2, #1
 80010d6:	6819      	ldr	r1, [r3, #0]
 80010d8:	430a      	orrs	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80010dc:	f7ff ff8c 	bl	8000ff8 <UART_CheckIdleState>
 80010e0:	e7d0      	b.n	8001084 <HAL_UART_Init+0x8>
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	ffffb7ff 	.word	0xffffb7ff

080010e8 <HAL_GPIO_EXTI_Callback>:
char flag = 0;
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if (GPIO_Pin == B1_Pin){
 80010e8:	2380      	movs	r3, #128	; 0x80
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80010ea:	b510      	push	{r4, lr}
	if (GPIO_Pin == B1_Pin){
 80010ec:	019b      	lsls	r3, r3, #6
 80010ee:	4298      	cmp	r0, r3
 80010f0:	d104      	bne.n	80010fc <HAL_GPIO_EXTI_Callback+0x14>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80010f2:	2090      	movs	r0, #144	; 0x90
 80010f4:	2120      	movs	r1, #32
 80010f6:	05c0      	lsls	r0, r0, #23
 80010f8:	f7ff fa0e 	bl	8000518 <HAL_GPIO_TogglePin>
	}
}
 80010fc:	bd10      	pop	{r4, pc}

080010fe <SystemClock_Config>:

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80010fe:	2310      	movs	r3, #16
{
 8001100:	b530      	push	{r4, r5, lr}
 8001102:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001104:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800110c:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800110e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001110:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001112:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001114:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001116:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001118:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111a:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800111c:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 800111e:	9517      	str	r5, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001120:	f7ff fa1a 	bl	8000558 <HAL_RCC_OscConfig>
 8001124:	2800      	cmp	r0, #0
 8001126:	d000      	beq.n	800112a <SystemClock_Config+0x2c>
 8001128:	e7fe      	b.n	8001128 <SystemClock_Config+0x2a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112a:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800112e:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001130:	0029      	movs	r1, r5
 8001132:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001134:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001136:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001138:	f7ff fc7c 	bl	8000a34 <HAL_RCC_ClockConfig>
 800113c:	2800      	cmp	r0, #0
 800113e:	d000      	beq.n	8001142 <SystemClock_Config+0x44>
 8001140:	e7fe      	b.n	8001140 <SystemClock_Config+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001142:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001144:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001146:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001148:	f7ff fd38 	bl	8000bbc <HAL_RCCEx_PeriphCLKConfig>
 800114c:	1e04      	subs	r4, r0, #0
 800114e:	d000      	beq.n	8001152 <SystemClock_Config+0x54>
 8001150:	e7fe      	b.n	8001150 <SystemClock_Config+0x52>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001152:	f7ff fd1d 	bl	8000b90 <HAL_RCC_GetHCLKFreq>
 8001156:	21fa      	movs	r1, #250	; 0xfa
 8001158:	0089      	lsls	r1, r1, #2
 800115a:	f7fe ffe7 	bl	800012c <__udivsi3>
 800115e:	f7ff f8eb 	bl	8000338 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001162:	2004      	movs	r0, #4
 8001164:	f7ff f902 	bl	800036c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001168:	2001      	movs	r0, #1
 800116a:	0022      	movs	r2, r4
 800116c:	0021      	movs	r1, r4
 800116e:	4240      	negs	r0, r0
 8001170:	f7ff f8a8 	bl	80002c4 <HAL_NVIC_SetPriority>
}
 8001174:	b019      	add	sp, #100	; 0x64
 8001176:	bd30      	pop	{r4, r5, pc}

08001178 <main>:
{
 8001178:	b570      	push	{r4, r5, r6, lr}
 800117a:	b088      	sub	sp, #32
  HAL_Init();
 800117c:	f7ff f874 	bl	8000268 <HAL_Init>
  SystemClock_Config();
 8001180:	f7ff ffbd 	bl	80010fe <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001184:	2080      	movs	r0, #128	; 0x80
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <main+0xc8>)
 8001188:	0300      	lsls	r0, r0, #12
 800118a:	6959      	ldr	r1, [r3, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	4301      	orrs	r1, r0
 8001190:	6159      	str	r1, [r3, #20]
 8001192:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001198:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	9200      	str	r2, [sp, #0]
 800119c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800119e:	6959      	ldr	r1, [r3, #20]
 80011a0:	03c0      	lsls	r0, r0, #15
 80011a2:	4301      	orrs	r1, r0
 80011a4:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011a8:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	0289      	lsls	r1, r1, #10
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ac:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ae:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011b0:	9201      	str	r2, [sp, #4]
 80011b2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011b6:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	430a      	orrs	r2, r1
 80011ba:	615a      	str	r2, [r3, #20]
 80011bc:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c0:	400b      	ands	r3, r1
 80011c2:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011c4:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011c8:	f7ff f9a0 	bl	800050c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	019b      	lsls	r3, r3, #6
 80011d0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <main+0xcc>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d4:	a903      	add	r1, sp, #12
 80011d6:	481c      	ldr	r0, [pc, #112]	; (8001248 <main+0xd0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011d8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f7ff f8da 	bl	8000394 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011e0:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = LD2_Pin;
 80011e2:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011e4:	a903      	add	r1, sp, #12
 80011e6:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LD2_Pin;
 80011e8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f7ff f8d0 	bl	8000394 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80011f4:	0022      	movs	r2, r4
 80011f6:	0021      	movs	r1, r4
 80011f8:	2007      	movs	r0, #7
 80011fa:	f7ff f863 	bl	80002c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80011fe:	2007      	movs	r0, #7
 8001200:	f7ff f890 	bl	8000324 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8001204:	4811      	ldr	r0, [pc, #68]	; (800124c <main+0xd4>)
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <main+0xd8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001208:	6084      	str	r4, [r0, #8]
  huart2.Instance = USART2;
 800120a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800120c:	23e1      	movs	r3, #225	; 0xe1
 800120e:	025b      	lsls	r3, r3, #9
 8001210:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001212:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001214:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001216:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001218:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121e:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001220:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001222:	f7ff ff2b 	bl	800107c <HAL_UART_Init>
 8001226:	42a0      	cmp	r0, r4
 8001228:	d109      	bne.n	800123e <main+0xc6>
	  HAL_Delay(1000);
 800122a:	26fa      	movs	r6, #250	; 0xfa
 800122c:	00b6      	lsls	r6, r6, #2
 800122e:	0030      	movs	r0, r6
 8001230:	f7ff f838 	bl	80002a4 <HAL_Delay>
	  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001234:	0029      	movs	r1, r5
 8001236:	0028      	movs	r0, r5
 8001238:	f7ff f97e 	bl	8000538 <HAL_PWR_EnterSLEEPMode>
 800123c:	e7f7      	b.n	800122e <main+0xb6>
 800123e:	e7fe      	b.n	800123e <main+0xc6>
 8001240:	40021000 	.word	0x40021000
 8001244:	10210000 	.word	0x10210000
 8001248:	48000800 	.word	0x48000800
 800124c:	20000024 	.word	0x20000024
 8001250:	40004400 	.word	0x40004400

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2001      	movs	r0, #1
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_MspInit+0x4c>)
 800125a:	6999      	ldr	r1, [r3, #24]
 800125c:	4301      	orrs	r1, r0
 800125e:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001260:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001264:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	4002      	ands	r2, r0
 8001268:	9200      	str	r2, [sp, #0]
 800126a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126c:	69da      	ldr	r2, [r3, #28]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800126e:	3806      	subs	r0, #6
  __HAL_RCC_PWR_CLK_ENABLE();
 8001270:	430a      	orrs	r2, r1
 8001272:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	400b      	ands	r3, r1
 800127a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800127c:	0011      	movs	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001280:	f7ff f820 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2002      	movs	r0, #2
 8001288:	0011      	movs	r1, r2
 800128a:	4240      	negs	r0, r0
 800128c:	f7ff f81a 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2001      	movs	r0, #1
 8001294:	0011      	movs	r1, r2
 8001296:	4240      	negs	r0, r0
 8001298:	f7ff f814 	bl	80002c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129c:	bd07      	pop	{r0, r1, r2, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	40021000 	.word	0x40021000

080012a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_UART_MspInit+0x40>)
 80012a8:	6802      	ldr	r2, [r0, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d117      	bne.n	80012de <HAL_UART_MspInit+0x3a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ae:	2080      	movs	r0, #128	; 0x80
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <HAL_UART_MspInit+0x44>)
 80012b2:	0280      	lsls	r0, r0, #10
 80012b4:	69d1      	ldr	r1, [r2, #28]
 80012b6:	4301      	orrs	r1, r0
 80012b8:	61d1      	str	r1, [r2, #28]
 80012ba:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80012be:	4003      	ands	r3, r0
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012c4:	230c      	movs	r3, #12
 80012c6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	3b0a      	subs	r3, #10
 80012ca:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80012d6:	3301      	adds	r3, #1
 80012d8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f7ff f85b 	bl	8000394 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012de:	b007      	add	sp, #28
 80012e0:	bd00      	pop	{pc}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	40004400 	.word	0x40004400
 80012e8:	40021000 	.word	0x40021000

080012ec <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80012ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ee:	f7fe ffcb 	bl	8000288 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80012f2:	f7ff f84a 	bl	800038a <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f6:	bd10      	pop	{r4, pc}

080012f8 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012f8:	2080      	movs	r0, #128	; 0x80
{
 80012fa:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012fc:	0180      	lsls	r0, r0, #6
 80012fe:	f7ff f90f 	bl	8000520 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001302:	bd10      	pop	{r4, pc}

08001304 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001304:	2101      	movs	r1, #1
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001308:	4811      	ldr	r0, [pc, #68]	; (8001350 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	4002      	ands	r2, r0
 8001314:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	480e      	ldr	r0, [pc, #56]	; (8001354 <SystemInit+0x50>)
 800131a:	4002      	ands	r2, r0
 800131c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	480d      	ldr	r0, [pc, #52]	; (8001358 <SystemInit+0x54>)
 8001322:	4002      	ands	r2, r0
 8001324:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <SystemInit+0x58>)
 800132a:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800132c:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800132e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001332:	4382      	bics	r2, r0
 8001334:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEACU;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
 8001336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001338:	4809      	ldr	r0, [pc, #36]	; (8001360 <SystemInit+0x5c>)
 800133a:	4002      	ands	r2, r0
 800133c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800133e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001340:	438a      	bics	r2, r1
 8001342:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]

}
 8001348:	4770      	bx	lr
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	40021000 	.word	0x40021000
 8001350:	08ffb80c 	.word	0x08ffb80c
 8001354:	fef6ffff 	.word	0xfef6ffff
 8001358:	fffbffff 	.word	0xfffbffff
 800135c:	ffc0ffff 	.word	0xffc0ffff
 8001360:	fff0feac 	.word	0xfff0feac

08001364 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001364:	480d      	ldr	r0, [pc, #52]	; (800139c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001366:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001368:	480d      	ldr	r0, [pc, #52]	; (80013a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800136a:	490e      	ldr	r1, [pc, #56]	; (80013a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800136c:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <LoopForever+0xe>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001380:	4c0b      	ldr	r4, [pc, #44]	; (80013b0 <LoopForever+0x16>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800138e:	f7ff ffb9 	bl	8001304 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001392:	f000 f811 	bl	80013b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001396:	f7ff feef 	bl	8001178 <main>

0800139a <LoopForever>:

LoopForever:
    b LoopForever
 800139a:	e7fe      	b.n	800139a <LoopForever>
  ldr   r0, =_estack
 800139c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80013a8:	08001470 	.word	0x08001470
  ldr r2, =_sbss
 80013ac:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80013b0:	20000094 	.word	0x20000094

080013b4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC1_COMP_IRQHandler>
	...

080013b8 <__libc_init_array>:
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	2600      	movs	r6, #0
 80013bc:	4d0c      	ldr	r5, [pc, #48]	; (80013f0 <__libc_init_array+0x38>)
 80013be:	4c0d      	ldr	r4, [pc, #52]	; (80013f4 <__libc_init_array+0x3c>)
 80013c0:	1b64      	subs	r4, r4, r5
 80013c2:	10a4      	asrs	r4, r4, #2
 80013c4:	42a6      	cmp	r6, r4
 80013c6:	d109      	bne.n	80013dc <__libc_init_array+0x24>
 80013c8:	2600      	movs	r6, #0
 80013ca:	f000 f823 	bl	8001414 <_init>
 80013ce:	4d0a      	ldr	r5, [pc, #40]	; (80013f8 <__libc_init_array+0x40>)
 80013d0:	4c0a      	ldr	r4, [pc, #40]	; (80013fc <__libc_init_array+0x44>)
 80013d2:	1b64      	subs	r4, r4, r5
 80013d4:	10a4      	asrs	r4, r4, #2
 80013d6:	42a6      	cmp	r6, r4
 80013d8:	d105      	bne.n	80013e6 <__libc_init_array+0x2e>
 80013da:	bd70      	pop	{r4, r5, r6, pc}
 80013dc:	00b3      	lsls	r3, r6, #2
 80013de:	58eb      	ldr	r3, [r5, r3]
 80013e0:	4798      	blx	r3
 80013e2:	3601      	adds	r6, #1
 80013e4:	e7ee      	b.n	80013c4 <__libc_init_array+0xc>
 80013e6:	00b3      	lsls	r3, r6, #2
 80013e8:	58eb      	ldr	r3, [r5, r3]
 80013ea:	4798      	blx	r3
 80013ec:	3601      	adds	r6, #1
 80013ee:	e7f2      	b.n	80013d6 <__libc_init_array+0x1e>
 80013f0:	08001468 	.word	0x08001468
 80013f4:	08001468 	.word	0x08001468
 80013f8:	08001468 	.word	0x08001468
 80013fc:	0800146c 	.word	0x0800146c

08001400 <memcpy>:
 8001400:	2300      	movs	r3, #0
 8001402:	b510      	push	{r4, lr}
 8001404:	429a      	cmp	r2, r3
 8001406:	d100      	bne.n	800140a <memcpy+0xa>
 8001408:	bd10      	pop	{r4, pc}
 800140a:	5ccc      	ldrb	r4, [r1, r3]
 800140c:	54c4      	strb	r4, [r0, r3]
 800140e:	3301      	adds	r3, #1
 8001410:	e7f8      	b.n	8001404 <memcpy+0x4>
	...

08001414 <_init>:
 8001414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800141a:	bc08      	pop	{r3}
 800141c:	469e      	mov	lr, r3
 800141e:	4770      	bx	lr

08001420 <_fini>:
 8001420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001426:	bc08      	pop	{r3}
 8001428:	469e      	mov	lr, r3
 800142a:	4770      	bx	lr
