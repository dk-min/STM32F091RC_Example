
TIM_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000179c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001858  08001858  00011858  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001894  08001894  00011894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001898  08001898  00011898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800189c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d0  20000004  080018a0  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000d4  080018a0  000200d4  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010d32  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000020dc  00000000  00000000  00030d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006e54  00000000  00000000  00032e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000840  00000000  00000000  00039c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bd8  00000000  00000000  0003a4d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004e1e  00000000  00000000  0003b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003416  00000000  00000000  0003fec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000432dc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001974  00000000  00000000  00043358  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001840 	.word	0x08001840

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08001840 	.word	0x08001840

08000104 <__gnu_thumb1_case_sqi>:
 8000104:	b402      	push	{r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0049      	lsls	r1, r1, #1
 800010c:	5609      	ldrsb	r1, [r1, r0]
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	448e      	add	lr, r1
 8000112:	bc02      	pop	{r1}
 8000114:	4770      	bx	lr
 8000116:	46c0      	nop			; (mov r8, r8)

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000244:	b510      	push	{r4, lr}
 8000246:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000248:	f000 fc76 	bl	8000b38 <HAL_RCC_GetHCLKFreq>
 800024c:	21fa      	movs	r1, #250	; 0xfa
 800024e:	0089      	lsls	r1, r1, #2
 8000250:	f7ff ff6c 	bl	800012c <__udivsi3>
 8000254:	f000 f860 	bl	8000318 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000258:	2001      	movs	r0, #1
 800025a:	2200      	movs	r2, #0
 800025c:	0021      	movs	r1, r4
 800025e:	4240      	negs	r0, r0
 8000260:	f000 f820 	bl	80002a4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000264:	2000      	movs	r0, #0
 8000266:	bd10      	pop	{r4, pc}

08000268 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000268:	2310      	movs	r3, #16
 800026a:	4a06      	ldr	r2, [pc, #24]	; (8000284 <HAL_Init+0x1c>)
{
 800026c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000270:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000272:	430b      	orrs	r3, r1
 8000274:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000276:	f7ff ffe5 	bl	8000244 <HAL_InitTick>
  HAL_MspInit();
 800027a:	f001 f9e3 	bl	8001644 <HAL_MspInit>
}
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	40022000 	.word	0x40022000

08000288 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000288:	4a02      	ldr	r2, [pc, #8]	; (8000294 <HAL_IncTick+0xc>)
 800028a:	6813      	ldr	r3, [r2, #0]
 800028c:	3301      	adds	r3, #1
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	4770      	bx	lr
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	20000020 	.word	0x20000020

08000298 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000298:	4b01      	ldr	r3, [pc, #4]	; (80002a0 <HAL_GetTick+0x8>)
 800029a:	6818      	ldr	r0, [r3, #0]
}
 800029c:	4770      	bx	lr
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	20000020 	.word	0x20000020

080002a4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002a4:	b570      	push	{r4, r5, r6, lr}
 80002a6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002a8:	2800      	cmp	r0, #0
 80002aa:	da14      	bge.n	80002d6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ac:	230f      	movs	r3, #15
 80002ae:	b2c0      	uxtb	r0, r0
 80002b0:	4003      	ands	r3, r0
 80002b2:	3b08      	subs	r3, #8
 80002b4:	4a11      	ldr	r2, [pc, #68]	; (80002fc <HAL_NVIC_SetPriority+0x58>)
 80002b6:	089b      	lsrs	r3, r3, #2
 80002b8:	009b      	lsls	r3, r3, #2
 80002ba:	189b      	adds	r3, r3, r2
 80002bc:	2203      	movs	r2, #3
 80002be:	4010      	ands	r0, r2
 80002c0:	4090      	lsls	r0, r2
 80002c2:	32fc      	adds	r2, #252	; 0xfc
 80002c4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002c6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ca:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002cc:	69dc      	ldr	r4, [r3, #28]
 80002ce:	43ac      	bics	r4, r5
 80002d0:	4321      	orrs	r1, r4
 80002d2:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002d4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d6:	2503      	movs	r5, #3
 80002d8:	0883      	lsrs	r3, r0, #2
 80002da:	4028      	ands	r0, r5
 80002dc:	40a8      	lsls	r0, r5
 80002de:	35fc      	adds	r5, #252	; 0xfc
 80002e0:	002e      	movs	r6, r5
 80002e2:	4a07      	ldr	r2, [pc, #28]	; (8000300 <HAL_NVIC_SetPriority+0x5c>)
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	189b      	adds	r3, r3, r2
 80002e8:	22c0      	movs	r2, #192	; 0xc0
 80002ea:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ec:	4029      	ands	r1, r5
 80002ee:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002f0:	0092      	lsls	r2, r2, #2
 80002f2:	589c      	ldr	r4, [r3, r2]
 80002f4:	43b4      	bics	r4, r6
 80002f6:	4321      	orrs	r1, r4
 80002f8:	5099      	str	r1, [r3, r2]
 80002fa:	e7eb      	b.n	80002d4 <HAL_NVIC_SetPriority+0x30>
 80002fc:	e000ed00 	.word	0xe000ed00
 8000300:	e000e100 	.word	0xe000e100

08000304 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000304:	231f      	movs	r3, #31
 8000306:	4018      	ands	r0, r3
 8000308:	3b1e      	subs	r3, #30
 800030a:	4083      	lsls	r3, r0
 800030c:	4a01      	ldr	r2, [pc, #4]	; (8000314 <HAL_NVIC_EnableIRQ+0x10>)
 800030e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000310:	4770      	bx	lr
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	e000e100 	.word	0xe000e100

08000318 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000318:	4a09      	ldr	r2, [pc, #36]	; (8000340 <HAL_SYSTICK_Config+0x28>)
 800031a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 800031c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800031e:	4293      	cmp	r3, r2
 8000320:	d80d      	bhi.n	800033e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000322:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000324:	4a07      	ldr	r2, [pc, #28]	; (8000344 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000326:	4808      	ldr	r0, [pc, #32]	; (8000348 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000328:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800032a:	6a03      	ldr	r3, [r0, #32]
 800032c:	0609      	lsls	r1, r1, #24
 800032e:	021b      	lsls	r3, r3, #8
 8000330:	0a1b      	lsrs	r3, r3, #8
 8000332:	430b      	orrs	r3, r1
 8000334:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000336:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000338:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800033a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800033e:	4770      	bx	lr
 8000340:	00ffffff 	.word	0x00ffffff
 8000344:	e000e010 	.word	0xe000e010
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800034e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000350:	2804      	cmp	r0, #4
 8000352:	d102      	bne.n	800035a <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000354:	4310      	orrs	r0, r2
 8000356:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000358:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800035a:	2104      	movs	r1, #4
 800035c:	438a      	bics	r2, r1
 800035e:	601a      	str	r2, [r3, #0]
}
 8000360:	e7fa      	b.n	8000358 <HAL_SYSTICK_CLKSourceConfig+0xc>
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	e000e010 	.word	0xe000e010

08000368 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000368:	4770      	bx	lr

0800036a <HAL_SYSTICK_IRQHandler>:
{
 800036a:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 800036c:	f7ff fffc 	bl	8000368 <HAL_SYSTICK_Callback>
}
 8000370:	bd10      	pop	{r4, pc}
	...

08000374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000374:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000376:	4a56      	ldr	r2, [pc, #344]	; (80004d0 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000378:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800037a:	1882      	adds	r2, r0, r2
 800037c:	1e54      	subs	r4, r2, #1
 800037e:	41a2      	sbcs	r2, r4
{ 
 8000380:	b089      	sub	sp, #36	; 0x24
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000382:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00U;
 8000384:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000386:	3204      	adds	r2, #4
 8000388:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800038a:	9a03      	ldr	r2, [sp, #12]
 800038c:	40da      	lsrs	r2, r3
 800038e:	d101      	bne.n	8000394 <HAL_GPIO_Init+0x20>
      }
    }
    
    position++;
  } 
}
 8000390:	b009      	add	sp, #36	; 0x24
 8000392:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000394:	2201      	movs	r2, #1
 8000396:	409a      	lsls	r2, r3
 8000398:	4694      	mov	ip, r2
 800039a:	4664      	mov	r4, ip
 800039c:	9a03      	ldr	r2, [sp, #12]
 800039e:	4022      	ands	r2, r4
 80003a0:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 80003a2:	d100      	bne.n	80003a6 <HAL_GPIO_Init+0x32>
 80003a4:	e092      	b.n	80004cc <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80003a6:	684a      	ldr	r2, [r1, #4]
 80003a8:	9201      	str	r2, [sp, #4]
 80003aa:	2210      	movs	r2, #16
 80003ac:	9e01      	ldr	r6, [sp, #4]
 80003ae:	4396      	bics	r6, r2
 80003b0:	2e02      	cmp	r6, #2
 80003b2:	d10d      	bne.n	80003d0 <HAL_GPIO_Init+0x5c>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003b4:	2407      	movs	r4, #7
 80003b6:	270f      	movs	r7, #15
 80003b8:	401c      	ands	r4, r3
 80003ba:	00a4      	lsls	r4, r4, #2
 80003bc:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3];
 80003be:	08da      	lsrs	r2, r3, #3
 80003c0:	0092      	lsls	r2, r2, #2
 80003c2:	1882      	adds	r2, r0, r2
 80003c4:	6a15      	ldr	r5, [r2, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003c6:	43bd      	bics	r5, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80003c8:	690f      	ldr	r7, [r1, #16]
 80003ca:	40a7      	lsls	r7, r4
 80003cc:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3U] = temp;
 80003ce:	6215      	str	r5, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003d0:	2203      	movs	r2, #3
 80003d2:	0014      	movs	r4, r2
 80003d4:	005d      	lsls	r5, r3, #1
 80003d6:	40ac      	lsls	r4, r5
 80003d8:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003da:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003dc:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003de:	4027      	ands	r7, r4
 80003e0:	9704      	str	r7, [sp, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003e2:	9f01      	ldr	r7, [sp, #4]
 80003e4:	403a      	ands	r2, r7
 80003e6:	40aa      	lsls	r2, r5
 80003e8:	9f04      	ldr	r7, [sp, #16]
 80003ea:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80003ec:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ee:	2e01      	cmp	r6, #1
 80003f0:	d80e      	bhi.n	8000410 <HAL_GPIO_Init+0x9c>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003f2:	68ca      	ldr	r2, [r1, #12]
        temp = GPIOx->OSPEEDR; 
 80003f4:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003f6:	40aa      	lsls	r2, r5
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003f8:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003fa:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 80003fc:	6082      	str	r2, [r0, #8]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003fe:	4662      	mov	r2, ip
        temp = GPIOx->OTYPER;
 8000400:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000402:	4396      	bics	r6, r2
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000404:	9a01      	ldr	r2, [sp, #4]
 8000406:	06d2      	lsls	r2, r2, #27
 8000408:	0fd2      	lsrs	r2, r2, #31
 800040a:	409a      	lsls	r2, r3
 800040c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800040e:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000410:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000412:	4014      	ands	r4, r2
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000414:	688a      	ldr	r2, [r1, #8]
 8000416:	40aa      	lsls	r2, r5
 8000418:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800041a:	9a01      	ldr	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 800041c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800041e:	00d2      	lsls	r2, r2, #3
 8000420:	d554      	bpl.n	80004cc <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000422:	2601      	movs	r6, #1
 8000424:	4a2b      	ldr	r2, [pc, #172]	; (80004d4 <HAL_GPIO_Init+0x160>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000426:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000428:	6994      	ldr	r4, [r2, #24]
 800042a:	4334      	orrs	r4, r6
 800042c:	6194      	str	r4, [r2, #24]
 800042e:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000430:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000432:	4032      	ands	r2, r6
 8000434:	9207      	str	r2, [sp, #28]
 8000436:	9a07      	ldr	r2, [sp, #28]
 8000438:	4a27      	ldr	r2, [pc, #156]	; (80004d8 <HAL_GPIO_Init+0x164>)
 800043a:	00a4      	lsls	r4, r4, #2
 800043c:	18a4      	adds	r4, r4, r2
        temp = SYSCFG->EXTICR[position >> 2];
 800043e:	68a2      	ldr	r2, [r4, #8]
 8000440:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000442:	2203      	movs	r2, #3
 8000444:	4015      	ands	r5, r2
 8000446:	00ad      	lsls	r5, r5, #2
 8000448:	320c      	adds	r2, #12
 800044a:	40aa      	lsls	r2, r5
 800044c:	4667      	mov	r7, ip
 800044e:	4397      	bics	r7, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000450:	2290      	movs	r2, #144	; 0x90
 8000452:	05d2      	lsls	r2, r2, #23
 8000454:	4694      	mov	ip, r2
 8000456:	2200      	movs	r2, #0
 8000458:	4560      	cmp	r0, ip
 800045a:	d00d      	beq.n	8000478 <HAL_GPIO_Init+0x104>
 800045c:	4a1f      	ldr	r2, [pc, #124]	; (80004dc <HAL_GPIO_Init+0x168>)
 800045e:	4694      	mov	ip, r2
 8000460:	0032      	movs	r2, r6
 8000462:	4560      	cmp	r0, ip
 8000464:	d008      	beq.n	8000478 <HAL_GPIO_Init+0x104>
 8000466:	4e1e      	ldr	r6, [pc, #120]	; (80004e0 <HAL_GPIO_Init+0x16c>)
 8000468:	1892      	adds	r2, r2, r2
 800046a:	42b0      	cmp	r0, r6
 800046c:	d004      	beq.n	8000478 <HAL_GPIO_Init+0x104>
 800046e:	4e1d      	ldr	r6, [pc, #116]	; (80004e4 <HAL_GPIO_Init+0x170>)
 8000470:	3201      	adds	r2, #1
 8000472:	42b0      	cmp	r0, r6
 8000474:	d000      	beq.n	8000478 <HAL_GPIO_Init+0x104>
 8000476:	9a05      	ldr	r2, [sp, #20]
 8000478:	40aa      	lsls	r2, r5
 800047a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800047c:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 800047e:	4a1a      	ldr	r2, [pc, #104]	; (80004e8 <HAL_GPIO_Init+0x174>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000480:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8000482:	6816      	ldr	r6, [r2, #0]
          SET_BIT(temp, iocurrent); 
 8000484:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000486:	9f01      	ldr	r7, [sp, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000488:	43e4      	mvns	r4, r4
          SET_BIT(temp, iocurrent); 
 800048a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800048c:	03ff      	lsls	r7, r7, #15
 800048e:	d401      	bmi.n	8000494 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000490:	0035      	movs	r5, r6
 8000492:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8000494:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000496:	6856      	ldr	r6, [r2, #4]
          SET_BIT(temp, iocurrent); 
 8000498:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800049a:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 800049c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800049e:	03bf      	lsls	r7, r7, #14
 80004a0:	d401      	bmi.n	80004a6 <HAL_GPIO_Init+0x132>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80004a2:	0035      	movs	r5, r6
 80004a4:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80004a6:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80004a8:	6896      	ldr	r6, [r2, #8]
          SET_BIT(temp, iocurrent); 
 80004aa:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004ac:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 80004ae:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004b0:	02ff      	lsls	r7, r7, #11
 80004b2:	d401      	bmi.n	80004b8 <HAL_GPIO_Init+0x144>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80004b4:	0035      	movs	r5, r6
 80004b6:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80004b8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80004ba:	68d5      	ldr	r5, [r2, #12]
          SET_BIT(temp, iocurrent); 
 80004bc:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004be:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 80004c0:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004c2:	02bf      	lsls	r7, r7, #10
 80004c4:	d401      	bmi.n	80004ca <HAL_GPIO_Init+0x156>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80004c6:	4025      	ands	r5, r4
 80004c8:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80004ca:	60d6      	str	r6, [r2, #12]
    position++;
 80004cc:	3301      	adds	r3, #1
 80004ce:	e75c      	b.n	800038a <HAL_GPIO_Init+0x16>
 80004d0:	b7fff000 	.word	0xb7fff000
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010000 	.word	0x40010000
 80004dc:	48000400 	.word	0x48000400
 80004e0:	48000800 	.word	0x48000800
 80004e4:	48000c00 	.word	0x48000c00
 80004e8:	40010400 	.word	0x40010400

080004ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	d001      	beq.n	80004f4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004f0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80004f2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004f4:	6281      	str	r1, [r0, #40]	; 0x28
}
 80004f6:	e7fc      	b.n	80004f2 <HAL_GPIO_WritePin+0x6>

080004f8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004f8:	6943      	ldr	r3, [r0, #20]
 80004fa:	4059      	eors	r1, r3
 80004fc:	6141      	str	r1, [r0, #20]
}
 80004fe:	4770      	bx	lr

08000500 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000502:	6803      	ldr	r3, [r0, #0]
{
 8000504:	b085      	sub	sp, #20
 8000506:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000508:	07db      	lsls	r3, r3, #31
 800050a:	d433      	bmi.n	8000574 <HAL_RCC_OscConfig+0x74>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800050c:	682b      	ldr	r3, [r5, #0]
 800050e:	079b      	lsls	r3, r3, #30
 8000510:	d500      	bpl.n	8000514 <HAL_RCC_OscConfig+0x14>
 8000512:	e08a      	b.n	800062a <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000514:	682b      	ldr	r3, [r5, #0]
 8000516:	071b      	lsls	r3, r3, #28
 8000518:	d500      	bpl.n	800051c <HAL_RCC_OscConfig+0x1c>
 800051a:	e0ca      	b.n	80006b2 <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800051c:	682b      	ldr	r3, [r5, #0]
 800051e:	075b      	lsls	r3, r3, #29
 8000520:	d500      	bpl.n	8000524 <HAL_RCC_OscConfig+0x24>
 8000522:	e0ed      	b.n	8000700 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000524:	682b      	ldr	r3, [r5, #0]
 8000526:	06db      	lsls	r3, r3, #27
 8000528:	d51a      	bpl.n	8000560 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800052a:	696a      	ldr	r2, [r5, #20]
 800052c:	4cbc      	ldr	r4, [pc, #752]	; (8000820 <HAL_RCC_OscConfig+0x320>)
 800052e:	2304      	movs	r3, #4
 8000530:	2a01      	cmp	r2, #1
 8000532:	d000      	beq.n	8000536 <HAL_RCC_OscConfig+0x36>
 8000534:	e159      	b.n	80007ea <HAL_RCC_OscConfig+0x2ea>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000536:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000538:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800053a:	430b      	orrs	r3, r1
 800053c:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800053e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000540:	431a      	orrs	r2, r3
 8000542:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000544:	f7ff fea8 	bl	8000298 <HAL_GetTick>
 8000548:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800054a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800054c:	4233      	tst	r3, r6
 800054e:	d100      	bne.n	8000552 <HAL_RCC_OscConfig+0x52>
 8000550:	e144      	b.n	80007dc <HAL_RCC_OscConfig+0x2dc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000552:	21f8      	movs	r1, #248	; 0xf8
 8000554:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000556:	69ab      	ldr	r3, [r5, #24]
 8000558:	438a      	bics	r2, r1
 800055a:	00db      	lsls	r3, r3, #3
 800055c:	4313      	orrs	r3, r2
 800055e:	6363      	str	r3, [r4, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000560:	682b      	ldr	r3, [r5, #0]
 8000562:	069b      	lsls	r3, r3, #26
 8000564:	d500      	bpl.n	8000568 <HAL_RCC_OscConfig+0x68>
 8000566:	e167      	b.n	8000838 <HAL_RCC_OscConfig+0x338>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000568:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800056a:	2900      	cmp	r1, #0
 800056c:	d000      	beq.n	8000570 <HAL_RCC_OscConfig+0x70>
 800056e:	e1a4      	b.n	80008ba <HAL_RCC_OscConfig+0x3ba>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000570:	2000      	movs	r0, #0
 8000572:	e018      	b.n	80005a6 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000574:	210c      	movs	r1, #12
 8000576:	4caa      	ldr	r4, [pc, #680]	; (8000820 <HAL_RCC_OscConfig+0x320>)
 8000578:	6862      	ldr	r2, [r4, #4]
 800057a:	400a      	ands	r2, r1
 800057c:	2a04      	cmp	r2, #4
 800057e:	d00b      	beq.n	8000598 <HAL_RCC_OscConfig+0x98>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000580:	6863      	ldr	r3, [r4, #4]
 8000582:	400b      	ands	r3, r1
 8000584:	2b08      	cmp	r3, #8
 8000586:	d110      	bne.n	80005aa <HAL_RCC_OscConfig+0xaa>
 8000588:	22c0      	movs	r2, #192	; 0xc0
 800058a:	6863      	ldr	r3, [r4, #4]
 800058c:	0252      	lsls	r2, r2, #9
 800058e:	4013      	ands	r3, r2
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	0252      	lsls	r2, r2, #9
 8000594:	4293      	cmp	r3, r2
 8000596:	d108      	bne.n	80005aa <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000598:	6823      	ldr	r3, [r4, #0]
 800059a:	039b      	lsls	r3, r3, #14
 800059c:	d5b6      	bpl.n	800050c <HAL_RCC_OscConfig+0xc>
 800059e:	686b      	ldr	r3, [r5, #4]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d1b3      	bne.n	800050c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80005a4:	2001      	movs	r0, #1
}
 80005a6:	b005      	add	sp, #20
 80005a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005aa:	686b      	ldr	r3, [r5, #4]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d113      	bne.n	80005d8 <HAL_RCC_OscConfig+0xd8>
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	6822      	ldr	r2, [r4, #0]
 80005b4:	025b      	lsls	r3, r3, #9
 80005b6:	4313      	orrs	r3, r2
 80005b8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005ba:	f7ff fe6d 	bl	8000298 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005be:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80005c0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005c2:	02b6      	lsls	r6, r6, #10
 80005c4:	6823      	ldr	r3, [r4, #0]
 80005c6:	4233      	tst	r3, r6
 80005c8:	d1a0      	bne.n	800050c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005ca:	f7ff fe65 	bl	8000298 <HAL_GetTick>
 80005ce:	1bc0      	subs	r0, r0, r7
 80005d0:	2864      	cmp	r0, #100	; 0x64
 80005d2:	d9f7      	bls.n	80005c4 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 80005d4:	2003      	movs	r0, #3
 80005d6:	e7e6      	b.n	80005a6 <HAL_RCC_OscConfig+0xa6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d116      	bne.n	800060a <HAL_RCC_OscConfig+0x10a>
 80005dc:	6823      	ldr	r3, [r4, #0]
 80005de:	4a91      	ldr	r2, [pc, #580]	; (8000824 <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005e0:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005e2:	4013      	ands	r3, r2
 80005e4:	6023      	str	r3, [r4, #0]
 80005e6:	6823      	ldr	r3, [r4, #0]
 80005e8:	4a8f      	ldr	r2, [pc, #572]	; (8000828 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005ea:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ec:	4013      	ands	r3, r2
 80005ee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005f0:	f7ff fe52 	bl	8000298 <HAL_GetTick>
 80005f4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005f6:	6823      	ldr	r3, [r4, #0]
 80005f8:	4233      	tst	r3, r6
 80005fa:	d100      	bne.n	80005fe <HAL_RCC_OscConfig+0xfe>
 80005fc:	e786      	b.n	800050c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005fe:	f7ff fe4b 	bl	8000298 <HAL_GetTick>
 8000602:	1bc0      	subs	r0, r0, r7
 8000604:	2864      	cmp	r0, #100	; 0x64
 8000606:	d9f6      	bls.n	80005f6 <HAL_RCC_OscConfig+0xf6>
 8000608:	e7e4      	b.n	80005d4 <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800060a:	2b05      	cmp	r3, #5
 800060c:	d105      	bne.n	800061a <HAL_RCC_OscConfig+0x11a>
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	6822      	ldr	r2, [r4, #0]
 8000612:	02db      	lsls	r3, r3, #11
 8000614:	4313      	orrs	r3, r2
 8000616:	6023      	str	r3, [r4, #0]
 8000618:	e7ca      	b.n	80005b0 <HAL_RCC_OscConfig+0xb0>
 800061a:	6823      	ldr	r3, [r4, #0]
 800061c:	4a81      	ldr	r2, [pc, #516]	; (8000824 <HAL_RCC_OscConfig+0x324>)
 800061e:	4013      	ands	r3, r2
 8000620:	6023      	str	r3, [r4, #0]
 8000622:	6823      	ldr	r3, [r4, #0]
 8000624:	4a80      	ldr	r2, [pc, #512]	; (8000828 <HAL_RCC_OscConfig+0x328>)
 8000626:	4013      	ands	r3, r2
 8000628:	e7c6      	b.n	80005b8 <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800062a:	220c      	movs	r2, #12
 800062c:	4c7c      	ldr	r4, [pc, #496]	; (8000820 <HAL_RCC_OscConfig+0x320>)
 800062e:	6863      	ldr	r3, [r4, #4]
 8000630:	4213      	tst	r3, r2
 8000632:	d00b      	beq.n	800064c <HAL_RCC_OscConfig+0x14c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000634:	6863      	ldr	r3, [r4, #4]
 8000636:	4013      	ands	r3, r2
 8000638:	2b08      	cmp	r3, #8
 800063a:	d115      	bne.n	8000668 <HAL_RCC_OscConfig+0x168>
 800063c:	22c0      	movs	r2, #192	; 0xc0
 800063e:	6863      	ldr	r3, [r4, #4]
 8000640:	0252      	lsls	r2, r2, #9
 8000642:	4013      	ands	r3, r2
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	0212      	lsls	r2, r2, #8
 8000648:	4293      	cmp	r3, r2
 800064a:	d10d      	bne.n	8000668 <HAL_RCC_OscConfig+0x168>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800064c:	6823      	ldr	r3, [r4, #0]
 800064e:	079b      	lsls	r3, r3, #30
 8000650:	d502      	bpl.n	8000658 <HAL_RCC_OscConfig+0x158>
 8000652:	68eb      	ldr	r3, [r5, #12]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d1a5      	bne.n	80005a4 <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000658:	21f8      	movs	r1, #248	; 0xf8
 800065a:	6822      	ldr	r2, [r4, #0]
 800065c:	692b      	ldr	r3, [r5, #16]
 800065e:	438a      	bics	r2, r1
 8000660:	00db      	lsls	r3, r3, #3
 8000662:	4313      	orrs	r3, r2
 8000664:	6023      	str	r3, [r4, #0]
 8000666:	e755      	b.n	8000514 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000668:	68ea      	ldr	r2, [r5, #12]
 800066a:	2301      	movs	r3, #1
 800066c:	2a00      	cmp	r2, #0
 800066e:	d00f      	beq.n	8000690 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8000670:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000672:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000674:	4313      	orrs	r3, r2
 8000676:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000678:	f7ff fe0e 	bl	8000298 <HAL_GetTick>
 800067c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800067e:	6823      	ldr	r3, [r4, #0]
 8000680:	4233      	tst	r3, r6
 8000682:	d1e9      	bne.n	8000658 <HAL_RCC_OscConfig+0x158>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000684:	f7ff fe08 	bl	8000298 <HAL_GetTick>
 8000688:	1bc0      	subs	r0, r0, r7
 800068a:	2802      	cmp	r0, #2
 800068c:	d9f7      	bls.n	800067e <HAL_RCC_OscConfig+0x17e>
 800068e:	e7a1      	b.n	80005d4 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_DISABLE();
 8000690:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000692:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000694:	439a      	bics	r2, r3
 8000696:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000698:	f7ff fdfe 	bl	8000298 <HAL_GetTick>
 800069c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800069e:	6823      	ldr	r3, [r4, #0]
 80006a0:	4233      	tst	r3, r6
 80006a2:	d100      	bne.n	80006a6 <HAL_RCC_OscConfig+0x1a6>
 80006a4:	e736      	b.n	8000514 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006a6:	f7ff fdf7 	bl	8000298 <HAL_GetTick>
 80006aa:	1bc0      	subs	r0, r0, r7
 80006ac:	2802      	cmp	r0, #2
 80006ae:	d9f6      	bls.n	800069e <HAL_RCC_OscConfig+0x19e>
 80006b0:	e790      	b.n	80005d4 <HAL_RCC_OscConfig+0xd4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006b2:	69ea      	ldr	r2, [r5, #28]
 80006b4:	2301      	movs	r3, #1
 80006b6:	4c5a      	ldr	r4, [pc, #360]	; (8000820 <HAL_RCC_OscConfig+0x320>)
 80006b8:	2a00      	cmp	r2, #0
 80006ba:	d010      	beq.n	80006de <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_LSI_ENABLE();
 80006bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006be:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80006c0:	4313      	orrs	r3, r2
 80006c2:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80006c4:	f7ff fde8 	bl	8000298 <HAL_GetTick>
 80006c8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006cc:	4233      	tst	r3, r6
 80006ce:	d000      	beq.n	80006d2 <HAL_RCC_OscConfig+0x1d2>
 80006d0:	e724      	b.n	800051c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006d2:	f7ff fde1 	bl	8000298 <HAL_GetTick>
 80006d6:	1bc0      	subs	r0, r0, r7
 80006d8:	2802      	cmp	r0, #2
 80006da:	d9f6      	bls.n	80006ca <HAL_RCC_OscConfig+0x1ca>
 80006dc:	e77a      	b.n	80005d4 <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_LSI_DISABLE();
 80006de:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006e0:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80006e2:	439a      	bics	r2, r3
 80006e4:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80006e6:	f7ff fdd7 	bl	8000298 <HAL_GetTick>
 80006ea:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006ee:	4233      	tst	r3, r6
 80006f0:	d100      	bne.n	80006f4 <HAL_RCC_OscConfig+0x1f4>
 80006f2:	e713      	b.n	800051c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006f4:	f7ff fdd0 	bl	8000298 <HAL_GetTick>
 80006f8:	1bc0      	subs	r0, r0, r7
 80006fa:	2802      	cmp	r0, #2
 80006fc:	d9f6      	bls.n	80006ec <HAL_RCC_OscConfig+0x1ec>
 80006fe:	e769      	b.n	80005d4 <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000700:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000702:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000704:	4c46      	ldr	r4, [pc, #280]	; (8000820 <HAL_RCC_OscConfig+0x320>)
 8000706:	0552      	lsls	r2, r2, #21
 8000708:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800070a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800070c:	4213      	tst	r3, r2
 800070e:	d108      	bne.n	8000722 <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	69e3      	ldr	r3, [r4, #28]
 8000712:	4313      	orrs	r3, r2
 8000714:	61e3      	str	r3, [r4, #28]
 8000716:	69e3      	ldr	r3, [r4, #28]
 8000718:	4013      	ands	r3, r2
 800071a:	9303      	str	r3, [sp, #12]
 800071c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800071e:	2301      	movs	r3, #1
 8000720:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000722:	2780      	movs	r7, #128	; 0x80
 8000724:	4e41      	ldr	r6, [pc, #260]	; (800082c <HAL_RCC_OscConfig+0x32c>)
 8000726:	007f      	lsls	r7, r7, #1
 8000728:	6833      	ldr	r3, [r6, #0]
 800072a:	423b      	tst	r3, r7
 800072c:	d006      	beq.n	800073c <HAL_RCC_OscConfig+0x23c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800072e:	68ab      	ldr	r3, [r5, #8]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d113      	bne.n	800075c <HAL_RCC_OscConfig+0x25c>
 8000734:	6a22      	ldr	r2, [r4, #32]
 8000736:	4313      	orrs	r3, r2
 8000738:	6223      	str	r3, [r4, #32]
 800073a:	e030      	b.n	800079e <HAL_RCC_OscConfig+0x29e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800073c:	6833      	ldr	r3, [r6, #0]
 800073e:	433b      	orrs	r3, r7
 8000740:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000742:	f7ff fda9 	bl	8000298 <HAL_GetTick>
 8000746:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000748:	6833      	ldr	r3, [r6, #0]
 800074a:	423b      	tst	r3, r7
 800074c:	d1ef      	bne.n	800072e <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800074e:	f7ff fda3 	bl	8000298 <HAL_GetTick>
 8000752:	9b01      	ldr	r3, [sp, #4]
 8000754:	1ac0      	subs	r0, r0, r3
 8000756:	2864      	cmp	r0, #100	; 0x64
 8000758:	d9f6      	bls.n	8000748 <HAL_RCC_OscConfig+0x248>
 800075a:	e73b      	b.n	80005d4 <HAL_RCC_OscConfig+0xd4>
 800075c:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800075e:	2b00      	cmp	r3, #0
 8000760:	d114      	bne.n	800078c <HAL_RCC_OscConfig+0x28c>
 8000762:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000764:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000766:	4393      	bics	r3, r2
 8000768:	6223      	str	r3, [r4, #32]
 800076a:	6a23      	ldr	r3, [r4, #32]
 800076c:	3203      	adds	r2, #3
 800076e:	4393      	bics	r3, r2
 8000770:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000772:	f7ff fd91 	bl	8000298 <HAL_GetTick>
 8000776:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000778:	6a23      	ldr	r3, [r4, #32]
 800077a:	423b      	tst	r3, r7
 800077c:	d025      	beq.n	80007ca <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800077e:	f7ff fd8b 	bl	8000298 <HAL_GetTick>
 8000782:	4b2b      	ldr	r3, [pc, #172]	; (8000830 <HAL_RCC_OscConfig+0x330>)
 8000784:	1b80      	subs	r0, r0, r6
 8000786:	4298      	cmp	r0, r3
 8000788:	d9f6      	bls.n	8000778 <HAL_RCC_OscConfig+0x278>
 800078a:	e723      	b.n	80005d4 <HAL_RCC_OscConfig+0xd4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800078c:	2b05      	cmp	r3, #5
 800078e:	d10b      	bne.n	80007a8 <HAL_RCC_OscConfig+0x2a8>
 8000790:	6a21      	ldr	r1, [r4, #32]
 8000792:	3b01      	subs	r3, #1
 8000794:	430b      	orrs	r3, r1
 8000796:	6223      	str	r3, [r4, #32]
 8000798:	6a23      	ldr	r3, [r4, #32]
 800079a:	431a      	orrs	r2, r3
 800079c:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 800079e:	f7ff fd7b 	bl	8000298 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007a2:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80007a4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007a6:	e00d      	b.n	80007c4 <HAL_RCC_OscConfig+0x2c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a8:	6a23      	ldr	r3, [r4, #32]
 80007aa:	4393      	bics	r3, r2
 80007ac:	2204      	movs	r2, #4
 80007ae:	6223      	str	r3, [r4, #32]
 80007b0:	6a23      	ldr	r3, [r4, #32]
 80007b2:	4393      	bics	r3, r2
 80007b4:	e7c0      	b.n	8000738 <HAL_RCC_OscConfig+0x238>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007b6:	f7ff fd6f 	bl	8000298 <HAL_GetTick>
 80007ba:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <HAL_RCC_OscConfig+0x330>)
 80007bc:	1b80      	subs	r0, r0, r6
 80007be:	4298      	cmp	r0, r3
 80007c0:	d900      	bls.n	80007c4 <HAL_RCC_OscConfig+0x2c4>
 80007c2:	e707      	b.n	80005d4 <HAL_RCC_OscConfig+0xd4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007c4:	6a23      	ldr	r3, [r4, #32]
 80007c6:	423b      	tst	r3, r7
 80007c8:	d0f5      	beq.n	80007b6 <HAL_RCC_OscConfig+0x2b6>
    if(pwrclkchanged == SET)
 80007ca:	9b00      	ldr	r3, [sp, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d000      	beq.n	80007d2 <HAL_RCC_OscConfig+0x2d2>
 80007d0:	e6a8      	b.n	8000524 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007d2:	69e3      	ldr	r3, [r4, #28]
 80007d4:	4a17      	ldr	r2, [pc, #92]	; (8000834 <HAL_RCC_OscConfig+0x334>)
 80007d6:	4013      	ands	r3, r2
 80007d8:	61e3      	str	r3, [r4, #28]
 80007da:	e6a3      	b.n	8000524 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80007dc:	f7ff fd5c 	bl	8000298 <HAL_GetTick>
 80007e0:	1bc0      	subs	r0, r0, r7
 80007e2:	2802      	cmp	r0, #2
 80007e4:	d800      	bhi.n	80007e8 <HAL_RCC_OscConfig+0x2e8>
 80007e6:	e6b0      	b.n	800054a <HAL_RCC_OscConfig+0x4a>
 80007e8:	e6f4      	b.n	80005d4 <HAL_RCC_OscConfig+0xd4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80007ea:	3205      	adds	r2, #5
 80007ec:	d103      	bne.n	80007f6 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 80007ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80007f0:	439a      	bics	r2, r3
 80007f2:	6362      	str	r2, [r4, #52]	; 0x34
 80007f4:	e6ad      	b.n	8000552 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 80007f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80007f8:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80007fa:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80007fc:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80007fe:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000800:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000802:	4393      	bics	r3, r2
 8000804:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000806:	f7ff fd47 	bl	8000298 <HAL_GetTick>
 800080a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800080c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800080e:	4233      	tst	r3, r6
 8000810:	d100      	bne.n	8000814 <HAL_RCC_OscConfig+0x314>
 8000812:	e6a5      	b.n	8000560 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000814:	f7ff fd40 	bl	8000298 <HAL_GetTick>
 8000818:	1bc0      	subs	r0, r0, r7
 800081a:	2802      	cmp	r0, #2
 800081c:	d9f6      	bls.n	800080c <HAL_RCC_OscConfig+0x30c>
 800081e:	e6d9      	b.n	80005d4 <HAL_RCC_OscConfig+0xd4>
 8000820:	40021000 	.word	0x40021000
 8000824:	fffeffff 	.word	0xfffeffff
 8000828:	fffbffff 	.word	0xfffbffff
 800082c:	40007000 	.word	0x40007000
 8000830:	00001388 	.word	0x00001388
 8000834:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000838:	210c      	movs	r1, #12
 800083a:	4c46      	ldr	r4, [pc, #280]	; (8000954 <HAL_RCC_OscConfig+0x454>)
 800083c:	6862      	ldr	r2, [r4, #4]
 800083e:	400a      	ands	r2, r1
 8000840:	428a      	cmp	r2, r1
 8000842:	d009      	beq.n	8000858 <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000844:	6863      	ldr	r3, [r4, #4]
 8000846:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000848:	2b08      	cmp	r3, #8
 800084a:	d10e      	bne.n	800086a <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800084c:	22c0      	movs	r2, #192	; 0xc0
 800084e:	6863      	ldr	r3, [r4, #4]
 8000850:	0252      	lsls	r2, r2, #9
 8000852:	4013      	ands	r3, r2
 8000854:	4293      	cmp	r3, r2
 8000856:	d108      	bne.n	800086a <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000858:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800085a:	03db      	lsls	r3, r3, #15
 800085c:	d400      	bmi.n	8000860 <HAL_RCC_OscConfig+0x360>
 800085e:	e683      	b.n	8000568 <HAL_RCC_OscConfig+0x68>
 8000860:	6a2b      	ldr	r3, [r5, #32]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d000      	beq.n	8000868 <HAL_RCC_OscConfig+0x368>
 8000866:	e69d      	b.n	80005a4 <HAL_RCC_OscConfig+0xa4>
 8000868:	e67e      	b.n	8000568 <HAL_RCC_OscConfig+0x68>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800086a:	6a2b      	ldr	r3, [r5, #32]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d011      	beq.n	8000894 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_HSI48_ENABLE();
 8000870:	2680      	movs	r6, #128	; 0x80
 8000872:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000874:	0276      	lsls	r6, r6, #9
 8000876:	4333      	orrs	r3, r6
 8000878:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 800087a:	f7ff fd0d 	bl	8000298 <HAL_GetTick>
 800087e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000880:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000882:	4233      	tst	r3, r6
 8000884:	d000      	beq.n	8000888 <HAL_RCC_OscConfig+0x388>
 8000886:	e66f      	b.n	8000568 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000888:	f7ff fd06 	bl	8000298 <HAL_GetTick>
 800088c:	1bc0      	subs	r0, r0, r7
 800088e:	2802      	cmp	r0, #2
 8000890:	d9f6      	bls.n	8000880 <HAL_RCC_OscConfig+0x380>
 8000892:	e69f      	b.n	80005d4 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI48_DISABLE();
 8000894:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000896:	4a30      	ldr	r2, [pc, #192]	; (8000958 <HAL_RCC_OscConfig+0x458>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000898:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 800089a:	4013      	ands	r3, r2
 800089c:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 800089e:	f7ff fcfb 	bl	8000298 <HAL_GetTick>
 80008a2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80008a4:	0276      	lsls	r6, r6, #9
 80008a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008a8:	4233      	tst	r3, r6
 80008aa:	d100      	bne.n	80008ae <HAL_RCC_OscConfig+0x3ae>
 80008ac:	e65c      	b.n	8000568 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80008ae:	f7ff fcf3 	bl	8000298 <HAL_GetTick>
 80008b2:	1bc0      	subs	r0, r0, r7
 80008b4:	2802      	cmp	r0, #2
 80008b6:	d9f6      	bls.n	80008a6 <HAL_RCC_OscConfig+0x3a6>
 80008b8:	e68c      	b.n	80005d4 <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008ba:	220c      	movs	r2, #12
 80008bc:	4c25      	ldr	r4, [pc, #148]	; (8000954 <HAL_RCC_OscConfig+0x454>)
 80008be:	6863      	ldr	r3, [r4, #4]
 80008c0:	4013      	ands	r3, r2
 80008c2:	2b08      	cmp	r3, #8
 80008c4:	d100      	bne.n	80008c8 <HAL_RCC_OscConfig+0x3c8>
 80008c6:	e66d      	b.n	80005a4 <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_PLL_DISABLE();
 80008c8:	6823      	ldr	r3, [r4, #0]
 80008ca:	4a24      	ldr	r2, [pc, #144]	; (800095c <HAL_RCC_OscConfig+0x45c>)
 80008cc:	4013      	ands	r3, r2
 80008ce:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008d0:	2902      	cmp	r1, #2
 80008d2:	d12f      	bne.n	8000934 <HAL_RCC_OscConfig+0x434>
        tickstart = HAL_GetTick();
 80008d4:	f7ff fce0 	bl	8000298 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008d8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80008da:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008dc:	04b6      	lsls	r6, r6, #18
 80008de:	6823      	ldr	r3, [r4, #0]
 80008e0:	4233      	tst	r3, r6
 80008e2:	d121      	bne.n	8000928 <HAL_RCC_OscConfig+0x428>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008e4:	220f      	movs	r2, #15
 80008e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80008e8:	4393      	bics	r3, r2
 80008ea:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80008ec:	4313      	orrs	r3, r2
 80008ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008f0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80008f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80008f4:	6862      	ldr	r2, [r4, #4]
 80008f6:	430b      	orrs	r3, r1
 80008f8:	4919      	ldr	r1, [pc, #100]	; (8000960 <HAL_RCC_OscConfig+0x460>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008fa:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008fc:	400a      	ands	r2, r1
 80008fe:	4313      	orrs	r3, r2
 8000900:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000902:	2380      	movs	r3, #128	; 0x80
 8000904:	6822      	ldr	r2, [r4, #0]
 8000906:	045b      	lsls	r3, r3, #17
 8000908:	4313      	orrs	r3, r2
 800090a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800090c:	f7ff fcc4 	bl	8000298 <HAL_GetTick>
 8000910:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000912:	04ad      	lsls	r5, r5, #18
 8000914:	6823      	ldr	r3, [r4, #0]
 8000916:	422b      	tst	r3, r5
 8000918:	d000      	beq.n	800091c <HAL_RCC_OscConfig+0x41c>
 800091a:	e629      	b.n	8000570 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800091c:	f7ff fcbc 	bl	8000298 <HAL_GetTick>
 8000920:	1b80      	subs	r0, r0, r6
 8000922:	2802      	cmp	r0, #2
 8000924:	d9f6      	bls.n	8000914 <HAL_RCC_OscConfig+0x414>
 8000926:	e655      	b.n	80005d4 <HAL_RCC_OscConfig+0xd4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000928:	f7ff fcb6 	bl	8000298 <HAL_GetTick>
 800092c:	1bc0      	subs	r0, r0, r7
 800092e:	2802      	cmp	r0, #2
 8000930:	d9d5      	bls.n	80008de <HAL_RCC_OscConfig+0x3de>
 8000932:	e64f      	b.n	80005d4 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000934:	f7ff fcb0 	bl	8000298 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000938:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 800093a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800093c:	04ad      	lsls	r5, r5, #18
 800093e:	6823      	ldr	r3, [r4, #0]
 8000940:	422b      	tst	r3, r5
 8000942:	d100      	bne.n	8000946 <HAL_RCC_OscConfig+0x446>
 8000944:	e614      	b.n	8000570 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000946:	f7ff fca7 	bl	8000298 <HAL_GetTick>
 800094a:	1b80      	subs	r0, r0, r6
 800094c:	2802      	cmp	r0, #2
 800094e:	d9f6      	bls.n	800093e <HAL_RCC_OscConfig+0x43e>
 8000950:	e640      	b.n	80005d4 <HAL_RCC_OscConfig+0xd4>
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	40021000 	.word	0x40021000
 8000958:	fffeffff 	.word	0xfffeffff
 800095c:	feffffff 	.word	0xfeffffff
 8000960:	ffc27fff 	.word	0xffc27fff

08000964 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000964:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000966:	4c19      	ldr	r4, [pc, #100]	; (80009cc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000968:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800096a:	2210      	movs	r2, #16
 800096c:	0021      	movs	r1, r4
 800096e:	4668      	mov	r0, sp
 8000970:	f000 ff5c 	bl	800182c <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000974:	0021      	movs	r1, r4
 8000976:	ad04      	add	r5, sp, #16
 8000978:	2210      	movs	r2, #16
 800097a:	3110      	adds	r1, #16
 800097c:	0028      	movs	r0, r5
 800097e:	f000 ff55 	bl	800182c <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000982:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000984:	4e12      	ldr	r6, [pc, #72]	; (80009d0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000986:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000988:	401a      	ands	r2, r3
 800098a:	2a08      	cmp	r2, #8
 800098c:	d004      	beq.n	8000998 <HAL_RCC_GetSysClockFreq+0x34>
 800098e:	2a0c      	cmp	r2, #12
 8000990:	d11a      	bne.n	80009c8 <HAL_RCC_GetSysClockFreq+0x64>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8000992:	4810      	ldr	r0, [pc, #64]	; (80009d4 <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000994:	b008      	add	sp, #32
 8000996:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000998:	200f      	movs	r0, #15
 800099a:	466a      	mov	r2, sp
 800099c:	0c99      	lsrs	r1, r3, #18
 800099e:	4001      	ands	r1, r0
 80009a0:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80009a2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80009a4:	4002      	ands	r2, r0
 80009a6:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80009a8:	22c0      	movs	r2, #192	; 0xc0
 80009aa:	2080      	movs	r0, #128	; 0x80
 80009ac:	0252      	lsls	r2, r2, #9
 80009ae:	4013      	ands	r3, r2
 80009b0:	0240      	lsls	r0, r0, #9
 80009b2:	4283      	cmp	r3, r0
 80009b4:	d101      	bne.n	80009ba <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80009b6:	4808      	ldr	r0, [pc, #32]	; (80009d8 <HAL_RCC_GetSysClockFreq+0x74>)
 80009b8:	e002      	b.n	80009c0 <HAL_RCC_GetSysClockFreq+0x5c>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d1fb      	bne.n	80009b6 <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <HAL_RCC_GetSysClockFreq+0x70>)
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80009c0:	f7ff fbb4 	bl	800012c <__udivsi3>
 80009c4:	4360      	muls	r0, r4
 80009c6:	e7e5      	b.n	8000994 <HAL_RCC_GetSysClockFreq+0x30>
      sysclockfreq = HSE_VALUE;
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 80009ca:	e7e3      	b.n	8000994 <HAL_RCC_GetSysClockFreq+0x30>
 80009cc:	08001858 	.word	0x08001858
 80009d0:	40021000 	.word	0x40021000
 80009d4:	02dc6c00 	.word	0x02dc6c00
 80009d8:	007a1200 	.word	0x007a1200

080009dc <HAL_RCC_ClockConfig>:
{
 80009dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009de:	2201      	movs	r2, #1
 80009e0:	4c4f      	ldr	r4, [pc, #316]	; (8000b20 <HAL_RCC_ClockConfig+0x144>)
{
 80009e2:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009e4:	6823      	ldr	r3, [r4, #0]
{
 80009e6:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009e8:	4013      	ands	r3, r2
 80009ea:	428b      	cmp	r3, r1
 80009ec:	d31f      	bcc.n	8000a2e <HAL_RCC_ClockConfig+0x52>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009ee:	6832      	ldr	r2, [r6, #0]
 80009f0:	0793      	lsls	r3, r2, #30
 80009f2:	d428      	bmi.n	8000a46 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009f4:	07d3      	lsls	r3, r2, #31
 80009f6:	d42e      	bmi.n	8000a56 <HAL_RCC_ClockConfig+0x7a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80009f8:	2301      	movs	r3, #1
 80009fa:	6822      	ldr	r2, [r4, #0]
 80009fc:	9901      	ldr	r1, [sp, #4]
 80009fe:	401a      	ands	r2, r3
 8000a00:	4291      	cmp	r1, r2
 8000a02:	d200      	bcs.n	8000a06 <HAL_RCC_ClockConfig+0x2a>
 8000a04:	e07e      	b.n	8000b04 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a06:	6833      	ldr	r3, [r6, #0]
 8000a08:	4c46      	ldr	r4, [pc, #280]	; (8000b24 <HAL_RCC_ClockConfig+0x148>)
 8000a0a:	075b      	lsls	r3, r3, #29
 8000a0c:	d500      	bpl.n	8000a10 <HAL_RCC_ClockConfig+0x34>
 8000a0e:	e080      	b.n	8000b12 <HAL_RCC_ClockConfig+0x136>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a10:	f7ff ffa8 	bl	8000964 <HAL_RCC_GetSysClockFreq>
 8000a14:	6863      	ldr	r3, [r4, #4]
 8000a16:	4a44      	ldr	r2, [pc, #272]	; (8000b28 <HAL_RCC_ClockConfig+0x14c>)
 8000a18:	061b      	lsls	r3, r3, #24
 8000a1a:	0f1b      	lsrs	r3, r3, #28
 8000a1c:	5cd3      	ldrb	r3, [r2, r3]
 8000a1e:	40d8      	lsrs	r0, r3
 8000a20:	4b42      	ldr	r3, [pc, #264]	; (8000b2c <HAL_RCC_ClockConfig+0x150>)
 8000a22:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff fc0d 	bl	8000244 <HAL_InitTick>
  return HAL_OK;
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	e00a      	b.n	8000a44 <HAL_RCC_ClockConfig+0x68>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a2e:	6823      	ldr	r3, [r4, #0]
 8000a30:	9901      	ldr	r1, [sp, #4]
 8000a32:	4393      	bics	r3, r2
 8000a34:	430b      	orrs	r3, r1
 8000a36:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a38:	6823      	ldr	r3, [r4, #0]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	9a01      	ldr	r2, [sp, #4]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d0d5      	beq.n	80009ee <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000a42:	2001      	movs	r0, #1
}
 8000a44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a46:	20f0      	movs	r0, #240	; 0xf0
 8000a48:	4936      	ldr	r1, [pc, #216]	; (8000b24 <HAL_RCC_ClockConfig+0x148>)
 8000a4a:	684b      	ldr	r3, [r1, #4]
 8000a4c:	4383      	bics	r3, r0
 8000a4e:	68b0      	ldr	r0, [r6, #8]
 8000a50:	4303      	orrs	r3, r0
 8000a52:	604b      	str	r3, [r1, #4]
 8000a54:	e7ce      	b.n	80009f4 <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a56:	6872      	ldr	r2, [r6, #4]
 8000a58:	4d32      	ldr	r5, [pc, #200]	; (8000b24 <HAL_RCC_ClockConfig+0x148>)
 8000a5a:	2a01      	cmp	r2, #1
 8000a5c:	d11a      	bne.n	8000a94 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a5e:	682b      	ldr	r3, [r5, #0]
 8000a60:	039b      	lsls	r3, r3, #14
 8000a62:	d5ee      	bpl.n	8000a42 <HAL_RCC_ClockConfig+0x66>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a64:	2103      	movs	r1, #3
 8000a66:	686b      	ldr	r3, [r5, #4]
 8000a68:	438b      	bics	r3, r1
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000a6e:	f7ff fc13 	bl	8000298 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a72:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000a74:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d11c      	bne.n	8000ab4 <HAL_RCC_ClockConfig+0xd8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	686b      	ldr	r3, [r5, #4]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d0b9      	beq.n	80009f8 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a84:	f7ff fc08 	bl	8000298 <HAL_GetTick>
 8000a88:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <HAL_RCC_ClockConfig+0x154>)
 8000a8a:	1bc0      	subs	r0, r0, r7
 8000a8c:	4298      	cmp	r0, r3
 8000a8e:	d9f4      	bls.n	8000a7a <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 8000a90:	2003      	movs	r0, #3
 8000a92:	e7d7      	b.n	8000a44 <HAL_RCC_ClockConfig+0x68>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a94:	2a02      	cmp	r2, #2
 8000a96:	d103      	bne.n	8000aa0 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a98:	682b      	ldr	r3, [r5, #0]
 8000a9a:	019b      	lsls	r3, r3, #6
 8000a9c:	d4e2      	bmi.n	8000a64 <HAL_RCC_ClockConfig+0x88>
 8000a9e:	e7d0      	b.n	8000a42 <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000aa0:	2a03      	cmp	r2, #3
 8000aa2:	d103      	bne.n	8000aac <HAL_RCC_ClockConfig+0xd0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000aa4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000aa6:	03db      	lsls	r3, r3, #15
 8000aa8:	d4dc      	bmi.n	8000a64 <HAL_RCC_ClockConfig+0x88>
 8000aaa:	e7ca      	b.n	8000a42 <HAL_RCC_ClockConfig+0x66>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aac:	682b      	ldr	r3, [r5, #0]
 8000aae:	079b      	lsls	r3, r3, #30
 8000ab0:	d4d8      	bmi.n	8000a64 <HAL_RCC_ClockConfig+0x88>
 8000ab2:	e7c6      	b.n	8000a42 <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d10b      	bne.n	8000ad0 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ab8:	220c      	movs	r2, #12
 8000aba:	686b      	ldr	r3, [r5, #4]
 8000abc:	4013      	ands	r3, r2
 8000abe:	2b08      	cmp	r3, #8
 8000ac0:	d09a      	beq.n	80009f8 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ac2:	f7ff fbe9 	bl	8000298 <HAL_GetTick>
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <HAL_RCC_ClockConfig+0x154>)
 8000ac8:	1bc0      	subs	r0, r0, r7
 8000aca:	4298      	cmp	r0, r3
 8000acc:	d9f4      	bls.n	8000ab8 <HAL_RCC_ClockConfig+0xdc>
 8000ace:	e7df      	b.n	8000a90 <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	d011      	beq.n	8000af8 <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ad4:	220c      	movs	r2, #12
 8000ad6:	686b      	ldr	r3, [r5, #4]
 8000ad8:	4213      	tst	r3, r2
 8000ada:	d100      	bne.n	8000ade <HAL_RCC_ClockConfig+0x102>
 8000adc:	e78c      	b.n	80009f8 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ade:	f7ff fbdb 	bl	8000298 <HAL_GetTick>
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <HAL_RCC_ClockConfig+0x154>)
 8000ae4:	1bc0      	subs	r0, r0, r7
 8000ae6:	4298      	cmp	r0, r3
 8000ae8:	d9f4      	bls.n	8000ad4 <HAL_RCC_ClockConfig+0xf8>
 8000aea:	e7d1      	b.n	8000a90 <HAL_RCC_ClockConfig+0xb4>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aec:	f7ff fbd4 	bl	8000298 <HAL_GetTick>
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <HAL_RCC_ClockConfig+0x154>)
 8000af2:	1bc0      	subs	r0, r0, r7
 8000af4:	4298      	cmp	r0, r3
 8000af6:	d8cb      	bhi.n	8000a90 <HAL_RCC_ClockConfig+0xb4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8000af8:	220c      	movs	r2, #12
 8000afa:	686b      	ldr	r3, [r5, #4]
 8000afc:	4013      	ands	r3, r2
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d1f4      	bne.n	8000aec <HAL_RCC_ClockConfig+0x110>
 8000b02:	e779      	b.n	80009f8 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b04:	6822      	ldr	r2, [r4, #0]
 8000b06:	439a      	bics	r2, r3
 8000b08:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b0a:	6822      	ldr	r2, [r4, #0]
 8000b0c:	421a      	tst	r2, r3
 8000b0e:	d198      	bne.n	8000a42 <HAL_RCC_ClockConfig+0x66>
 8000b10:	e779      	b.n	8000a06 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000b12:	6863      	ldr	r3, [r4, #4]
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_RCC_ClockConfig+0x158>)
 8000b16:	4013      	ands	r3, r2
 8000b18:	68f2      	ldr	r2, [r6, #12]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	6063      	str	r3, [r4, #4]
 8000b1e:	e777      	b.n	8000a10 <HAL_RCC_ClockConfig+0x34>
 8000b20:	40022000 	.word	0x40022000
 8000b24:	40021000 	.word	0x40021000
 8000b28:	0800187c 	.word	0x0800187c
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	00001388 	.word	0x00001388
 8000b34:	fffff8ff 	.word	0xfffff8ff

08000b38 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000b38:	4b01      	ldr	r3, [pc, #4]	; (8000b40 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b3a:	6818      	ldr	r0, [r3, #0]
}
 8000b3c:	4770      	bx	lr
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	20000000 	.word	0x20000000

08000b44 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	055b      	lsls	r3, r3, #21
 8000b4c:	0f5b      	lsrs	r3, r3, #29
 8000b4e:	5cd3      	ldrb	r3, [r2, r3]
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000b52:	6810      	ldr	r0, [r2, #0]
 8000b54:	40d8      	lsrs	r0, r3
}    
 8000b56:	4770      	bx	lr
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	0800188c 	.word	0x0800188c
 8000b60:	20000000 	.word	0x20000000

08000b64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000b64:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000b66:	6803      	ldr	r3, [r0, #0]
{
 8000b68:	b085      	sub	sp, #20
 8000b6a:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	d528      	bpl.n	8000bc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b70:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000b72:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b74:	4c44      	ldr	r4, [pc, #272]	; (8000c88 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000b76:	0552      	lsls	r2, r2, #21
 8000b78:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000b7a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b7c:	4213      	tst	r3, r2
 8000b7e:	d108      	bne.n	8000b92 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000b80:	69e3      	ldr	r3, [r4, #28]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	61e3      	str	r3, [r4, #28]
 8000b86:	69e3      	ldr	r3, [r4, #28]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	9303      	str	r3, [sp, #12]
 8000b8c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b92:	2780      	movs	r7, #128	; 0x80
 8000b94:	4e3d      	ldr	r6, [pc, #244]	; (8000c8c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8000b96:	007f      	lsls	r7, r7, #1
 8000b98:	6833      	ldr	r3, [r6, #0]
 8000b9a:	423b      	tst	r3, r7
 8000b9c:	d041      	beq.n	8000c22 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000b9e:	22c0      	movs	r2, #192	; 0xc0
 8000ba0:	6a23      	ldr	r3, [r4, #32]
 8000ba2:	0092      	lsls	r2, r2, #2
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	4e3a      	ldr	r6, [pc, #232]	; (8000c90 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000ba8:	d14d      	bne.n	8000c46 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000baa:	6a23      	ldr	r3, [r4, #32]
 8000bac:	401e      	ands	r6, r3
 8000bae:	686b      	ldr	r3, [r5, #4]
 8000bb0:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000bb2:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000bb4:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d103      	bne.n	8000bc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bba:	69e3      	ldr	r3, [r4, #28]
 8000bbc:	4a35      	ldr	r2, [pc, #212]	; (8000c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000bc2:	682b      	ldr	r3, [r5, #0]
 8000bc4:	07da      	lsls	r2, r3, #31
 8000bc6:	d506      	bpl.n	8000bd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	492f      	ldr	r1, [pc, #188]	; (8000c88 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000bcc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000bce:	4382      	bics	r2, r0
 8000bd0:	68a8      	ldr	r0, [r5, #8]
 8000bd2:	4302      	orrs	r2, r0
 8000bd4:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000bd6:	079a      	lsls	r2, r3, #30
 8000bd8:	d506      	bpl.n	8000be8 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000bda:	492b      	ldr	r1, [pc, #172]	; (8000c88 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000bdc:	482e      	ldr	r0, [pc, #184]	; (8000c98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8000bde:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000be0:	4002      	ands	r2, r0
 8000be2:	68e8      	ldr	r0, [r5, #12]
 8000be4:	4302      	orrs	r2, r0
 8000be6:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000be8:	035a      	lsls	r2, r3, #13
 8000bea:	d506      	bpl.n	8000bfa <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000bec:	4926      	ldr	r1, [pc, #152]	; (8000c88 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000bee:	482b      	ldr	r0, [pc, #172]	; (8000c9c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8000bf0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000bf2:	4002      	ands	r2, r0
 8000bf4:	6928      	ldr	r0, [r5, #16]
 8000bf6:	4302      	orrs	r2, r0
 8000bf8:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000bfa:	069a      	lsls	r2, r3, #26
 8000bfc:	d506      	bpl.n	8000c0c <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000bfe:	2010      	movs	r0, #16
 8000c00:	4921      	ldr	r1, [pc, #132]	; (8000c88 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000c02:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000c04:	4382      	bics	r2, r0
 8000c06:	6968      	ldr	r0, [r5, #20]
 8000c08:	4302      	orrs	r2, r0
 8000c0a:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000c0c:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8000c0e:	055b      	lsls	r3, r3, #21
 8000c10:	d517      	bpl.n	8000c42 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8000c12:	2140      	movs	r1, #64	; 0x40
 8000c14:	4a1c      	ldr	r2, [pc, #112]	; (8000c88 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000c16:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c18:	438b      	bics	r3, r1
 8000c1a:	69a9      	ldr	r1, [r5, #24]
 8000c1c:	430b      	orrs	r3, r1
 8000c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c20:	e00f      	b.n	8000c42 <HAL_RCCEx_PeriphCLKConfig+0xde>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c22:	6833      	ldr	r3, [r6, #0]
 8000c24:	433b      	orrs	r3, r7
 8000c26:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c28:	f7ff fb36 	bl	8000298 <HAL_GetTick>
 8000c2c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c2e:	6833      	ldr	r3, [r6, #0]
 8000c30:	423b      	tst	r3, r7
 8000c32:	d1b4      	bne.n	8000b9e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c34:	f7ff fb30 	bl	8000298 <HAL_GetTick>
 8000c38:	9b01      	ldr	r3, [sp, #4]
 8000c3a:	1ac0      	subs	r0, r0, r3
 8000c3c:	2864      	cmp	r0, #100	; 0x64
 8000c3e:	d9f6      	bls.n	8000c2e <HAL_RCCEx_PeriphCLKConfig+0xca>
          return HAL_TIMEOUT;
 8000c40:	2003      	movs	r0, #3
}
 8000c42:	b005      	add	sp, #20
 8000c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c46:	6869      	ldr	r1, [r5, #4]
 8000c48:	400a      	ands	r2, r1
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d0ad      	beq.n	8000baa <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c4e:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c50:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c52:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c54:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c56:	025b      	lsls	r3, r3, #9
 8000c58:	4303      	orrs	r3, r0
 8000c5a:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c5c:	6a23      	ldr	r3, [r4, #32]
 8000c5e:	4810      	ldr	r0, [pc, #64]	; (8000ca0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c60:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c62:	4003      	ands	r3, r0
 8000c64:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000c66:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000c68:	07d3      	lsls	r3, r2, #31
 8000c6a:	d59e      	bpl.n	8000baa <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000c6c:	f7ff fb14 	bl	8000298 <HAL_GetTick>
 8000c70:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c72:	2202      	movs	r2, #2
 8000c74:	6a23      	ldr	r3, [r4, #32]
 8000c76:	4213      	tst	r3, r2
 8000c78:	d197      	bne.n	8000baa <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c7a:	f7ff fb0d 	bl	8000298 <HAL_GetTick>
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8000c80:	1bc0      	subs	r0, r0, r7
 8000c82:	4298      	cmp	r0, r3
 8000c84:	d9f5      	bls.n	8000c72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8000c86:	e7db      	b.n	8000c40 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40007000 	.word	0x40007000
 8000c90:	fffffcff 	.word	0xfffffcff
 8000c94:	efffffff 	.word	0xefffffff
 8000c98:	fffcffff 	.word	0xfffcffff
 8000c9c:	fff3ffff 	.word	0xfff3ffff
 8000ca0:	fffeffff 	.word	0xfffeffff
 8000ca4:	00001388 	.word	0x00001388

08000ca8 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	6803      	ldr	r3, [r0, #0]
 8000cac:	68d9      	ldr	r1, [r3, #12]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8000cae:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000cb0:	4311      	orrs	r1, r2
 8000cb2:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000cb4:	6819      	ldr	r1, [r3, #0]
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]
}
 8000cba:	4770      	bx	lr

08000cbc <HAL_TIM_OC_DelayElapsedCallback>:
 8000cbc:	4770      	bx	lr

08000cbe <HAL_TIM_IC_CaptureCallback>:
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000cc0:	4770      	bx	lr

08000cc2 <HAL_TIM_TriggerCallback>:
 8000cc2:	4770      	bx	lr

08000cc4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	6803      	ldr	r3, [r0, #0]
{
 8000cc8:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000cca:	6919      	ldr	r1, [r3, #16]
{
 8000ccc:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000cce:	4211      	tst	r1, r2
 8000cd0:	d00e      	beq.n	8000cf0 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000cd2:	68d9      	ldr	r1, [r3, #12]
 8000cd4:	4211      	tst	r1, r2
 8000cd6:	d00b      	beq.n	8000cf0 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000cd8:	3a05      	subs	r2, #5
 8000cda:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000cdc:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000cde:	3204      	adds	r2, #4
 8000ce0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ce2:	079b      	lsls	r3, r3, #30
 8000ce4:	d100      	bne.n	8000ce8 <HAL_TIM_IRQHandler+0x24>
 8000ce6:	e079      	b.n	8000ddc <HAL_TIM_IRQHandler+0x118>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000ce8:	f7ff ffe9 	bl	8000cbe <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000cec:	2300      	movs	r3, #0
 8000cee:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000cf0:	2204      	movs	r2, #4
 8000cf2:	6823      	ldr	r3, [r4, #0]
 8000cf4:	6919      	ldr	r1, [r3, #16]
 8000cf6:	4211      	tst	r1, r2
 8000cf8:	d010      	beq.n	8000d1c <HAL_TIM_IRQHandler+0x58>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000cfa:	68d9      	ldr	r1, [r3, #12]
 8000cfc:	4211      	tst	r1, r2
 8000cfe:	d00d      	beq.n	8000d1c <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000d00:	3a09      	subs	r2, #9
 8000d02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d04:	3207      	adds	r2, #7
 8000d06:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d08:	699a      	ldr	r2, [r3, #24]
 8000d0a:	23c0      	movs	r3, #192	; 0xc0
 8000d0c:	009b      	lsls	r3, r3, #2
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000d0e:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d10:	421a      	tst	r2, r3
 8000d12:	d069      	beq.n	8000de8 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d14:	f7ff ffd3 	bl	8000cbe <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000d1c:	2208      	movs	r2, #8
 8000d1e:	6823      	ldr	r3, [r4, #0]
 8000d20:	6919      	ldr	r1, [r3, #16]
 8000d22:	4211      	tst	r1, r2
 8000d24:	d00e      	beq.n	8000d44 <HAL_TIM_IRQHandler+0x80>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000d26:	68d9      	ldr	r1, [r3, #12]
 8000d28:	4211      	tst	r1, r2
 8000d2a:	d00b      	beq.n	8000d44 <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000d2c:	3a11      	subs	r2, #17
 8000d2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d30:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d32:	320d      	adds	r2, #13
 8000d34:	7722      	strb	r2, [r4, #28]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000d36:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d38:	079b      	lsls	r3, r3, #30
 8000d3a:	d05b      	beq.n	8000df4 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d3c:	f7ff ffbf 	bl	8000cbe <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d40:	2300      	movs	r3, #0
 8000d42:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000d44:	2210      	movs	r2, #16
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	6919      	ldr	r1, [r3, #16]
 8000d4a:	4211      	tst	r1, r2
 8000d4c:	d010      	beq.n	8000d70 <HAL_TIM_IRQHandler+0xac>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000d4e:	68d9      	ldr	r1, [r3, #12]
 8000d50:	4211      	tst	r1, r2
 8000d52:	d00d      	beq.n	8000d70 <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000d54:	3a21      	subs	r2, #33	; 0x21
 8000d56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d58:	3219      	adds	r2, #25
 8000d5a:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d5c:	69da      	ldr	r2, [r3, #28]
 8000d5e:	23c0      	movs	r3, #192	; 0xc0
 8000d60:	009b      	lsls	r3, r3, #2
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000d62:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d64:	421a      	tst	r2, r3
 8000d66:	d04b      	beq.n	8000e00 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d68:	f7ff ffa9 	bl	8000cbe <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000d70:	2201      	movs	r2, #1
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	6919      	ldr	r1, [r3, #16]
 8000d76:	4211      	tst	r1, r2
 8000d78:	d007      	beq.n	8000d8a <HAL_TIM_IRQHandler+0xc6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000d7a:	68d9      	ldr	r1, [r3, #12]
 8000d7c:	4211      	tst	r1, r2
 8000d7e:	d004      	beq.n	8000d8a <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000d80:	3a03      	subs	r2, #3
 8000d82:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000d84:	0020      	movs	r0, r4
 8000d86:	f000 fb85 	bl	8001494 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000d8a:	2280      	movs	r2, #128	; 0x80
 8000d8c:	6823      	ldr	r3, [r4, #0]
 8000d8e:	6919      	ldr	r1, [r3, #16]
 8000d90:	4211      	tst	r1, r2
 8000d92:	d008      	beq.n	8000da6 <HAL_TIM_IRQHandler+0xe2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000d94:	68d9      	ldr	r1, [r3, #12]
 8000d96:	4211      	tst	r1, r2
 8000d98:	d005      	beq.n	8000da6 <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000d9a:	3a02      	subs	r2, #2
 8000d9c:	3aff      	subs	r2, #255	; 0xff
 8000d9e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000da0:	0020      	movs	r0, r4
 8000da2:	f000 f981 	bl	80010a8 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000da6:	2240      	movs	r2, #64	; 0x40
 8000da8:	6823      	ldr	r3, [r4, #0]
 8000daa:	6919      	ldr	r1, [r3, #16]
 8000dac:	4211      	tst	r1, r2
 8000dae:	d007      	beq.n	8000dc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000db0:	68d9      	ldr	r1, [r3, #12]
 8000db2:	4211      	tst	r1, r2
 8000db4:	d004      	beq.n	8000dc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000db6:	3a81      	subs	r2, #129	; 0x81
 8000db8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000dba:	0020      	movs	r0, r4
 8000dbc:	f7ff ff81 	bl	8000cc2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	6823      	ldr	r3, [r4, #0]
 8000dc4:	6919      	ldr	r1, [r3, #16]
 8000dc6:	4211      	tst	r1, r2
 8000dc8:	d007      	beq.n	8000dda <HAL_TIM_IRQHandler+0x116>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000dca:	68d9      	ldr	r1, [r3, #12]
 8000dcc:	4211      	tst	r1, r2
 8000dce:	d004      	beq.n	8000dda <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000dd0:	3a41      	subs	r2, #65	; 0x41
 8000dd2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000dd4:	0020      	movs	r0, r4
 8000dd6:	f000 f966 	bl	80010a6 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8000dda:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ddc:	f7ff ff6e 	bl	8000cbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000de0:	0020      	movs	r0, r4
 8000de2:	f7ff ff6d 	bl	8000cc0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000de6:	e781      	b.n	8000cec <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000de8:	f7ff ff68 	bl	8000cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000dec:	0020      	movs	r0, r4
 8000dee:	f7ff ff67 	bl	8000cc0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000df2:	e791      	b.n	8000d18 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000df4:	f7ff ff62 	bl	8000cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000df8:	0020      	movs	r0, r4
 8000dfa:	f7ff ff61 	bl	8000cc0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000dfe:	e79f      	b.n	8000d40 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e00:	f7ff ff5c 	bl	8000cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e04:	0020      	movs	r0, r4
 8000e06:	f7ff ff5b 	bl	8000cc0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e0a:	e7af      	b.n	8000d6c <HAL_TIM_IRQHandler+0xa8>

08000e0c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e0c:	4a20      	ldr	r2, [pc, #128]	; (8000e90 <TIM_Base_SetConfig+0x84>)
{
 8000e0e:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8000e10:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e12:	4290      	cmp	r0, r2
 8000e14:	d006      	beq.n	8000e24 <TIM_Base_SetConfig+0x18>
 8000e16:	2480      	movs	r4, #128	; 0x80
 8000e18:	05e4      	lsls	r4, r4, #23
 8000e1a:	42a0      	cmp	r0, r4
 8000e1c:	d002      	beq.n	8000e24 <TIM_Base_SetConfig+0x18>
 8000e1e:	4c1d      	ldr	r4, [pc, #116]	; (8000e94 <TIM_Base_SetConfig+0x88>)
 8000e20:	42a0      	cmp	r0, r4
 8000e22:	d10c      	bne.n	8000e3e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e24:	2470      	movs	r4, #112	; 0x70
 8000e26:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8000e28:	684c      	ldr	r4, [r1, #4]
 8000e2a:	4323      	orrs	r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e2c:	4290      	cmp	r0, r2
 8000e2e:	d012      	beq.n	8000e56 <TIM_Base_SetConfig+0x4a>
 8000e30:	2480      	movs	r4, #128	; 0x80
 8000e32:	05e4      	lsls	r4, r4, #23
 8000e34:	42a0      	cmp	r0, r4
 8000e36:	d00e      	beq.n	8000e56 <TIM_Base_SetConfig+0x4a>
 8000e38:	4c16      	ldr	r4, [pc, #88]	; (8000e94 <TIM_Base_SetConfig+0x88>)
 8000e3a:	42a0      	cmp	r0, r4
 8000e3c:	d00b      	beq.n	8000e56 <TIM_Base_SetConfig+0x4a>
 8000e3e:	4c16      	ldr	r4, [pc, #88]	; (8000e98 <TIM_Base_SetConfig+0x8c>)
 8000e40:	42a0      	cmp	r0, r4
 8000e42:	d008      	beq.n	8000e56 <TIM_Base_SetConfig+0x4a>
 8000e44:	4c15      	ldr	r4, [pc, #84]	; (8000e9c <TIM_Base_SetConfig+0x90>)
 8000e46:	42a0      	cmp	r0, r4
 8000e48:	d005      	beq.n	8000e56 <TIM_Base_SetConfig+0x4a>
 8000e4a:	4c15      	ldr	r4, [pc, #84]	; (8000ea0 <TIM_Base_SetConfig+0x94>)
 8000e4c:	42a0      	cmp	r0, r4
 8000e4e:	d002      	beq.n	8000e56 <TIM_Base_SetConfig+0x4a>
 8000e50:	4c14      	ldr	r4, [pc, #80]	; (8000ea4 <TIM_Base_SetConfig+0x98>)
 8000e52:	42a0      	cmp	r0, r4
 8000e54:	d103      	bne.n	8000e5e <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000e56:	4c14      	ldr	r4, [pc, #80]	; (8000ea8 <TIM_Base_SetConfig+0x9c>)
 8000e58:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e5a:	68cc      	ldr	r4, [r1, #12]
 8000e5c:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000e5e:	2480      	movs	r4, #128	; 0x80
 8000e60:	43a3      	bics	r3, r4
 8000e62:	694c      	ldr	r4, [r1, #20]
 8000e64:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8000e66:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000e68:	688b      	ldr	r3, [r1, #8]
 8000e6a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000e6c:	680b      	ldr	r3, [r1, #0]
 8000e6e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000e70:	4290      	cmp	r0, r2
 8000e72:	d008      	beq.n	8000e86 <TIM_Base_SetConfig+0x7a>
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <TIM_Base_SetConfig+0x90>)
 8000e76:	4298      	cmp	r0, r3
 8000e78:	d005      	beq.n	8000e86 <TIM_Base_SetConfig+0x7a>
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <TIM_Base_SetConfig+0x94>)
 8000e7c:	4298      	cmp	r0, r3
 8000e7e:	d002      	beq.n	8000e86 <TIM_Base_SetConfig+0x7a>
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <TIM_Base_SetConfig+0x98>)
 8000e82:	4298      	cmp	r0, r3
 8000e84:	d101      	bne.n	8000e8a <TIM_Base_SetConfig+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000e86:	690b      	ldr	r3, [r1, #16]
 8000e88:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	6143      	str	r3, [r0, #20]
}
 8000e8e:	bd10      	pop	{r4, pc}
 8000e90:	40012c00 	.word	0x40012c00
 8000e94:	40000400 	.word	0x40000400
 8000e98:	40002000 	.word	0x40002000
 8000e9c:	40014000 	.word	0x40014000
 8000ea0:	40014400 	.word	0x40014400
 8000ea4:	40014800 	.word	0x40014800
 8000ea8:	fffffcff 	.word	0xfffffcff

08000eac <HAL_TIM_Base_Init>:
{
 8000eac:	b570      	push	{r4, r5, r6, lr}
 8000eae:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000eb0:	2001      	movs	r0, #1
  if(htim == NULL)
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d014      	beq.n	8000ee0 <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000eb6:	0025      	movs	r5, r4
 8000eb8:	353d      	adds	r5, #61	; 0x3d
 8000eba:	782b      	ldrb	r3, [r5, #0]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d105      	bne.n	8000ece <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8000ec2:	0022      	movs	r2, r4
 8000ec4:	323c      	adds	r2, #60	; 0x3c
 8000ec6:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8000ec8:	0020      	movs	r0, r4
 8000eca:	f000 fbe3 	bl	8001694 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000ece:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000ed0:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000ed2:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000ed4:	1d21      	adds	r1, r4, #4
 8000ed6:	f7ff ff99 	bl	8000e0c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000eda:	2301      	movs	r3, #1
  return HAL_OK;
 8000edc:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000ede:	702b      	strb	r3, [r5, #0]
}
 8000ee0:	bd70      	pop	{r4, r5, r6, pc}
	...

08000ee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000ee4:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000ee6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000ee8:	4d03      	ldr	r5, [pc, #12]	; (8000ef8 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000eea:	430a      	orrs	r2, r1
 8000eec:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000eee:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000ef4:	6083      	str	r3, [r0, #8]
}
 8000ef6:	bd30      	pop	{r4, r5, pc}
 8000ef8:	ffff00ff 	.word	0xffff00ff

08000efc <HAL_TIM_ConfigClockSource>:
{
 8000efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8000efe:	0005      	movs	r5, r0
 8000f00:	2302      	movs	r3, #2
 8000f02:	353c      	adds	r5, #60	; 0x3c
 8000f04:	782a      	ldrb	r2, [r5, #0]
{
 8000f06:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8000f08:	0018      	movs	r0, r3
 8000f0a:	2a01      	cmp	r2, #1
 8000f0c:	d019      	beq.n	8000f42 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8000f0e:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8000f10:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8000f12:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000f14:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8000f16:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000f18:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8000f1a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f1c:	4a4f      	ldr	r2, [pc, #316]	; (800105c <HAL_TIM_ConfigClockSource+0x160>)
 8000f1e:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8000f20:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8000f22:	680b      	ldr	r3, [r1, #0]
 8000f24:	2b40      	cmp	r3, #64	; 0x40
 8000f26:	d100      	bne.n	8000f2a <HAL_TIM_ConfigClockSource+0x2e>
 8000f28:	e06f      	b.n	800100a <HAL_TIM_ConfigClockSource+0x10e>
 8000f2a:	d816      	bhi.n	8000f5a <HAL_TIM_ConfigClockSource+0x5e>
 8000f2c:	2b10      	cmp	r3, #16
 8000f2e:	d100      	bne.n	8000f32 <HAL_TIM_ConfigClockSource+0x36>
 8000f30:	e087      	b.n	8001042 <HAL_TIM_ConfigClockSource+0x146>
 8000f32:	d807      	bhi.n	8000f44 <HAL_TIM_ConfigClockSource+0x48>
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d100      	bne.n	8000f3a <HAL_TIM_ConfigClockSource+0x3e>
 8000f38:	e07d      	b.n	8001036 <HAL_TIM_ConfigClockSource+0x13a>
  htim->State = HAL_TIM_STATE_READY;
 8000f3a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000f3c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000f3e:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8000f40:	7028      	strb	r0, [r5, #0]
}
 8000f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8000f44:	2b20      	cmp	r3, #32
 8000f46:	d100      	bne.n	8000f4a <HAL_TIM_ConfigClockSource+0x4e>
 8000f48:	e081      	b.n	800104e <HAL_TIM_ConfigClockSource+0x152>
 8000f4a:	2b30      	cmp	r3, #48	; 0x30
 8000f4c:	d1f5      	bne.n	8000f3a <HAL_TIM_ConfigClockSource+0x3e>
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f4e:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000f50:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f52:	4393      	bics	r3, r2
 8000f54:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f56:	2337      	movs	r3, #55	; 0x37
 8000f58:	e055      	b.n	8001006 <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 8000f5a:	2b70      	cmp	r3, #112	; 0x70
 8000f5c:	d033      	beq.n	8000fc6 <HAL_TIM_ConfigClockSource+0xca>
 8000f5e:	d81b      	bhi.n	8000f98 <HAL_TIM_ConfigClockSource+0x9c>
 8000f60:	2b50      	cmp	r3, #80	; 0x50
 8000f62:	d03b      	beq.n	8000fdc <HAL_TIM_ConfigClockSource+0xe0>
 8000f64:	2b60      	cmp	r3, #96	; 0x60
 8000f66:	d1e8      	bne.n	8000f3a <HAL_TIM_ConfigClockSource+0x3e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f68:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000f6a:	684b      	ldr	r3, [r1, #4]
 8000f6c:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f6e:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000f70:	4f3b      	ldr	r7, [pc, #236]	; (8001060 <HAL_TIM_ConfigClockSource+0x164>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f72:	43a1      	bics	r1, r4
 8000f74:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f76:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000f78:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000f7a:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000f7c:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000f7e:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8000f80:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8000f82:	6182      	str	r2, [r0, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f84:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000f86:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 8000f8c:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8000f8e:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f90:	4393      	bics	r3, r2
 8000f92:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f94:	2367      	movs	r3, #103	; 0x67
 8000f96:	e036      	b.n	8001006 <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	0152      	lsls	r2, r2, #5
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d00d      	beq.n	8000fbc <HAL_TIM_ConfigClockSource+0xc0>
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	0192      	lsls	r2, r2, #6
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d1c8      	bne.n	8000f3a <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 8000fa8:	68cb      	ldr	r3, [r1, #12]
 8000faa:	684a      	ldr	r2, [r1, #4]
 8000fac:	6889      	ldr	r1, [r1, #8]
 8000fae:	f7ff ff99 	bl	8000ee4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	6822      	ldr	r2, [r4, #0]
 8000fb6:	01db      	lsls	r3, r3, #7
 8000fb8:	6891      	ldr	r1, [r2, #8]
 8000fba:	e00c      	b.n	8000fd6 <HAL_TIM_ConfigClockSource+0xda>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	6883      	ldr	r3, [r0, #8]
 8000fc0:	4393      	bics	r3, r2
   TIMx->SMCR = tmpsmcr;
 8000fc2:	6083      	str	r3, [r0, #8]
 8000fc4:	e7b9      	b.n	8000f3a <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 8000fc6:	68cb      	ldr	r3, [r1, #12]
 8000fc8:	684a      	ldr	r2, [r1, #4]
 8000fca:	6889      	ldr	r1, [r1, #8]
 8000fcc:	f7ff ff8a 	bl	8000ee4 <TIM_ETR_SetConfig>
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8000fd0:	2177      	movs	r1, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8000fd2:	6822      	ldr	r2, [r4, #0]
 8000fd4:	6893      	ldr	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000fd6:	430b      	orrs	r3, r1
 8000fd8:	6093      	str	r3, [r2, #8]
    break;
 8000fda:	e7ae      	b.n	8000f3a <HAL_TIM_ConfigClockSource+0x3e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000fdc:	684a      	ldr	r2, [r1, #4]
 8000fde:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8000fe0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000fe2:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000fe4:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000fe6:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000fe8:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000fea:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000fec:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000fee:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000ff0:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000ff2:	240a      	movs	r4, #10
 8000ff4:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8000ff6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8000ff8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000ffa:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ffc:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000ffe:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001000:	4393      	bics	r3, r2
 8001002:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001004:	2357      	movs	r3, #87	; 0x57
 8001006:	4313      	orrs	r3, r2
 8001008:	e7db      	b.n	8000fc2 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800100a:	684a      	ldr	r2, [r1, #4]
 800100c:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 800100e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001010:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001012:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001014:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001016:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001018:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800101a:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800101c:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800101e:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001020:	240a      	movs	r4, #10
 8001022:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001024:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001026:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001028:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 800102a:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 800102c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800102e:	4393      	bics	r3, r2
 8001030:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001032:	2347      	movs	r3, #71	; 0x47
 8001034:	e7e7      	b.n	8001006 <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001036:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001038:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800103a:	4393      	bics	r3, r2
 800103c:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800103e:	2307      	movs	r3, #7
 8001040:	e7e1      	b.n	8001006 <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001042:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001044:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001046:	4393      	bics	r3, r2
 8001048:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800104a:	2317      	movs	r3, #23
 800104c:	e7db      	b.n	8001006 <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 800104e:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001050:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001052:	4393      	bics	r3, r2
 8001054:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001056:	2327      	movs	r3, #39	; 0x27
 8001058:	e7d5      	b.n	8001006 <HAL_TIM_ConfigClockSource+0x10a>
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	ffff0088 	.word	0xffff0088
 8001060:	ffff0fff 	.word	0xffff0fff

08001064 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001064:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001066:	0004      	movs	r4, r0
 8001068:	343c      	adds	r4, #60	; 0x3c
 800106a:	7822      	ldrb	r2, [r4, #0]
{
 800106c:	0003      	movs	r3, r0
 800106e:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001070:	2a01      	cmp	r2, #1
 8001072:	d017      	beq.n	80010a4 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001074:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001076:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001078:	353d      	adds	r5, #61	; 0x3d
 800107a:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	306e      	adds	r0, #110	; 0x6e
 8001080:	4382      	bics	r2, r0
 8001082:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001088:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800108a:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800108c:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800108e:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	4382      	bics	r2, r0
 8001094:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001096:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001098:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800109a:	430a      	orrs	r2, r1
 800109c:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800109e:	2301      	movs	r3, #1
 80010a0:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80010a2:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80010a4:	bd30      	pop	{r4, r5, pc}

080010a6 <HAL_TIMEx_CommutationCallback>:
 80010a6:	4770      	bx	lr

080010a8 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80010a8:	4770      	bx	lr
	...

080010ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80010ac:	b570      	push	{r4, r5, r6, lr}
 80010ae:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80010b0:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80010b2:	69c3      	ldr	r3, [r0, #28]
 80010b4:	6882      	ldr	r2, [r0, #8]
 80010b6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80010b8:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80010ba:	4302      	orrs	r2, r0
 80010bc:	6960      	ldr	r0, [r4, #20]
 80010be:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80010c0:	485c      	ldr	r0, [pc, #368]	; (8001234 <UART_SetConfig+0x188>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80010c2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80010c4:	4001      	ands	r1, r0
 80010c6:	430a      	orrs	r2, r1
 80010c8:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010ca:	686a      	ldr	r2, [r5, #4]
 80010cc:	495a      	ldr	r1, [pc, #360]	; (8001238 <UART_SetConfig+0x18c>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80010ce:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010d0:	400a      	ands	r2, r1
 80010d2:	68e1      	ldr	r1, [r4, #12]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80010d8:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80010da:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80010dc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80010de:	4857      	ldr	r0, [pc, #348]	; (800123c <UART_SetConfig+0x190>)
 80010e0:	4001      	ands	r1, r0
 80010e2:	430a      	orrs	r2, r1
 80010e4:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010e6:	4a56      	ldr	r2, [pc, #344]	; (8001240 <UART_SetConfig+0x194>)
 80010e8:	4295      	cmp	r5, r2
 80010ea:	d112      	bne.n	8001112 <UART_SetConfig+0x66>
 80010ec:	2103      	movs	r1, #3
 80010ee:	4a55      	ldr	r2, [pc, #340]	; (8001244 <UART_SetConfig+0x198>)
 80010f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80010f2:	400a      	ands	r2, r1
 80010f4:	4954      	ldr	r1, [pc, #336]	; (8001248 <UART_SetConfig+0x19c>)
 80010f6:	5c88      	ldrb	r0, [r1, r2]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	0212      	lsls	r2, r2, #8
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d05c      	beq.n	80011ba <UART_SetConfig+0x10e>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8001100:	2808      	cmp	r0, #8
 8001102:	d81a      	bhi.n	800113a <UART_SetConfig+0x8e>
 8001104:	f7ff f808 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001108:	19261978 	.word	0x19261978
 800110c:	1919197d 	.word	0x1919197d
 8001110:	80          	.byte	0x80
 8001111:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001112:	4a4e      	ldr	r2, [pc, #312]	; (800124c <UART_SetConfig+0x1a0>)
 8001114:	4295      	cmp	r5, r2
 8001116:	d127      	bne.n	8001168 <UART_SetConfig+0xbc>
 8001118:	21c0      	movs	r1, #192	; 0xc0
 800111a:	2080      	movs	r0, #128	; 0x80
 800111c:	4a49      	ldr	r2, [pc, #292]	; (8001244 <UART_SetConfig+0x198>)
 800111e:	0289      	lsls	r1, r1, #10
 8001120:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001122:	0240      	lsls	r0, r0, #9
 8001124:	400a      	ands	r2, r1
 8001126:	4282      	cmp	r2, r0
 8001128:	d100      	bne.n	800112c <UART_SetConfig+0x80>
 800112a:	e072      	b.n	8001212 <UART_SetConfig+0x166>
 800112c:	d807      	bhi.n	800113e <UART_SetConfig+0x92>
 800112e:	2a00      	cmp	r2, #0
 8001130:	d039      	beq.n	80011a6 <UART_SetConfig+0xfa>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001132:	2280      	movs	r2, #128	; 0x80
 8001134:	0212      	lsls	r2, r2, #8
 8001136:	4293      	cmp	r3, r2
 8001138:	d05b      	beq.n	80011f2 <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800113a:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 800113c:	e058      	b.n	80011f0 <UART_SetConfig+0x144>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800113e:	2080      	movs	r0, #128	; 0x80
 8001140:	0280      	lsls	r0, r0, #10
 8001142:	4282      	cmp	r2, r0
 8001144:	d100      	bne.n	8001148 <UART_SetConfig+0x9c>
 8001146:	e06b      	b.n	8001220 <UART_SetConfig+0x174>
 8001148:	428a      	cmp	r2, r1
 800114a:	d1f2      	bne.n	8001132 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800114c:	2280      	movs	r2, #128	; 0x80
 800114e:	0212      	lsls	r2, r2, #8
 8001150:	4293      	cmp	r3, r2
 8001152:	d03b      	beq.n	80011cc <UART_SetConfig+0x120>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001154:	6861      	ldr	r1, [r4, #4]
 8001156:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <UART_SetConfig+0x1a4>)
 8001158:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800115a:	18c0      	adds	r0, r0, r3
 800115c:	f7fe ffe6 	bl	800012c <__udivsi3>
 8001160:	b280      	uxth	r0, r0
 8001162:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001164:	2000      	movs	r0, #0
        break;
 8001166:	e043      	b.n	80011f0 <UART_SetConfig+0x144>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001168:	4a3a      	ldr	r2, [pc, #232]	; (8001254 <UART_SetConfig+0x1a8>)
 800116a:	4295      	cmp	r5, r2
 800116c:	d10c      	bne.n	8001188 <UART_SetConfig+0xdc>
 800116e:	21c0      	movs	r1, #192	; 0xc0
 8001170:	2080      	movs	r0, #128	; 0x80
 8001172:	4a34      	ldr	r2, [pc, #208]	; (8001244 <UART_SetConfig+0x198>)
 8001174:	0309      	lsls	r1, r1, #12
 8001176:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001178:	02c0      	lsls	r0, r0, #11
 800117a:	400a      	ands	r2, r1
 800117c:	4282      	cmp	r2, r0
 800117e:	d048      	beq.n	8001212 <UART_SetConfig+0x166>
 8001180:	d9d5      	bls.n	800112e <UART_SetConfig+0x82>
 8001182:	2080      	movs	r0, #128	; 0x80
 8001184:	0300      	lsls	r0, r0, #12
 8001186:	e7dc      	b.n	8001142 <UART_SetConfig+0x96>
 8001188:	4a33      	ldr	r2, [pc, #204]	; (8001258 <UART_SetConfig+0x1ac>)
 800118a:	4295      	cmp	r5, r2
 800118c:	d00b      	beq.n	80011a6 <UART_SetConfig+0xfa>
 800118e:	4a33      	ldr	r2, [pc, #204]	; (800125c <UART_SetConfig+0x1b0>)
 8001190:	4295      	cmp	r5, r2
 8001192:	d008      	beq.n	80011a6 <UART_SetConfig+0xfa>
 8001194:	4a32      	ldr	r2, [pc, #200]	; (8001260 <UART_SetConfig+0x1b4>)
 8001196:	4295      	cmp	r5, r2
 8001198:	d005      	beq.n	80011a6 <UART_SetConfig+0xfa>
 800119a:	4a32      	ldr	r2, [pc, #200]	; (8001264 <UART_SetConfig+0x1b8>)
 800119c:	4295      	cmp	r5, r2
 800119e:	d002      	beq.n	80011a6 <UART_SetConfig+0xfa>
 80011a0:	4a31      	ldr	r2, [pc, #196]	; (8001268 <UART_SetConfig+0x1bc>)
 80011a2:	4295      	cmp	r5, r2
 80011a4:	d1c5      	bne.n	8001132 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	0212      	lsls	r2, r2, #8
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d124      	bne.n	80011f8 <UART_SetConfig+0x14c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80011ae:	f7ff fcc9 	bl	8000b44 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80011b2:	6863      	ldr	r3, [r4, #4]
 80011b4:	0040      	lsls	r0, r0, #1
 80011b6:	085b      	lsrs	r3, r3, #1
 80011b8:	e00b      	b.n	80011d2 <UART_SetConfig+0x126>
    switch (clocksource)
 80011ba:	2808      	cmp	r0, #8
 80011bc:	d819      	bhi.n	80011f2 <UART_SetConfig+0x146>
 80011be:	f7fe ffa1 	bl	8000104 <__gnu_thumb1_case_sqi>
 80011c2:	18f6      	.short	0x18f6
 80011c4:	182c1805 	.word	0x182c1805
 80011c8:	1818      	.short	0x1818
 80011ca:	33          	.byte	0x33
 80011cb:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80011cc:	6863      	ldr	r3, [r4, #4]
 80011ce:	0858      	lsrs	r0, r3, #1
 80011d0:	4b26      	ldr	r3, [pc, #152]	; (800126c <UART_SetConfig+0x1c0>)
 80011d2:	18c0      	adds	r0, r0, r3
 80011d4:	6861      	ldr	r1, [r4, #4]
 80011d6:	f7fe ffa9 	bl	800012c <__udivsi3>
 80011da:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80011dc:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80011de:	220f      	movs	r2, #15
 80011e0:	0019      	movs	r1, r3
 80011e2:	4391      	bics	r1, r2
 80011e4:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80011e6:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 80011e8:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80011ea:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80011ec:	4313      	orrs	r3, r2
 80011ee:	60cb      	str	r3, [r1, #12]

}
 80011f0:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 80011f2:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e7f2      	b.n	80011de <UART_SetConfig+0x132>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80011f8:	f7ff fca4 	bl	8000b44 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80011fc:	6861      	ldr	r1, [r4, #4]
 80011fe:	084b      	lsrs	r3, r1, #1
 8001200:	e7ab      	b.n	800115a <UART_SetConfig+0xae>
 8001202:	f7ff fbaf 	bl	8000964 <HAL_RCC_GetSysClockFreq>
 8001206:	e7f9      	b.n	80011fc <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	6861      	ldr	r1, [r4, #4]
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	0848      	lsrs	r0, r1, #1
 8001210:	e7a3      	b.n	800115a <UART_SetConfig+0xae>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001212:	2280      	movs	r2, #128	; 0x80
 8001214:	0212      	lsls	r2, r2, #8
 8001216:	4293      	cmp	r3, r2
 8001218:	d1f3      	bne.n	8001202 <UART_SetConfig+0x156>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800121a:	f7ff fba3 	bl	8000964 <HAL_RCC_GetSysClockFreq>
 800121e:	e7c8      	b.n	80011b2 <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	0212      	lsls	r2, r2, #8
 8001224:	4293      	cmp	r3, r2
 8001226:	d1ef      	bne.n	8001208 <UART_SetConfig+0x15c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001228:	6863      	ldr	r3, [r4, #4]
 800122a:	0858      	lsrs	r0, r3, #1
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	025b      	lsls	r3, r3, #9
 8001230:	e7cf      	b.n	80011d2 <UART_SetConfig+0x126>
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	efff69f3 	.word	0xefff69f3
 8001238:	ffffcfff 	.word	0xffffcfff
 800123c:	fffff4ff 	.word	0xfffff4ff
 8001240:	40013800 	.word	0x40013800
 8001244:	40021000 	.word	0x40021000
 8001248:	08001878 	.word	0x08001878
 800124c:	40004400 	.word	0x40004400
 8001250:	007a1200 	.word	0x007a1200
 8001254:	40004800 	.word	0x40004800
 8001258:	40004c00 	.word	0x40004c00
 800125c:	40005000 	.word	0x40005000
 8001260:	40011400 	.word	0x40011400
 8001264:	40011800 	.word	0x40011800
 8001268:	40011c00 	.word	0x40011c00
 800126c:	00f42400 	.word	0x00f42400

08001270 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001270:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001272:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001274:	07da      	lsls	r2, r3, #31
 8001276:	d506      	bpl.n	8001286 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001278:	6801      	ldr	r1, [r0, #0]
 800127a:	4c28      	ldr	r4, [pc, #160]	; (800131c <UART_AdvFeatureConfig+0xac>)
 800127c:	684a      	ldr	r2, [r1, #4]
 800127e:	4022      	ands	r2, r4
 8001280:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001282:	4322      	orrs	r2, r4
 8001284:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001286:	079a      	lsls	r2, r3, #30
 8001288:	d506      	bpl.n	8001298 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800128a:	6801      	ldr	r1, [r0, #0]
 800128c:	4c24      	ldr	r4, [pc, #144]	; (8001320 <UART_AdvFeatureConfig+0xb0>)
 800128e:	684a      	ldr	r2, [r1, #4]
 8001290:	4022      	ands	r2, r4
 8001292:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001294:	4322      	orrs	r2, r4
 8001296:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001298:	075a      	lsls	r2, r3, #29
 800129a:	d506      	bpl.n	80012aa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800129c:	6801      	ldr	r1, [r0, #0]
 800129e:	4c21      	ldr	r4, [pc, #132]	; (8001324 <UART_AdvFeatureConfig+0xb4>)
 80012a0:	684a      	ldr	r2, [r1, #4]
 80012a2:	4022      	ands	r2, r4
 80012a4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80012a6:	4322      	orrs	r2, r4
 80012a8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80012aa:	071a      	lsls	r2, r3, #28
 80012ac:	d506      	bpl.n	80012bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80012ae:	6801      	ldr	r1, [r0, #0]
 80012b0:	4c1d      	ldr	r4, [pc, #116]	; (8001328 <UART_AdvFeatureConfig+0xb8>)
 80012b2:	684a      	ldr	r2, [r1, #4]
 80012b4:	4022      	ands	r2, r4
 80012b6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80012b8:	4322      	orrs	r2, r4
 80012ba:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80012bc:	06da      	lsls	r2, r3, #27
 80012be:	d506      	bpl.n	80012ce <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80012c0:	6801      	ldr	r1, [r0, #0]
 80012c2:	4c1a      	ldr	r4, [pc, #104]	; (800132c <UART_AdvFeatureConfig+0xbc>)
 80012c4:	688a      	ldr	r2, [r1, #8]
 80012c6:	4022      	ands	r2, r4
 80012c8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80012ca:	4322      	orrs	r2, r4
 80012cc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80012ce:	069a      	lsls	r2, r3, #26
 80012d0:	d506      	bpl.n	80012e0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80012d2:	6801      	ldr	r1, [r0, #0]
 80012d4:	4c16      	ldr	r4, [pc, #88]	; (8001330 <UART_AdvFeatureConfig+0xc0>)
 80012d6:	688a      	ldr	r2, [r1, #8]
 80012d8:	4022      	ands	r2, r4
 80012da:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80012dc:	4322      	orrs	r2, r4
 80012de:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80012e0:	065a      	lsls	r2, r3, #25
 80012e2:	d510      	bpl.n	8001306 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80012e4:	6801      	ldr	r1, [r0, #0]
 80012e6:	4d13      	ldr	r5, [pc, #76]	; (8001334 <UART_AdvFeatureConfig+0xc4>)
 80012e8:	684a      	ldr	r2, [r1, #4]
 80012ea:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80012ec:	402a      	ands	r2, r5
 80012ee:	4322      	orrs	r2, r4
 80012f0:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	0352      	lsls	r2, r2, #13
 80012f6:	4294      	cmp	r4, r2
 80012f8:	d105      	bne.n	8001306 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80012fa:	684a      	ldr	r2, [r1, #4]
 80012fc:	4c0e      	ldr	r4, [pc, #56]	; (8001338 <UART_AdvFeatureConfig+0xc8>)
 80012fe:	4022      	ands	r2, r4
 8001300:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001302:	4322      	orrs	r2, r4
 8001304:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001306:	061b      	lsls	r3, r3, #24
 8001308:	d506      	bpl.n	8001318 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800130a:	6802      	ldr	r2, [r0, #0]
 800130c:	490b      	ldr	r1, [pc, #44]	; (800133c <UART_AdvFeatureConfig+0xcc>)
 800130e:	6853      	ldr	r3, [r2, #4]
 8001310:	400b      	ands	r3, r1
 8001312:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001314:	430b      	orrs	r3, r1
 8001316:	6053      	str	r3, [r2, #4]
  }
}
 8001318:	bd30      	pop	{r4, r5, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	fffdffff 	.word	0xfffdffff
 8001320:	fffeffff 	.word	0xfffeffff
 8001324:	fffbffff 	.word	0xfffbffff
 8001328:	ffff7fff 	.word	0xffff7fff
 800132c:	ffffefff 	.word	0xffffefff
 8001330:	ffffdfff 	.word	0xffffdfff
 8001334:	ffefffff 	.word	0xffefffff
 8001338:	ff9fffff 	.word	0xff9fffff
 800133c:	fff7ffff 	.word	0xfff7ffff

08001340 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001342:	0004      	movs	r4, r0
 8001344:	000e      	movs	r6, r1
 8001346:	0015      	movs	r5, r2
 8001348:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800134a:	6822      	ldr	r2, [r4, #0]
 800134c:	69d3      	ldr	r3, [r2, #28]
 800134e:	4033      	ands	r3, r6
 8001350:	1b9b      	subs	r3, r3, r6
 8001352:	4259      	negs	r1, r3
 8001354:	414b      	adcs	r3, r1
 8001356:	42ab      	cmp	r3, r5
 8001358:	d001      	beq.n	800135e <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800135a:	2000      	movs	r0, #0
 800135c:	e018      	b.n	8001390 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 800135e:	9b06      	ldr	r3, [sp, #24]
 8001360:	3301      	adds	r3, #1
 8001362:	d0f3      	beq.n	800134c <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001364:	9b06      	ldr	r3, [sp, #24]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d113      	bne.n	8001392 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	490c      	ldr	r1, [pc, #48]	; (80013a0 <UART_WaitOnFlagUntilTimeout+0x60>)
 800136e:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8001370:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001372:	400a      	ands	r2, r1
 8001374:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	31a3      	adds	r1, #163	; 0xa3
 800137a:	31ff      	adds	r1, #255	; 0xff
 800137c:	438a      	bics	r2, r1
 800137e:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001380:	0022      	movs	r2, r4
 8001382:	2320      	movs	r3, #32
 8001384:	3269      	adds	r2, #105	; 0x69
 8001386:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8001388:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 800138a:	2300      	movs	r3, #0
 800138c:	3468      	adds	r4, #104	; 0x68
 800138e:	7023      	strb	r3, [r4, #0]
}
 8001390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001392:	f7fe ff81 	bl	8000298 <HAL_GetTick>
 8001396:	9b06      	ldr	r3, [sp, #24]
 8001398:	1bc0      	subs	r0, r0, r7
 800139a:	4283      	cmp	r3, r0
 800139c:	d2d5      	bcs.n	800134a <UART_WaitOnFlagUntilTimeout+0xa>
 800139e:	e7e4      	b.n	800136a <UART_WaitOnFlagUntilTimeout+0x2a>
 80013a0:	fffffe5f 	.word	0xfffffe5f

080013a4 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013a4:	2300      	movs	r3, #0
{
 80013a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80013a8:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013aa:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80013ac:	f7fe ff74 	bl	8000298 <HAL_GetTick>
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	4a19      	ldr	r2, [pc, #100]	; (8001418 <UART_CheckIdleState+0x74>)
  tickstart = HAL_GetTick();
 80013b4:	0005      	movs	r5, r0
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d00e      	beq.n	80013d8 <UART_CheckIdleState+0x34>
 80013ba:	4a18      	ldr	r2, [pc, #96]	; (800141c <UART_CheckIdleState+0x78>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d00b      	beq.n	80013d8 <UART_CheckIdleState+0x34>
 80013c0:	4a17      	ldr	r2, [pc, #92]	; (8001420 <UART_CheckIdleState+0x7c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d008      	beq.n	80013d8 <UART_CheckIdleState+0x34>
  huart->gState  = HAL_UART_STATE_READY;
 80013c6:	0022      	movs	r2, r4
 80013c8:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80013ca:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80013cc:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 80013ce:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 80013d0:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80013d2:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 80013d4:	7020      	strb	r0, [r4, #0]
}
 80013d6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	071b      	lsls	r3, r3, #28
 80013dc:	d40f      	bmi.n	80013fe <UART_CheckIdleState+0x5a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	075b      	lsls	r3, r3, #29
 80013e4:	d5ef      	bpl.n	80013c6 <UART_CheckIdleState+0x22>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <UART_CheckIdleState+0x80>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	03c9      	lsls	r1, r1, #15
 80013f0:	002b      	movs	r3, r5
 80013f2:	0020      	movs	r0, r4
 80013f4:	f7ff ffa4 	bl	8001340 <UART_WaitOnFlagUntilTimeout>
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d10b      	bne.n	8001414 <UART_CheckIdleState+0x70>
 80013fc:	e7e3      	b.n	80013c6 <UART_CheckIdleState+0x22>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80013fe:	2180      	movs	r1, #128	; 0x80
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <UART_CheckIdleState+0x80>)
 8001402:	2200      	movs	r2, #0
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	0389      	lsls	r1, r1, #14
 8001408:	002b      	movs	r3, r5
 800140a:	0020      	movs	r0, r4
 800140c:	f7ff ff98 	bl	8001340 <UART_WaitOnFlagUntilTimeout>
 8001410:	2800      	cmp	r0, #0
 8001412:	d0e4      	beq.n	80013de <UART_CheckIdleState+0x3a>
        return HAL_TIMEOUT;
 8001414:	2003      	movs	r0, #3
 8001416:	e7de      	b.n	80013d6 <UART_CheckIdleState+0x32>
 8001418:	40013800 	.word	0x40013800
 800141c:	40004400 	.word	0x40004400
 8001420:	40004800 	.word	0x40004800
 8001424:	01ffffff 	.word	0x01ffffff

08001428 <HAL_UART_Init>:
{
 8001428:	b570      	push	{r4, r5, r6, lr}
 800142a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 800142c:	d101      	bne.n	8001432 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800142e:	2001      	movs	r0, #1
}
 8001430:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001432:	0005      	movs	r5, r0
 8001434:	3569      	adds	r5, #105	; 0x69
 8001436:	782b      	ldrb	r3, [r5, #0]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d104      	bne.n	8001448 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800143e:	0002      	movs	r2, r0
 8001440:	3268      	adds	r2, #104	; 0x68
 8001442:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001444:	f000 f942 	bl	80016cc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001448:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800144a:	2101      	movs	r1, #1
 800144c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800144e:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001450:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001452:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001454:	438b      	bics	r3, r1
 8001456:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001458:	f7ff fe28 	bl	80010ac <UART_SetConfig>
 800145c:	2801      	cmp	r0, #1
 800145e:	d0e6      	beq.n	800142e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001462:	2b00      	cmp	r3, #0
 8001464:	d002      	beq.n	800146c <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 8001466:	0020      	movs	r0, r4
 8001468:	f7ff ff02 	bl	8001270 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800146c:	6823      	ldr	r3, [r4, #0]
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <HAL_UART_Init+0x68>)
 8001470:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001472:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001474:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001476:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001478:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	438a      	bics	r2, r1
 800147e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001480:	2201      	movs	r2, #1
 8001482:	6819      	ldr	r1, [r3, #0]
 8001484:	430a      	orrs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001488:	f7ff ff8c 	bl	80013a4 <UART_CheckIdleState>
 800148c:	e7d0      	b.n	8001430 <HAL_UART_Init+0x8>
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	ffffb7ff 	.word	0xffffb7ff

08001494 <HAL_TIM_PeriodElapsedCallback>:
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if(htim->Instance == htim1.Instance){
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001496:	6802      	ldr	r2, [r0, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800149a:	b510      	push	{r4, lr}
	if(htim->Instance == htim1.Instance){
 800149c:	429a      	cmp	r2, r3
 800149e:	d104      	bne.n	80014aa <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80014a0:	2090      	movs	r0, #144	; 0x90
 80014a2:	2120      	movs	r1, #32
 80014a4:	05c0      	lsls	r0, r0, #23
 80014a6:	f7ff f827 	bl	80004f8 <HAL_GPIO_TogglePin>
	}
}
 80014aa:	bd10      	pop	{r4, pc}
 80014ac:	20000024 	.word	0x20000024

080014b0 <SystemClock_Config>:

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80014b0:	2310      	movs	r3, #16
{
 80014b2:	b530      	push	{r4, r5, lr}
 80014b4:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80014b6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80014be:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c0:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c2:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80014c4:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c6:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c8:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ca:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014cc:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80014ce:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80014d0:	9517      	str	r5, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d2:	f7ff f815 	bl	8000500 <HAL_RCC_OscConfig>
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d000      	beq.n	80014dc <SystemClock_Config+0x2c>
 80014da:	e7fe      	b.n	80014da <SystemClock_Config+0x2a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014dc:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014de:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014e0:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014e2:	0029      	movs	r1, r5
 80014e4:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e6:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e8:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014ea:	f7ff fa77 	bl	80009dc <HAL_RCC_ClockConfig>
 80014ee:	2800      	cmp	r0, #0
 80014f0:	d000      	beq.n	80014f4 <SystemClock_Config+0x44>
 80014f2:	e7fe      	b.n	80014f2 <SystemClock_Config+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014f4:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f6:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014f8:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014fa:	f7ff fb33 	bl	8000b64 <HAL_RCCEx_PeriphCLKConfig>
 80014fe:	1e04      	subs	r4, r0, #0
 8001500:	d000      	beq.n	8001504 <SystemClock_Config+0x54>
 8001502:	e7fe      	b.n	8001502 <SystemClock_Config+0x52>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001504:	f7ff fb18 	bl	8000b38 <HAL_RCC_GetHCLKFreq>
 8001508:	21fa      	movs	r1, #250	; 0xfa
 800150a:	0089      	lsls	r1, r1, #2
 800150c:	f7fe fe0e 	bl	800012c <__udivsi3>
 8001510:	f7fe ff02 	bl	8000318 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001514:	2004      	movs	r0, #4
 8001516:	f7fe ff19 	bl	800034c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800151a:	2001      	movs	r0, #1
 800151c:	0022      	movs	r2, r4
 800151e:	0021      	movs	r1, r4
 8001520:	4240      	negs	r0, r0
 8001522:	f7fe febf 	bl	80002a4 <HAL_NVIC_SetPriority>
}
 8001526:	b019      	add	sp, #100	; 0x64
 8001528:	bd30      	pop	{r4, r5, pc}
	...

0800152c <main>:
{
 800152c:	b510      	push	{r4, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8001530:	f7fe fe9a 	bl	8000268 <HAL_Init>
  SystemClock_Config();
 8001534:	f7ff ffbc 	bl	80014b0 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001538:	2080      	movs	r0, #128	; 0x80
 800153a:	4b39      	ldr	r3, [pc, #228]	; (8001620 <main+0xf4>)
 800153c:	0300      	lsls	r0, r0, #12
 800153e:	6959      	ldr	r1, [r3, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001542:	4301      	orrs	r1, r0
 8001544:	6159      	str	r1, [r3, #20]
 8001546:	695a      	ldr	r2, [r3, #20]
 8001548:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800154a:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154c:	9200      	str	r2, [sp, #0]
 800154e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001550:	6959      	ldr	r1, [r3, #20]
 8001552:	03c0      	lsls	r0, r0, #15
 8001554:	4301      	orrs	r1, r0
 8001556:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001558:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800155a:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155c:	0289      	lsls	r1, r1, #10
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800155e:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001560:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001562:	9201      	str	r2, [sp, #4]
 8001564:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001568:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	430a      	orrs	r2, r1
 800156c:	615a      	str	r2, [r3, #20]
 800156e:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	400b      	ands	r3, r1
 8001574:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001576:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800157a:	f7fe ffb7 	bl	80004ec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800157e:	2380      	movs	r3, #128	; 0x80
 8001580:	019b      	lsls	r3, r3, #6
 8001582:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001584:	4b27      	ldr	r3, [pc, #156]	; (8001624 <main+0xf8>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001586:	a905      	add	r1, sp, #20
 8001588:	4827      	ldr	r0, [pc, #156]	; (8001628 <main+0xfc>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800158a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800158e:	f7fe fef1 	bl	8000374 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001592:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001594:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = LD2_Pin;
 8001596:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001598:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	3b1f      	subs	r3, #31
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800159c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f7fe fee6 	bl	8000374 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80015a8:	4820      	ldr	r0, [pc, #128]	; (800162c <main+0x100>)
 80015aa:	4b21      	ldr	r3, [pc, #132]	; (8001630 <main+0x104>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ac:	6084      	str	r4, [r0, #8]
  huart2.Instance = USART2;
 80015ae:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80015b0:	23e1      	movs	r3, #225	; 0xe1
 80015b2:	025b      	lsls	r3, r3, #9
 80015b4:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b6:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015b8:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ba:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015bc:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015be:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015c2:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c4:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c6:	f7ff ff2f 	bl	8001428 <HAL_UART_Init>
 80015ca:	42a0      	cmp	r0, r4
 80015cc:	d000      	beq.n	80015d0 <main+0xa4>
 80015ce:	e7fe      	b.n	80015ce <main+0xa2>
  htim1.Instance = TIM1;
 80015d0:	4c18      	ldr	r4, [pc, #96]	; (8001634 <main+0x108>)
 80015d2:	4b19      	ldr	r3, [pc, #100]	; (8001638 <main+0x10c>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d4:	60a0      	str	r0, [r4, #8]
  htim1.Instance = TIM1;
 80015d6:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 48000-1;
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <main+0x110>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015da:	6120      	str	r0, [r4, #16]
  htim1.Init.Prescaler = 48000-1;
 80015dc:	6063      	str	r3, [r4, #4]
  htim1.Init.Period = 1000-1;
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <main+0x114>)
  htim1.Init.RepetitionCounter = 0;
 80015e0:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e2:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015e4:	0020      	movs	r0, r4
  htim1.Init.Period = 1000-1;
 80015e6:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015e8:	f7ff fc60 	bl	8000eac <HAL_TIM_Base_Init>
 80015ec:	2800      	cmp	r0, #0
 80015ee:	d000      	beq.n	80015f2 <main+0xc6>
 80015f0:	e7fe      	b.n	80015f0 <main+0xc4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f2:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015f4:	a905      	add	r1, sp, #20
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f6:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015f8:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fa:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015fc:	f7ff fc7e 	bl	8000efc <HAL_TIM_ConfigClockSource>
 8001600:	2800      	cmp	r0, #0
 8001602:	d000      	beq.n	8001606 <main+0xda>
 8001604:	e7fe      	b.n	8001604 <main+0xd8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001606:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001608:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800160a:	a903      	add	r1, sp, #12
 800160c:	0020      	movs	r0, r4
 800160e:	f7ff fd29 	bl	8001064 <HAL_TIMEx_MasterConfigSynchronization>
 8001612:	2800      	cmp	r0, #0
 8001614:	d000      	beq.n	8001618 <main+0xec>
 8001616:	e7fe      	b.n	8001616 <main+0xea>
  HAL_TIM_Base_Start_IT(&htim1);
 8001618:	0020      	movs	r0, r4
 800161a:	f7ff fb45 	bl	8000ca8 <HAL_TIM_Base_Start_IT>
 800161e:	e7fe      	b.n	800161e <main+0xf2>
 8001620:	40021000 	.word	0x40021000
 8001624:	10210000 	.word	0x10210000
 8001628:	48000800 	.word	0x48000800
 800162c:	20000064 	.word	0x20000064
 8001630:	40004400 	.word	0x40004400
 8001634:	20000024 	.word	0x20000024
 8001638:	40012c00 	.word	0x40012c00
 800163c:	0000bb7f 	.word	0x0000bb7f
 8001640:	000003e7 	.word	0x000003e7

08001644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001644:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	2001      	movs	r0, #1
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_MspInit+0x4c>)
 800164a:	6999      	ldr	r1, [r3, #24]
 800164c:	4301      	orrs	r1, r0
 800164e:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001650:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001654:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	4002      	ands	r2, r0
 8001658:	9200      	str	r2, [sp, #0]
 800165a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165c:	69da      	ldr	r2, [r3, #28]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800165e:	3806      	subs	r0, #6
  __HAL_RCC_PWR_CLK_ENABLE();
 8001660:	430a      	orrs	r2, r1
 8001662:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	400b      	ands	r3, r1
 800166a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800166c:	0011      	movs	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001670:	f7fe fe18 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2002      	movs	r0, #2
 8001678:	0011      	movs	r1, r2
 800167a:	4240      	negs	r0, r0
 800167c:	f7fe fe12 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2001      	movs	r0, #1
 8001684:	0011      	movs	r1, r2
 8001686:	4240      	negs	r0, r0
 8001688:	f7fe fe0c 	bl	80002a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168c:	bd07      	pop	{r0, r1, r2, pc}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001694:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM1)
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_TIM_Base_MspInit+0x30>)
 8001698:	6802      	ldr	r2, [r0, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d111      	bne.n	80016c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800169e:	2080      	movs	r0, #128	; 0x80
 80016a0:	4a09      	ldr	r2, [pc, #36]	; (80016c8 <HAL_TIM_Base_MspInit+0x34>)
 80016a2:	0100      	lsls	r0, r0, #4
 80016a4:	6991      	ldr	r1, [r2, #24]
 80016a6:	4301      	orrs	r1, r0
 80016a8:	6191      	str	r1, [r2, #24]
 80016aa:	6993      	ldr	r3, [r2, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80016ac:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016ae:	4003      	ands	r3, r0
 80016b0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80016b2:	200d      	movs	r0, #13
 80016b4:	0011      	movs	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016b6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80016b8:	f7fe fdf4 	bl	80002a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80016bc:	200d      	movs	r0, #13
 80016be:	f7fe fe21 	bl	8000304 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016c2:	bd07      	pop	{r0, r1, r2, pc}
 80016c4:	40012c00 	.word	0x40012c00
 80016c8:	40021000 	.word	0x40021000

080016cc <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_UART_MspInit+0x40>)
 80016d0:	6802      	ldr	r2, [r0, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d117      	bne.n	8001706 <HAL_UART_MspInit+0x3a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d6:	2080      	movs	r0, #128	; 0x80
 80016d8:	4a0d      	ldr	r2, [pc, #52]	; (8001710 <HAL_UART_MspInit+0x44>)
 80016da:	0280      	lsls	r0, r0, #10
 80016dc:	69d1      	ldr	r1, [r2, #28]
 80016de:	4301      	orrs	r1, r0
 80016e0:	61d1      	str	r1, [r2, #28]
 80016e2:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e4:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e6:	4003      	ands	r3, r0
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016ec:	230c      	movs	r3, #12
 80016ee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	3b0a      	subs	r3, #10
 80016f2:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80016fe:	3301      	adds	r3, #1
 8001700:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f7fe fe37 	bl	8000374 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001706:	b007      	add	sp, #28
 8001708:	bd00      	pop	{pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	40004400 	.word	0x40004400
 8001710:	40021000 	.word	0x40021000

08001714 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001714:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001716:	f7fe fdb7 	bl	8000288 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800171a:	f7fe fe26 	bl	800036a <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171e:	bd10      	pop	{r4, pc}

08001720 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
* @brief This function handles TIM1 break, update, trigger and commutation interrupts.
*/
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001720:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001722:	4802      	ldr	r0, [pc, #8]	; (800172c <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8001724:	f7ff face 	bl	8000cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001728:	bd10      	pop	{r4, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	20000024 	.word	0x20000024

08001730 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001730:	2101      	movs	r1, #1
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001734:	4811      	ldr	r0, [pc, #68]	; (800177c <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4002      	ands	r2, r0
 8001740:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	480e      	ldr	r0, [pc, #56]	; (8001780 <SystemInit+0x50>)
 8001746:	4002      	ands	r2, r0
 8001748:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	480d      	ldr	r0, [pc, #52]	; (8001784 <SystemInit+0x54>)
 800174e:	4002      	ands	r2, r0
 8001750:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <SystemInit+0x58>)
 8001756:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001758:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800175a:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800175c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800175e:	4382      	bics	r2, r0
 8001760:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEACU;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
 8001762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001764:	4809      	ldr	r0, [pc, #36]	; (800178c <SystemInit+0x5c>)
 8001766:	4002      	ands	r2, r0
 8001768:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800176a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800176c:	438a      	bics	r2, r1
 800176e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]

}
 8001774:	4770      	bx	lr
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	40021000 	.word	0x40021000
 800177c:	08ffb80c 	.word	0x08ffb80c
 8001780:	fef6ffff 	.word	0xfef6ffff
 8001784:	fffbffff 	.word	0xfffbffff
 8001788:	ffc0ffff 	.word	0xffc0ffff
 800178c:	fff0feac 	.word	0xfff0feac

08001790 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001790:	480d      	ldr	r0, [pc, #52]	; (80017c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001792:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001794:	480d      	ldr	r0, [pc, #52]	; (80017cc <LoopForever+0x6>)
  ldr r1, =_edata
 8001796:	490e      	ldr	r1, [pc, #56]	; (80017d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001798:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <LoopForever+0xe>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800179c:	e002      	b.n	80017a4 <LoopCopyDataInit>

0800179e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a2:	3304      	adds	r3, #4

080017a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a8:	d3f9      	bcc.n	800179e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017ac:	4c0b      	ldr	r4, [pc, #44]	; (80017dc <LoopForever+0x16>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b0:	e001      	b.n	80017b6 <LoopFillZerobss>

080017b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b4:	3204      	adds	r2, #4

080017b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b8:	d3fb      	bcc.n	80017b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80017ba:	f7ff ffb9 	bl	8001730 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80017be:	f000 f811 	bl	80017e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017c2:	f7ff feb3 	bl	800152c <main>

080017c6 <LoopForever>:

LoopForever:
    b LoopForever
 80017c6:	e7fe      	b.n	80017c6 <LoopForever>
  ldr   r0, =_estack
 80017c8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80017d4:	0800189c 	.word	0x0800189c
  ldr r2, =_sbss
 80017d8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80017dc:	200000d4 	.word	0x200000d4

080017e0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC1_COMP_IRQHandler>
	...

080017e4 <__libc_init_array>:
 80017e4:	b570      	push	{r4, r5, r6, lr}
 80017e6:	2600      	movs	r6, #0
 80017e8:	4d0c      	ldr	r5, [pc, #48]	; (800181c <__libc_init_array+0x38>)
 80017ea:	4c0d      	ldr	r4, [pc, #52]	; (8001820 <__libc_init_array+0x3c>)
 80017ec:	1b64      	subs	r4, r4, r5
 80017ee:	10a4      	asrs	r4, r4, #2
 80017f0:	42a6      	cmp	r6, r4
 80017f2:	d109      	bne.n	8001808 <__libc_init_array+0x24>
 80017f4:	2600      	movs	r6, #0
 80017f6:	f000 f823 	bl	8001840 <_init>
 80017fa:	4d0a      	ldr	r5, [pc, #40]	; (8001824 <__libc_init_array+0x40>)
 80017fc:	4c0a      	ldr	r4, [pc, #40]	; (8001828 <__libc_init_array+0x44>)
 80017fe:	1b64      	subs	r4, r4, r5
 8001800:	10a4      	asrs	r4, r4, #2
 8001802:	42a6      	cmp	r6, r4
 8001804:	d105      	bne.n	8001812 <__libc_init_array+0x2e>
 8001806:	bd70      	pop	{r4, r5, r6, pc}
 8001808:	00b3      	lsls	r3, r6, #2
 800180a:	58eb      	ldr	r3, [r5, r3]
 800180c:	4798      	blx	r3
 800180e:	3601      	adds	r6, #1
 8001810:	e7ee      	b.n	80017f0 <__libc_init_array+0xc>
 8001812:	00b3      	lsls	r3, r6, #2
 8001814:	58eb      	ldr	r3, [r5, r3]
 8001816:	4798      	blx	r3
 8001818:	3601      	adds	r6, #1
 800181a:	e7f2      	b.n	8001802 <__libc_init_array+0x1e>
 800181c:	08001894 	.word	0x08001894
 8001820:	08001894 	.word	0x08001894
 8001824:	08001894 	.word	0x08001894
 8001828:	08001898 	.word	0x08001898

0800182c <memcpy>:
 800182c:	2300      	movs	r3, #0
 800182e:	b510      	push	{r4, lr}
 8001830:	429a      	cmp	r2, r3
 8001832:	d100      	bne.n	8001836 <memcpy+0xa>
 8001834:	bd10      	pop	{r4, pc}
 8001836:	5ccc      	ldrb	r4, [r1, r3]
 8001838:	54c4      	strb	r4, [r0, r3]
 800183a:	3301      	adds	r3, #1
 800183c:	e7f8      	b.n	8001830 <memcpy+0x4>
	...

08001840 <_init>:
 8001840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001846:	bc08      	pop	{r3}
 8001848:	469e      	mov	lr, r3
 800184a:	4770      	bx	lr

0800184c <_fini>:
 800184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001852:	bc08      	pop	{r3}
 8001854:	469e      	mov	lr, r3
 8001856:	4770      	bx	lr
