
UART_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000944  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000a00  08000a00  00010a00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000a28  08000a28  00010a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000a2c  08000a2c  00010a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000004  08000a34  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000020  08000a34  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00003db5  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000010e4  00000000  00000000  00023de1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000170e  00000000  00000000  00024ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000218  00000000  00000000  000265d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000758  00000000  00000000  000267f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001ab6  00000000  00000000  00026f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000013c3  00000000  00000000  000289fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00029dc1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000430  00000000  00000000  00029e40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080009e8 	.word	0x080009e8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	080009e8 	.word	0x080009e8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800021c:	b510      	push	{r4, lr}
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800021e:	7902      	ldrb	r2, [r0, #4]
 8000220:	6803      	ldr	r3, [r0, #0]
 8000222:	2a00      	cmp	r2, #0
 8000224:	d03c      	beq.n	80002a0 <LL_EXTI_Init+0x84>
  ErrorStatus status = SUCCESS;
 8000226:	2201      	movs	r2, #1
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000228:	2b00      	cmp	r3, #0
 800022a:	d01f      	beq.n	800026c <LL_EXTI_Init+0x50>
    {
      switch (EXTI_InitStruct->Mode)
 800022c:	7941      	ldrb	r1, [r0, #5]
 800022e:	4291      	cmp	r1, r2
 8000230:	d01e      	beq.n	8000270 <LL_EXTI_Init+0x54>
 8000232:	2900      	cmp	r1, #0
 8000234:	d003      	beq.n	800023e <LL_EXTI_Init+0x22>
 8000236:	2902      	cmp	r1, #2
 8000238:	d022      	beq.n	8000280 <LL_EXTI_Init+0x64>
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
          break;
        default:
          status = ERROR;
 800023a:	2200      	movs	r2, #0
 800023c:	e006      	b.n	800024c <LL_EXTI_Init+0x30>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800023e:	491e      	ldr	r1, [pc, #120]	; (80002b8 <LL_EXTI_Init+0x9c>)
 8000240:	684c      	ldr	r4, [r1, #4]
 8000242:	439c      	bics	r4, r3
 8000244:	604c      	str	r4, [r1, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000246:	680c      	ldr	r4, [r1, #0]
 8000248:	431c      	orrs	r4, r3
 800024a:	600c      	str	r4, [r1, #0]
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800024c:	7981      	ldrb	r1, [r0, #6]
 800024e:	2900      	cmp	r1, #0
 8000250:	d00c      	beq.n	800026c <LL_EXTI_Init+0x50>
      {
        switch (EXTI_InitStruct->Trigger)
 8000252:	2902      	cmp	r1, #2
 8000254:	d018      	beq.n	8000288 <LL_EXTI_Init+0x6c>
 8000256:	2903      	cmp	r1, #3
 8000258:	d01e      	beq.n	8000298 <LL_EXTI_Init+0x7c>
 800025a:	2901      	cmp	r1, #1
 800025c:	d12a      	bne.n	80002b4 <LL_EXTI_Init+0x98>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800025e:	4916      	ldr	r1, [pc, #88]	; (80002b8 <LL_EXTI_Init+0x9c>)
 8000260:	68c8      	ldr	r0, [r1, #12]
 8000262:	4398      	bics	r0, r3
 8000264:	60c8      	str	r0, [r1, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000266:	6888      	ldr	r0, [r1, #8]
 8000268:	4303      	orrs	r3, r0
 800026a:	608b      	str	r3, [r1, #8]
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
  }
  return status;
}
 800026c:	0010      	movs	r0, r2
 800026e:	bd10      	pop	{r4, pc}
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000270:	4911      	ldr	r1, [pc, #68]	; (80002b8 <LL_EXTI_Init+0x9c>)
 8000272:	680c      	ldr	r4, [r1, #0]
 8000274:	439c      	bics	r4, r3
  SET_BIT(EXTI->IMR, ExtiLine);
 8000276:	600c      	str	r4, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000278:	684c      	ldr	r4, [r1, #4]
 800027a:	431c      	orrs	r4, r3
 800027c:	604c      	str	r4, [r1, #4]
 800027e:	e7e5      	b.n	800024c <LL_EXTI_Init+0x30>
  SET_BIT(EXTI->IMR, ExtiLine);
 8000280:	490d      	ldr	r1, [pc, #52]	; (80002b8 <LL_EXTI_Init+0x9c>)
 8000282:	680c      	ldr	r4, [r1, #0]
 8000284:	431c      	orrs	r4, r3
 8000286:	e7f6      	b.n	8000276 <LL_EXTI_Init+0x5a>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000288:	490b      	ldr	r1, [pc, #44]	; (80002b8 <LL_EXTI_Init+0x9c>)
 800028a:	6888      	ldr	r0, [r1, #8]
 800028c:	4398      	bics	r0, r3
  SET_BIT(EXTI->RTSR, ExtiLine);
 800028e:	6088      	str	r0, [r1, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000290:	68c8      	ldr	r0, [r1, #12]
 8000292:	4303      	orrs	r3, r0
 8000294:	60cb      	str	r3, [r1, #12]
 8000296:	e7e9      	b.n	800026c <LL_EXTI_Init+0x50>
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000298:	4907      	ldr	r1, [pc, #28]	; (80002b8 <LL_EXTI_Init+0x9c>)
 800029a:	6888      	ldr	r0, [r1, #8]
 800029c:	4318      	orrs	r0, r3
 800029e:	e7f6      	b.n	800028e <LL_EXTI_Init+0x72>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80002a0:	43db      	mvns	r3, r3
 80002a2:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <LL_EXTI_Init+0x9c>)
 80002a4:	6811      	ldr	r1, [r2, #0]
 80002a6:	4019      	ands	r1, r3
 80002a8:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80002aa:	6851      	ldr	r1, [r2, #4]
 80002ac:	400b      	ands	r3, r1
 80002ae:	6053      	str	r3, [r2, #4]
  ErrorStatus status = SUCCESS;
 80002b0:	2201      	movs	r2, #1
 80002b2:	e7db      	b.n	800026c <LL_EXTI_Init+0x50>
            status = ERROR;
 80002b4:	2200      	movs	r2, #0
 80002b6:	e7d9      	b.n	800026c <LL_EXTI_Init+0x50>
 80002b8:	40010400 	.word	0x40010400

080002bc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pinpos     = 0x00000000U;
 80002be:	2600      	movs	r6, #0
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80002c0:	680f      	ldr	r7, [r1, #0]
{
 80002c2:	b085      	sub	sp, #20
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80002c4:	003b      	movs	r3, r7
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	d10c      	bne.n	80002e4 <LL_GPIO_Init+0x28>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80002ca:	684b      	ldr	r3, [r1, #4]
 80002cc:	3b01      	subs	r3, #1
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d805      	bhi.n	80002de <LL_GPIO_Init+0x22>
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80002d2:	68ca      	ldr	r2, [r1, #12]
 80002d4:	6843      	ldr	r3, [r0, #4]
 80002d6:	437a      	muls	r2, r7
 80002d8:	43bb      	bics	r3, r7
 80002da:	4313      	orrs	r3, r2
 80002dc:	6043      	str	r3, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 80002de:	2001      	movs	r0, #1
 80002e0:	b005      	add	sp, #20
 80002e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80002e4:	2301      	movs	r3, #1
 80002e6:	40b3      	lsls	r3, r6
 80002e8:	403b      	ands	r3, r7
    if (currentpin)
 80002ea:	d036      	beq.n	800035a <LL_GPIO_Init+0x9e>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80002ec:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80002ee:	2503      	movs	r5, #3
 80002f0:	9201      	str	r2, [sp, #4]
 80002f2:	001a      	movs	r2, r3
 80002f4:	435a      	muls	r2, r3
 80002f6:	4355      	muls	r5, r2
 80002f8:	43ed      	mvns	r5, r5
 80002fa:	6804      	ldr	r4, [r0, #0]
 80002fc:	9502      	str	r5, [sp, #8]
 80002fe:	402c      	ands	r4, r5
 8000300:	9d01      	ldr	r5, [sp, #4]
 8000302:	4355      	muls	r5, r2
 8000304:	432c      	orrs	r4, r5
 8000306:	6004      	str	r4, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000308:	9c01      	ldr	r4, [sp, #4]
 800030a:	3c01      	subs	r4, #1
 800030c:	2c01      	cmp	r4, #1
 800030e:	d80a      	bhi.n	8000326 <LL_GPIO_Init+0x6a>
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8000310:	6884      	ldr	r4, [r0, #8]
 8000312:	46a4      	mov	ip, r4
 8000314:	4665      	mov	r5, ip
 8000316:	688c      	ldr	r4, [r1, #8]
 8000318:	4354      	muls	r4, r2
 800031a:	9403      	str	r4, [sp, #12]
 800031c:	9c02      	ldr	r4, [sp, #8]
 800031e:	4025      	ands	r5, r4
 8000320:	9c03      	ldr	r4, [sp, #12]
 8000322:	432c      	orrs	r4, r5
 8000324:	6084      	str	r4, [r0, #8]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8000326:	68c4      	ldr	r4, [r0, #12]
 8000328:	46a4      	mov	ip, r4
 800032a:	4665      	mov	r5, ip
 800032c:	690c      	ldr	r4, [r1, #16]
 800032e:	4354      	muls	r4, r2
 8000330:	9403      	str	r4, [sp, #12]
 8000332:	9c02      	ldr	r4, [sp, #8]
 8000334:	402c      	ands	r4, r5
 8000336:	0025      	movs	r5, r4
 8000338:	9c03      	ldr	r4, [sp, #12]
 800033a:	4325      	orrs	r5, r4
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800033c:	9c01      	ldr	r4, [sp, #4]
 800033e:	60c5      	str	r5, [r0, #12]
 8000340:	2c02      	cmp	r4, #2
 8000342:	d10a      	bne.n	800035a <LL_GPIO_Init+0x9e>
 8000344:	694c      	ldr	r4, [r1, #20]
        if (currentpin < LL_GPIO_PIN_8)
 8000346:	2bff      	cmp	r3, #255	; 0xff
 8000348:	d809      	bhi.n	800035e <LL_GPIO_Init+0xa2>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800034a:	250f      	movs	r5, #15
 800034c:	4352      	muls	r2, r2
 800034e:	4355      	muls	r5, r2
 8000350:	4362      	muls	r2, r4
 8000352:	6a03      	ldr	r3, [r0, #32]
 8000354:	43ab      	bics	r3, r5
 8000356:	4313      	orrs	r3, r2
 8000358:	6203      	str	r3, [r0, #32]
    pinpos++;
 800035a:	3601      	adds	r6, #1
 800035c:	e7b2      	b.n	80002c4 <LL_GPIO_Init+0x8>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800035e:	220f      	movs	r2, #15
 8000360:	0a1b      	lsrs	r3, r3, #8
 8000362:	435b      	muls	r3, r3
 8000364:	435b      	muls	r3, r3
 8000366:	435a      	muls	r2, r3
 8000368:	4363      	muls	r3, r4
 800036a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800036c:	4395      	bics	r5, r2
 800036e:	431d      	orrs	r5, r3
 8000370:	6245      	str	r5, [r0, #36]	; 0x24
 8000372:	e7f2      	b.n	800035a <LL_GPIO_Init+0x9e>

08000374 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <RCC_GetHCLKClockFreq+0x14>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	061b      	lsls	r3, r3, #24
 800037c:	0f1b      	lsrs	r3, r3, #28
 800037e:	5cd3      	ldrb	r3, [r2, r3]
 8000380:	40d8      	lsrs	r0, r3
}
 8000382:	4770      	bx	lr
 8000384:	40021000 	.word	0x40021000
 8000388:	08000a10 	.word	0x08000a10

0800038c <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800038c:	4b03      	ldr	r3, [pc, #12]	; (800039c <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800038e:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <RCC_GetPCLK1ClockFreq+0x14>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	055b      	lsls	r3, r3, #21
 8000394:	0f5b      	lsrs	r3, r3, #29
 8000396:	5cd3      	ldrb	r3, [r2, r3]
 8000398:	40d8      	lsrs	r0, r3
}
 800039a:	4770      	bx	lr
 800039c:	40021000 	.word	0x40021000
 80003a0:	08000a20 	.word	0x08000a20

080003a4 <RCC_PLL_GetFreqDomain_SYS>:
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80003a4:	21c0      	movs	r1, #192	; 0xc0
 80003a6:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <RCC_PLL_GetFreqDomain_SYS+0x30>)
 80003a8:	0249      	lsls	r1, r1, #9
 80003aa:	685a      	ldr	r2, [r3, #4]
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80003ac:	b570      	push	{r4, r5, r6, lr}
 80003ae:	400a      	ands	r2, r1
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 80003b0:	428a      	cmp	r2, r1
 80003b2:	d10c      	bne.n	80003ce <RCC_PLL_GetFreqDomain_SYS+0x2a>
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;

#if defined(RCC_HSI48_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI48:     /* HSI48 used as PLL clock source */
      pllinputfreq = HSI48_VALUE;
 80003b4:	4808      	ldr	r0, [pc, #32]	; (80003d8 <RCC_PLL_GetFreqDomain_SYS+0x34>)
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80003b6:	250f      	movs	r5, #15
 80003b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80003ba:	685c      	ldr	r4, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80003bc:	4029      	ands	r1, r5
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
 80003be:	3101      	adds	r1, #1
 80003c0:	f7ff fea0 	bl	8000104 <__udivsi3>
 80003c4:	0ca4      	lsrs	r4, r4, #18
 80003c6:	402c      	ands	r4, r5
 80003c8:	3402      	adds	r4, #2
 80003ca:	4360      	muls	r0, r4
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
      pllinputfreq = HSI_VALUE;
 80003ce:	4803      	ldr	r0, [pc, #12]	; (80003dc <RCC_PLL_GetFreqDomain_SYS+0x38>)
 80003d0:	e7f1      	b.n	80003b6 <RCC_PLL_GetFreqDomain_SYS+0x12>
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	40021000 	.word	0x40021000
 80003d8:	02dc6c00 	.word	0x02dc6c00
 80003dc:	007a1200 	.word	0x007a1200

080003e0 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003e0:	220c      	movs	r2, #12
 80003e2:	4b07      	ldr	r3, [pc, #28]	; (8000400 <RCC_GetSystemClockFreq+0x20>)
{
 80003e4:	b510      	push	{r4, lr}
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	4013      	ands	r3, r2
  switch (LL_RCC_GetSysClkSource())
 80003ea:	2b08      	cmp	r3, #8
 80003ec:	d003      	beq.n	80003f6 <RCC_GetSystemClockFreq+0x16>
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d104      	bne.n	80003fc <RCC_GetSystemClockFreq+0x1c>
      frequency = HSI48_VALUE;
 80003f2:	4804      	ldr	r0, [pc, #16]	; (8000404 <RCC_GetSystemClockFreq+0x24>)
}
 80003f4:	bd10      	pop	{r4, pc}
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80003f6:	f7ff ffd5 	bl	80003a4 <RCC_PLL_GetFreqDomain_SYS>
      break;
 80003fa:	e7fb      	b.n	80003f4 <RCC_GetSystemClockFreq+0x14>
      frequency = HSI_VALUE;
 80003fc:	4802      	ldr	r0, [pc, #8]	; (8000408 <RCC_GetSystemClockFreq+0x28>)
  return frequency;
 80003fe:	e7f9      	b.n	80003f4 <RCC_GetSystemClockFreq+0x14>
 8000400:	40021000 	.word	0x40021000
 8000404:	02dc6c00 	.word	0x02dc6c00
 8000408:	007a1200 	.word	0x007a1200

0800040c <LL_RCC_GetSystemClocksFreq>:
{
 800040c:	b510      	push	{r4, lr}
 800040e:	0004      	movs	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000410:	f7ff ffe6 	bl	80003e0 <RCC_GetSystemClockFreq>
 8000414:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000416:	f7ff ffad 	bl	8000374 <RCC_GetHCLKClockFreq>
 800041a:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800041c:	f7ff ffb6 	bl	800038c <RCC_GetPCLK1ClockFreq>
 8000420:	60a0      	str	r0, [r4, #8]
}
 8000422:	bd10      	pop	{r4, pc}

08000424 <LL_RCC_GetUSARTClockFreq>:
{
 8000424:	b510      	push	{r4, lr}
 8000426:	1e03      	subs	r3, r0, #0
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8000428:	d120      	bne.n	800046c <LL_RCC_GetUSARTClockFreq+0x48>
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 800042a:	2003      	movs	r0, #3
 800042c:	492e      	ldr	r1, [pc, #184]	; (80004e8 <LL_RCC_GetUSARTClockFreq+0xc4>)
 800042e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000430:	4002      	ands	r2, r0
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000432:	2a02      	cmp	r2, #2
 8000434:	d00d      	beq.n	8000452 <LL_RCC_GetUSARTClockFreq+0x2e>
 8000436:	4282      	cmp	r2, r0
 8000438:	d005      	beq.n	8000446 <LL_RCC_GetUSARTClockFreq+0x22>
 800043a:	2a01      	cmp	r2, #1
 800043c:	d10f      	bne.n	800045e <LL_RCC_GetUSARTClockFreq+0x3a>
        usart_frequency = RCC_GetSystemClockFreq();
 800043e:	f7ff ffcf 	bl	80003e0 <RCC_GetSystemClockFreq>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000442:	0003      	movs	r3, r0
        break;
 8000444:	e003      	b.n	800044e <LL_RCC_GetUSARTClockFreq+0x2a>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000446:	680a      	ldr	r2, [r1, #0]
        if (LL_RCC_HSI_IsReady())
 8000448:	0792      	lsls	r2, r2, #30
 800044a:	d500      	bpl.n	800044e <LL_RCC_GetUSARTClockFreq+0x2a>
          usart_frequency = HSI_VALUE;
 800044c:	4b27      	ldr	r3, [pc, #156]	; (80004ec <LL_RCC_GetUSARTClockFreq+0xc8>)
          usart_frequency = HSI_VALUE;
 800044e:	0018      	movs	r0, r3
 8000450:	e021      	b.n	8000496 <LL_RCC_GetUSARTClockFreq+0x72>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000452:	6a09      	ldr	r1, [r1, #32]
        if (LL_RCC_LSE_IsReady())
 8000454:	4211      	tst	r1, r2
 8000456:	d0fa      	beq.n	800044e <LL_RCC_GetUSARTClockFreq+0x2a>
          usart_frequency = LSE_VALUE;
 8000458:	2380      	movs	r3, #128	; 0x80
 800045a:	021b      	lsls	r3, r3, #8
 800045c:	e7f7      	b.n	800044e <LL_RCC_GetUSARTClockFreq+0x2a>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800045e:	f7ff ffbf 	bl	80003e0 <RCC_GetSystemClockFreq>
 8000462:	f7ff ff87 	bl	8000374 <RCC_GetHCLKClockFreq>
 8000466:	f7ff ff91 	bl	800038c <RCC_GetPCLK1ClockFreq>
 800046a:	e7ea      	b.n	8000442 <LL_RCC_GetUSARTClockFreq+0x1e>
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800046c:	2810      	cmp	r0, #16
 800046e:	d119      	bne.n	80004a4 <LL_RCC_GetUSARTClockFreq+0x80>
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8000470:	21c0      	movs	r1, #192	; 0xc0
 8000472:	4a1d      	ldr	r2, [pc, #116]	; (80004e8 <LL_RCC_GetUSARTClockFreq+0xc4>)
 8000474:	0289      	lsls	r1, r1, #10
 8000476:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000478:	4019      	ands	r1, r3
 800047a:	2380      	movs	r3, #128	; 0x80
 800047c:	055b      	lsls	r3, r3, #21
 800047e:	430b      	orrs	r3, r1
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000480:	491b      	ldr	r1, [pc, #108]	; (80004f0 <LL_RCC_GetUSARTClockFreq+0xcc>)
 8000482:	428b      	cmp	r3, r1
 8000484:	d023      	beq.n	80004ce <LL_RCC_GetUSARTClockFreq+0xaa>
 8000486:	491b      	ldr	r1, [pc, #108]	; (80004f4 <LL_RCC_GetUSARTClockFreq+0xd0>)
 8000488:	428b      	cmp	r3, r1
 800048a:	d005      	beq.n	8000498 <LL_RCC_GetUSARTClockFreq+0x74>
 800048c:	4a1a      	ldr	r2, [pc, #104]	; (80004f8 <LL_RCC_GetUSARTClockFreq+0xd4>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800048e:	4293      	cmp	r3, r2
 8000490:	d122      	bne.n	80004d8 <LL_RCC_GetUSARTClockFreq+0xb4>
        usart_frequency = RCC_GetSystemClockFreq();
 8000492:	f7ff ffa5 	bl	80003e0 <RCC_GetSystemClockFreq>
}
 8000496:	bd10      	pop	{r4, pc}
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000498:	2000      	movs	r0, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800049a:	6813      	ldr	r3, [r2, #0]
        if (LL_RCC_HSI_IsReady())
 800049c:	079b      	lsls	r3, r3, #30
 800049e:	d5fa      	bpl.n	8000496 <LL_RCC_GetUSARTClockFreq+0x72>
          usart_frequency = HSI_VALUE;
 80004a0:	4812      	ldr	r0, [pc, #72]	; (80004ec <LL_RCC_GetUSARTClockFreq+0xc8>)
 80004a2:	e7f8      	b.n	8000496 <LL_RCC_GetUSARTClockFreq+0x72>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80004a4:	2000      	movs	r0, #0
  if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80004a6:	2b12      	cmp	r3, #18
 80004a8:	d1f5      	bne.n	8000496 <LL_RCC_GetUSARTClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80004aa:	21c0      	movs	r1, #192	; 0xc0
 80004ac:	4a0e      	ldr	r2, [pc, #56]	; (80004e8 <LL_RCC_GetUSARTClockFreq+0xc4>)
 80004ae:	0309      	lsls	r1, r1, #12
 80004b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80004b2:	4019      	ands	r1, r3
 80004b4:	2390      	movs	r3, #144	; 0x90
 80004b6:	055b      	lsls	r3, r3, #21
 80004b8:	430b      	orrs	r3, r1
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80004ba:	4910      	ldr	r1, [pc, #64]	; (80004fc <LL_RCC_GetUSARTClockFreq+0xd8>)
 80004bc:	428b      	cmp	r3, r1
 80004be:	d006      	beq.n	80004ce <LL_RCC_GetUSARTClockFreq+0xaa>
 80004c0:	490f      	ldr	r1, [pc, #60]	; (8000500 <LL_RCC_GetUSARTClockFreq+0xdc>)
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d001      	beq.n	80004ca <LL_RCC_GetUSARTClockFreq+0xa6>
 80004c6:	4a0f      	ldr	r2, [pc, #60]	; (8000504 <LL_RCC_GetUSARTClockFreq+0xe0>)
 80004c8:	e7e1      	b.n	800048e <LL_RCC_GetUSARTClockFreq+0x6a>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80004ca:	6813      	ldr	r3, [r2, #0]
 80004cc:	e7e6      	b.n	800049c <LL_RCC_GetUSARTClockFreq+0x78>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80004ce:	6a10      	ldr	r0, [r2, #32]
 80004d0:	0780      	lsls	r0, r0, #30
          usart_frequency = LSE_VALUE;
 80004d2:	0fc0      	lsrs	r0, r0, #31
 80004d4:	03c0      	lsls	r0, r0, #15
 80004d6:	e7de      	b.n	8000496 <LL_RCC_GetUSARTClockFreq+0x72>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80004d8:	f7ff ff82 	bl	80003e0 <RCC_GetSystemClockFreq>
 80004dc:	f7ff ff4a 	bl	8000374 <RCC_GetHCLKClockFreq>
 80004e0:	f7ff ff54 	bl	800038c <RCC_GetPCLK1ClockFreq>
        break;
 80004e4:	e7d7      	b.n	8000496 <LL_RCC_GetUSARTClockFreq+0x72>
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	40021000 	.word	0x40021000
 80004ec:	007a1200 	.word	0x007a1200
 80004f0:	10020000 	.word	0x10020000
 80004f4:	10030000 	.word	0x10030000
 80004f8:	10010000 	.word	0x10010000
 80004fc:	12080000 	.word	0x12080000
 8000500:	120c0000 	.word	0x120c0000
 8000504:	12040000 	.word	0x12040000

08000508 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8000508:	b530      	push	{r4, r5, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800050a:	6803      	ldr	r3, [r0, #0]
 800050c:	0004      	movs	r4, r0
 800050e:	2001      	movs	r0, #1
 8000510:	b085      	sub	sp, #20
 8000512:	000d      	movs	r5, r1
 8000514:	4018      	ands	r0, r3
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000516:	d002      	beq.n	800051e <LL_USART_Init+0x16>
  ErrorStatus status = ERROR;
 8000518:	2000      	movs	r0, #0
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 800051a:	b005      	add	sp, #20
 800051c:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 800051e:	684b      	ldr	r3, [r1, #4]
 8000520:	68c9      	ldr	r1, [r1, #12]
 8000522:	6822      	ldr	r2, [r4, #0]
 8000524:	430b      	orrs	r3, r1
 8000526:	6929      	ldr	r1, [r5, #16]
 8000528:	430b      	orrs	r3, r1
 800052a:	69a9      	ldr	r1, [r5, #24]
 800052c:	430b      	orrs	r3, r1
 800052e:	4927      	ldr	r1, [pc, #156]	; (80005cc <LL_USART_Init+0xc4>)
 8000530:	400a      	ands	r2, r1
 8000532:	4313      	orrs	r3, r2
 8000534:	6023      	str	r3, [r4, #0]
  *         (*) Values not available on all devices
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000536:	6863      	ldr	r3, [r4, #4]
 8000538:	4a25      	ldr	r2, [pc, #148]	; (80005d0 <LL_USART_Init+0xc8>)
 800053a:	4013      	ands	r3, r2
 800053c:	68aa      	ldr	r2, [r5, #8]
 800053e:	4313      	orrs	r3, r2
 8000540:	6063      	str	r3, [r4, #4]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000542:	68a3      	ldr	r3, [r4, #8]
 8000544:	4a23      	ldr	r2, [pc, #140]	; (80005d4 <LL_USART_Init+0xcc>)
 8000546:	4013      	ands	r3, r2
 8000548:	696a      	ldr	r2, [r5, #20]
 800054a:	4313      	orrs	r3, r2
 800054c:	60a3      	str	r3, [r4, #8]
    if (USARTx == USART1)
 800054e:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <LL_USART_Init+0xd0>)
 8000550:	429c      	cmp	r4, r3
 8000552:	d118      	bne.n	8000586 <LL_USART_Init+0x7e>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8000554:	f7ff ff66 	bl	8000424 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000558:	2800      	cmp	r0, #0
 800055a:	d0dd      	beq.n	8000518 <LL_USART_Init+0x10>
        && (USART_InitStruct->BaudRate != 0U))
 800055c:	6829      	ldr	r1, [r5, #0]
 800055e:	2900      	cmp	r1, #0
 8000560:	d0da      	beq.n	8000518 <LL_USART_Init+0x10>
                                          uint32_t BaudRate)
{
  register uint32_t usartdiv = 0x0U;
  register uint32_t brrtemp = 0x0U;

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000562:	2280      	movs	r2, #128	; 0x80
 8000564:	69ad      	ldr	r5, [r5, #24]
 8000566:	0212      	lsls	r2, r2, #8
 8000568:	084b      	lsrs	r3, r1, #1
 800056a:	4295      	cmp	r5, r2
 800056c:	d129      	bne.n	80005c2 <LL_USART_Init+0xba>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800056e:	0040      	lsls	r0, r0, #1
 8000570:	18c0      	adds	r0, r0, r3
 8000572:	f7ff fdc7 	bl	8000104 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 8000576:	4b19      	ldr	r3, [pc, #100]	; (80005dc <LL_USART_Init+0xd4>)
 8000578:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800057a:	0700      	lsls	r0, r0, #28
 800057c:	0f40      	lsrs	r0, r0, #29
 800057e:	4318      	orrs	r0, r3
    USARTx->BRR = brrtemp;
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000580:	60e0      	str	r0, [r4, #12]
      status = SUCCESS;
 8000582:	2001      	movs	r0, #1
 8000584:	e7c9      	b.n	800051a <LL_USART_Init+0x12>
    else if (USARTx == USART2)
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <LL_USART_Init+0xd8>)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8000588:	2010      	movs	r0, #16
    else if (USARTx == USART2)
 800058a:	429c      	cmp	r4, r3
 800058c:	d0e2      	beq.n	8000554 <LL_USART_Init+0x4c>
    else if (USARTx == USART3)
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <LL_USART_Init+0xdc>)
 8000590:	429c      	cmp	r4, r3
 8000592:	d101      	bne.n	8000598 <LL_USART_Init+0x90>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8000594:	2012      	movs	r0, #18
 8000596:	e7dd      	b.n	8000554 <LL_USART_Init+0x4c>
    else if (USARTx == USART4)
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <LL_USART_Init+0xe0>)
 800059a:	429c      	cmp	r4, r3
 800059c:	d104      	bne.n	80005a8 <LL_USART_Init+0xa0>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800059e:	a801      	add	r0, sp, #4
 80005a0:	f7ff ff34 	bl	800040c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80005a4:	9803      	ldr	r0, [sp, #12]
 80005a6:	e7d7      	b.n	8000558 <LL_USART_Init+0x50>
    else if (USARTx == USART5)
 80005a8:	4b10      	ldr	r3, [pc, #64]	; (80005ec <LL_USART_Init+0xe4>)
 80005aa:	429c      	cmp	r4, r3
 80005ac:	d0f7      	beq.n	800059e <LL_USART_Init+0x96>
    else if (USARTx == USART6)
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <LL_USART_Init+0xe8>)
 80005b0:	429c      	cmp	r4, r3
 80005b2:	d0f4      	beq.n	800059e <LL_USART_Init+0x96>
    else if (USARTx == USART7)
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <LL_USART_Init+0xec>)
 80005b6:	429c      	cmp	r4, r3
 80005b8:	d0f1      	beq.n	800059e <LL_USART_Init+0x96>
    else if (USARTx == USART8)
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <LL_USART_Init+0xf0>)
 80005bc:	429c      	cmp	r4, r3
 80005be:	d1ab      	bne.n	8000518 <LL_USART_Init+0x10>
 80005c0:	e7ed      	b.n	800059e <LL_USART_Init+0x96>
 80005c2:	1818      	adds	r0, r3, r0
 80005c4:	f7ff fd9e 	bl	8000104 <__udivsi3>
 80005c8:	b280      	uxth	r0, r0
 80005ca:	e7d9      	b.n	8000580 <LL_USART_Init+0x78>
 80005cc:	efff69f3 	.word	0xefff69f3
 80005d0:	ffffcfff 	.word	0xffffcfff
 80005d4:	fffffcff 	.word	0xfffffcff
 80005d8:	40013800 	.word	0x40013800
 80005dc:	0000fff0 	.word	0x0000fff0
 80005e0:	40004400 	.word	0x40004400
 80005e4:	40004800 	.word	0x40004800
 80005e8:	40004c00 	.word	0x40004c00
 80005ec:	40005000 	.word	0x40005000
 80005f0:	40011400 	.word	0x40011400
 80005f4:	40011800 	.word	0x40011800
 80005f8:	40011c00 	.word	0x40011c00

080005fc <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80005fc:	21fa      	movs	r1, #250	; 0xfa
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80005fe:	b510      	push	{r4, lr}
 8000600:	0089      	lsls	r1, r1, #2
 8000602:	f7ff fd7f 	bl	8000104 <__udivsi3>
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000606:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <LL_Init1msTick+0x1c>)
 800060a:	3801      	subs	r0, #1
 800060c:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800060e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000610:	3205      	adds	r2, #5
 8000612:	601a      	str	r2, [r3, #0]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8000614:	bd10      	pop	{r4, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	e000e010 	.word	0xe000e010

0800061c <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <LL_mDelay+0x28>)
{
 800061e:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	9201      	str	r2, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000624:	9a01      	ldr	r2, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
  {
    Delay++;
 8000626:	1c42      	adds	r2, r0, #1
 8000628:	1e51      	subs	r1, r2, #1
 800062a:	418a      	sbcs	r2, r1
 800062c:	1880      	adds	r0, r0, r2
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	0252      	lsls	r2, r2, #9
  while (Delay)
 8000632:	2800      	cmp	r0, #0
 8000634:	d101      	bne.n	800063a <LL_mDelay+0x1e>
    {
      Delay--;
    }
  }
}
 8000636:	b002      	add	sp, #8
 8000638:	4770      	bx	lr
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800063a:	6819      	ldr	r1, [r3, #0]
 800063c:	4211      	tst	r1, r2
 800063e:	d0f8      	beq.n	8000632 <LL_mDelay+0x16>
      Delay--;
 8000640:	3801      	subs	r0, #1
 8000642:	e7f6      	b.n	8000632 <LL_mDelay+0x16>
 8000644:	e000e010 	.word	0xe000e010

08000648 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <LL_SetSystemCoreClock+0x8>)
 800064a:	6018      	str	r0, [r3, #0]
}
 800064c:	4770      	bx	lr
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	20000000 	.word	0x20000000

08000654 <LL_AHB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <LL_AHB1_GRP1_EnableClock+0x18>)
{
 8000656:	b082      	sub	sp, #8
  SET_BIT(RCC->AHBENR, Periphs);
 8000658:	695a      	ldr	r2, [r3, #20]
 800065a:	4302      	orrs	r2, r0
 800065c:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	4018      	ands	r0, r3
 8000662:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000664:	9b01      	ldr	r3, [sp, #4]
}
 8000666:	b002      	add	sp, #8
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	40021000 	.word	0x40021000

08000670 <UART2_TX_string>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE));
 8000670:	2180      	movs	r1, #128	; 0x80

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */
void UART2_TX_string(char* str){
 8000672:	b510      	push	{r4, lr}
 8000674:	4a05      	ldr	r2, [pc, #20]	; (800068c <UART2_TX_string+0x1c>)
	while(*str){
 8000676:	7803      	ldrb	r3, [r0, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d100      	bne.n	800067e <UART2_TX_string+0xe>
		while(!LL_USART_IsActiveFlag_TXE(USART2));
		LL_USART_TransmitData8(USART2, *str);
		str++;
	}
}
 800067c:	bd10      	pop	{r4, pc}
 800067e:	69d4      	ldr	r4, [r2, #28]
		while(!LL_USART_IsActiveFlag_TXE(USART2));
 8000680:	420c      	tst	r4, r1
 8000682:	d0fc      	beq.n	800067e <UART2_TX_string+0xe>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8000684:	b29b      	uxth	r3, r3
 8000686:	8513      	strh	r3, [r2, #40]	; 0x28
		str++;
 8000688:	3001      	adds	r0, #1
 800068a:	e7f4      	b.n	8000676 <UART2_TX_string+0x6>
 800068c:	40004400 	.word	0x40004400

08000690 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000690:	2301      	movs	r3, #1
 8000692:	492d      	ldr	r1, [pc, #180]	; (8000748 <SystemClock_Config+0xb8>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b510      	push	{r4, lr}
 8000696:	680a      	ldr	r2, [r1, #0]
 8000698:	439a      	bics	r2, r3
 800069a:	431a      	orrs	r2, r3
 800069c:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800069e:	680a      	ldr	r2, [r1, #0]

  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 80006a0:	421a      	tst	r2, r3
 80006a2:	d100      	bne.n	80006a6 <SystemClock_Config+0x16>
 80006a4:	e7fe      	b.n	80006a4 <SystemClock_Config+0x14>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80006a6:	4c29      	ldr	r4, [pc, #164]	; (800074c <SystemClock_Config+0xbc>)
 80006a8:	6822      	ldr	r2, [r4, #0]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80006ae:	2302      	movs	r3, #2
 80006b0:	6822      	ldr	r2, [r4, #0]
  Error_Handler();  
  }
  LL_RCC_HSI_Enable();

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80006b2:	421a      	tst	r2, r3
 80006b4:	d0fc      	beq.n	80006b0 <SystemClock_Config+0x20>
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80006b6:	22f8      	movs	r2, #248	; 0xf8
 80006b8:	6823      	ldr	r3, [r4, #0]
 80006ba:	4393      	bics	r3, r2
 80006bc:	001a      	movs	r2, r3
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	4313      	orrs	r3, r2
 80006c2:	6023      	str	r3, [r4, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 80006c4:	6863      	ldr	r3, [r4, #4]
 80006c6:	4a22      	ldr	r2, [pc, #136]	; (8000750 <SystemClock_Config+0xc0>)
 80006c8:	401a      	ands	r2, r3
 80006ca:	23a2      	movs	r3, #162	; 0xa2
 80006cc:	039b      	lsls	r3, r3, #14
 80006ce:	4313      	orrs	r3, r2
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 80006d0:	220f      	movs	r2, #15
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 80006d2:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 80006d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80006d6:	4393      	bics	r3, r2
 80006d8:	001a      	movs	r2, r3
 80006da:	2301      	movs	r3, #1
 80006dc:	4313      	orrs	r3, r2
 80006de:	62e3      	str	r3, [r4, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80006e0:	2380      	movs	r3, #128	; 0x80
 80006e2:	6822      	ldr	r2, [r4, #0]
 80006e4:	045b      	lsls	r3, r3, #17
 80006e6:	4313      	orrs	r3, r2
 80006e8:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80006ea:	2380      	movs	r3, #128	; 0x80
 80006ec:	049b      	lsls	r3, r3, #18
 80006ee:	6822      	ldr	r2, [r4, #0]
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_12, LL_RCC_PREDIV_DIV_2);

  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80006f0:	421a      	tst	r2, r3
 80006f2:	d0fc      	beq.n	80006ee <SystemClock_Config+0x5e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80006f4:	22f0      	movs	r2, #240	; 0xf0
 80006f6:	6863      	ldr	r3, [r4, #4]
 80006f8:	4393      	bics	r3, r2
 80006fa:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80006fc:	6863      	ldr	r3, [r4, #4]
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <SystemClock_Config+0xc4>)
 8000700:	4013      	ands	r3, r2
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000702:	2203      	movs	r2, #3
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000704:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000706:	6863      	ldr	r3, [r4, #4]
 8000708:	4393      	bics	r3, r2
 800070a:	001a      	movs	r2, r3
 800070c:	2302      	movs	r3, #2
 800070e:	4313      	orrs	r3, r2
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000710:	220c      	movs	r2, #12
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000712:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000714:	6863      	ldr	r3, [r4, #4]
 8000716:	4013      	ands	r3, r2
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000718:	2b08      	cmp	r3, #8
 800071a:	d1fb      	bne.n	8000714 <SystemClock_Config+0x84>
  {
  
  }
  LL_Init1msTick(48000000);
 800071c:	480e      	ldr	r0, [pc, #56]	; (8000758 <SystemClock_Config+0xc8>)
 800071e:	f7ff ff6d 	bl	80005fc <LL_Init1msTick>
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000722:	2304      	movs	r3, #4
 8000724:	4a0d      	ldr	r2, [pc, #52]	; (800075c <SystemClock_Config+0xcc>)

  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);

  LL_SetSystemCoreClock(48000000);
 8000726:	480c      	ldr	r0, [pc, #48]	; (8000758 <SystemClock_Config+0xc8>)
 8000728:	6811      	ldr	r1, [r2, #0]
 800072a:	430b      	orrs	r3, r1
 800072c:	6013      	str	r3, [r2, #0]
 800072e:	f7ff ff8b 	bl	8000648 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 8000732:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000734:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <SystemClock_Config+0xd0>)
 8000736:	4013      	ands	r3, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000738:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <SystemClock_Config+0xd4>)
 800073a:	6323      	str	r3, [r4, #48]	; 0x30
 800073c:	6a13      	ldr	r3, [r2, #32]
 800073e:	021b      	lsls	r3, r3, #8
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	6213      	str	r3, [r2, #32]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 0);
}
 8000744:	bd10      	pop	{r4, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	40022000 	.word	0x40022000
 800074c:	40021000 	.word	0x40021000
 8000750:	ffc27fff 	.word	0xffc27fff
 8000754:	fffff8ff 	.word	0xfffff8ff
 8000758:	02dc6c00 	.word	0x02dc6c00
 800075c:	e000e010 	.word	0xe000e010
 8000760:	fffcffff 	.word	0xfffcffff
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <main>:
{
 8000768:	b5f0      	push	{r4, r5, r6, r7, lr}
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800076a:	2601      	movs	r6, #1
  SET_BIT(RCC->APB1ENR, Periphs);
 800076c:	2180      	movs	r1, #128	; 0x80
  SET_BIT(RCC->APB2ENR, Periphs);
 800076e:	4f54      	ldr	r7, [pc, #336]	; (80008c0 <main+0x158>)
 8000770:	b091      	sub	sp, #68	; 0x44
 8000772:	69bb      	ldr	r3, [r7, #24]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000774:	0549      	lsls	r1, r1, #21
  SET_BIT(RCC->APB2ENR, Periphs);
 8000776:	4333      	orrs	r3, r6
 8000778:	61bb      	str	r3, [r7, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800077a:	69bb      	ldr	r3, [r7, #24]
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
  EXTI_InitStruct.LineCommand = ENABLE;
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800077c:	2500      	movs	r5, #0
 800077e:	4033      	ands	r3, r6
 8000780:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000782:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000784:	69fa      	ldr	r2, [r7, #28]
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000786:	ac03      	add	r4, sp, #12
 8000788:	430a      	orrs	r2, r1
 800078a:	61fa      	str	r2, [r7, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	400b      	ands	r3, r1
 8000790:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000792:	9b00      	ldr	r3, [sp, #0]
 8000794:	4b4b      	ldr	r3, [pc, #300]	; (80008c4 <main+0x15c>)
 8000796:	494c      	ldr	r1, [pc, #304]	; (80008c8 <main+0x160>)
 8000798:	69da      	ldr	r2, [r3, #28]
 800079a:	0212      	lsls	r2, r2, #8
 800079c:	0a12      	lsrs	r2, r2, #8
 800079e:	61da      	str	r2, [r3, #28]
 80007a0:	6a1a      	ldr	r2, [r3, #32]
 80007a2:	400a      	ands	r2, r1
 80007a4:	621a      	str	r2, [r3, #32]
 80007a6:	6a1a      	ldr	r2, [r3, #32]
 80007a8:	0212      	lsls	r2, r2, #8
 80007aa:	0a12      	lsrs	r2, r2, #8
 80007ac:	621a      	str	r2, [r3, #32]
  SystemClock_Config();
 80007ae:	f7ff ff6f 	bl	8000690 <SystemClock_Config>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80007b2:	2080      	movs	r0, #128	; 0x80
 80007b4:	0300      	lsls	r0, r0, #12
 80007b6:	f7ff ff4d 	bl	8000654 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80007ba:	2080      	movs	r0, #128	; 0x80
 80007bc:	03c0      	lsls	r0, r0, #15
 80007be:	f7ff ff49 	bl	8000654 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80007c2:	2080      	movs	r0, #128	; 0x80
 80007c4:	0280      	lsls	r0, r0, #10
 80007c6:	f7ff ff45 	bl	8000654 <LL_AHB1_GRP1_EnableClock>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80007ca:	2390      	movs	r3, #144	; 0x90
 80007cc:	2220      	movs	r2, #32
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 80007ce:	21f0      	movs	r1, #240	; 0xf0
 80007d0:	05db      	lsls	r3, r3, #23
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
 80007d4:	4a3d      	ldr	r2, [pc, #244]	; (80008cc <main+0x164>)
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80007d6:	483e      	ldr	r0, [pc, #248]	; (80008d0 <main+0x168>)
 80007d8:	6953      	ldr	r3, [r2, #20]
 80007da:	438b      	bics	r3, r1
 80007dc:	39d0      	subs	r1, #208	; 0xd0
 80007de:	430b      	orrs	r3, r1
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b3c      	ldr	r3, [pc, #240]	; (80008d4 <main+0x16c>)
 80007e4:	68d9      	ldr	r1, [r3, #12]
 80007e6:	4001      	ands	r1, r0
 80007e8:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4002      	ands	r2, r0
 80007ee:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	019b      	lsls	r3, r3, #6
 80007f4:	9303      	str	r3, [sp, #12]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80007f6:	2302      	movs	r3, #2
  LL_EXTI_Init(&EXTI_InitStruct);
 80007f8:	0020      	movs	r0, r4
  EXTI_InitStruct.LineCommand = ENABLE;
 80007fa:	7126      	strb	r6, [r4, #4]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80007fc:	71a3      	strb	r3, [r4, #6]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80007fe:	7165      	strb	r5, [r4, #5]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000800:	f7ff fd0c 	bl	800021c <LL_EXTI_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000804:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = LD2_Pin;
 8000806:	2320      	movs	r3, #32
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000808:	a909      	add	r1, sp, #36	; 0x24
 800080a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LD2_Pin;
 800080c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800080e:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000810:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000812:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000814:	950d      	str	r5, [sp, #52]	; 0x34
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000816:	f7ff fd51 	bl	80002bc <LL_GPIO_Init>
  SET_BIT(RCC->APB1ENR, Periphs);
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	0292      	lsls	r2, r2, #10
 8000820:	4313      	orrs	r3, r2
 8000822:	61fb      	str	r3, [r7, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000824:	69fb      	ldr	r3, [r7, #28]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8000826:	2090      	movs	r0, #144	; 0x90
 8000828:	4013      	ands	r3, r2
 800082a:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800082c:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = USART_TX_Pin;
 800082e:	2304      	movs	r3, #4
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8000830:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = USART_TX_Pin;
 8000832:	9303      	str	r3, [sp, #12]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8000834:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000836:	3b02      	subs	r3, #2
 8000838:	6063      	str	r3, [r4, #4]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800083a:	6166      	str	r6, [r4, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800083c:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800083e:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000840:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8000842:	f7ff fd3b 	bl	80002bc <LL_GPIO_Init>
  GPIO_InitStruct.Pin = USART_RX_Pin;
 8000846:	2308      	movs	r3, #8
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8000848:	2090      	movs	r0, #144	; 0x90
 800084a:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = USART_RX_Pin;
 800084c:	9303      	str	r3, [sp, #12]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800084e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000850:	3b06      	subs	r3, #6
 8000852:	6063      	str	r3, [r4, #4]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000854:	6166      	str	r6, [r4, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000856:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000858:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800085a:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800085c:	f7ff fd2e 	bl	80002bc <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 115200;
 8000860:	23e1      	movs	r3, #225	; 0xe1
 8000862:	025b      	lsls	r3, r3, #9
 8000864:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000866:	230c      	movs	r3, #12
  LL_USART_Init(USART2, &USART_InitStruct);
 8000868:	4c1b      	ldr	r4, [pc, #108]	; (80008d8 <main+0x170>)
 800086a:	a909      	add	r1, sp, #36	; 0x24
 800086c:	0020      	movs	r0, r4
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800086e:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000870:	950a      	str	r5, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000872:	950b      	str	r5, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000874:	950c      	str	r5, [sp, #48]	; 0x30
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000876:	950e      	str	r5, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000878:	950f      	str	r5, [sp, #60]	; 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 800087a:	f7ff fe45 	bl	8000508 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 800087e:	68a3      	ldr	r3, [r4, #8]
 8000880:	4a16      	ldr	r2, [pc, #88]	; (80008dc <main+0x174>)
 8000882:	4013      	ands	r3, r2
 8000884:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	68a2      	ldr	r2, [r4, #8]
 800088a:	015b      	lsls	r3, r3, #5
 800088c:	4313      	orrs	r3, r2
 800088e:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000890:	6863      	ldr	r3, [r4, #4]
 8000892:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <main+0x178>)
 8000894:	4013      	ands	r3, r2
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000896:	222a      	movs	r2, #42	; 0x2a
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000898:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800089a:	68a3      	ldr	r3, [r4, #8]
 800089c:	4393      	bics	r3, r2
 800089e:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80008a0:	6823      	ldr	r3, [r4, #0]
 80008a2:	4333      	orrs	r3, r6
 80008a4:	6023      	str	r3, [r4, #0]
 80008a6:	6823      	ldr	r3, [r4, #0]
 80008a8:	431e      	orrs	r6, r3
 80008aa:	6026      	str	r6, [r4, #0]
	  LL_mDelay(1000);
 80008ac:	24fa      	movs	r4, #250	; 0xfa
 80008ae:	00a4      	lsls	r4, r4, #2
	  UART2_TX_string("Hello World! \r\n");
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <main+0x17c>)
 80008b2:	f7ff fedd 	bl	8000670 <UART2_TX_string>
	  LL_mDelay(1000);
 80008b6:	0020      	movs	r0, r4
 80008b8:	f7ff feb0 	bl	800061c <LL_mDelay>
 80008bc:	e7f8      	b.n	80008b0 <main+0x148>
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	40021000 	.word	0x40021000
 80008c4:	e000ed00 	.word	0xe000ed00
 80008c8:	ff00ffff 	.word	0xff00ffff
 80008cc:	40010000 	.word	0x40010000
 80008d0:	f3ffffff 	.word	0xf3ffffff
 80008d4:	48000800 	.word	0x48000800
 80008d8:	40004400 	.word	0x40004400
 80008dc:	fffffbff 	.word	0xfffffbff
 80008e0:	ffffb7ff 	.word	0xffffb7ff
 80008e4:	08000a00 	.word	0x08000a00

080008e8 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	4770      	bx	lr
	...

080008ec <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80008ec:	2101      	movs	r1, #1
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80008f0:	4811      	ldr	r0, [pc, #68]	; (8000938 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	430a      	orrs	r2, r1
 80008f6:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80008f8:	685a      	ldr	r2, [r3, #4]
 80008fa:	4002      	ands	r2, r0
 80008fc:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	480e      	ldr	r0, [pc, #56]	; (800093c <SystemInit+0x50>)
 8000902:	4002      	ands	r2, r0
 8000904:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <SystemInit+0x54>)
 800090a:	4002      	ands	r2, r0
 800090c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <SystemInit+0x58>)
 8000912:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000914:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000916:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800091a:	4382      	bics	r2, r0
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEACU;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
 800091e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <SystemInit+0x5c>)
 8000922:	4002      	ands	r2, r0
 8000924:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8000926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000928:	438a      	bics	r2, r1
 800092a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]

}
 8000930:	4770      	bx	lr
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	40021000 	.word	0x40021000
 8000938:	08ffb80c 	.word	0x08ffb80c
 800093c:	fef6ffff 	.word	0xfef6ffff
 8000940:	fffbffff 	.word	0xfffbffff
 8000944:	ffc0ffff 	.word	0xffc0ffff
 8000948:	fff0feac 	.word	0xfff0feac

0800094c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800094e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000952:	490e      	ldr	r1, [pc, #56]	; (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000954:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <LoopForever+0xe>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000968:	4c0b      	ldr	r4, [pc, #44]	; (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000976:	f7ff ffb9 	bl	80008ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800097a:	f000 f811 	bl	80009a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097e:	f7ff fef3 	bl	8000768 <main>

08000982 <LoopForever>:

LoopForever:
    b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   r0, =_estack
 8000984:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000990:	08000a30 	.word	0x08000a30
  ldr r2, =_sbss
 8000994:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000998:	20000020 	.word	0x20000020

0800099c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_COMP_IRQHandler>
	...

080009a0 <__libc_init_array>:
 80009a0:	b570      	push	{r4, r5, r6, lr}
 80009a2:	2600      	movs	r6, #0
 80009a4:	4d0c      	ldr	r5, [pc, #48]	; (80009d8 <__libc_init_array+0x38>)
 80009a6:	4c0d      	ldr	r4, [pc, #52]	; (80009dc <__libc_init_array+0x3c>)
 80009a8:	1b64      	subs	r4, r4, r5
 80009aa:	10a4      	asrs	r4, r4, #2
 80009ac:	42a6      	cmp	r6, r4
 80009ae:	d109      	bne.n	80009c4 <__libc_init_array+0x24>
 80009b0:	2600      	movs	r6, #0
 80009b2:	f000 f819 	bl	80009e8 <_init>
 80009b6:	4d0a      	ldr	r5, [pc, #40]	; (80009e0 <__libc_init_array+0x40>)
 80009b8:	4c0a      	ldr	r4, [pc, #40]	; (80009e4 <__libc_init_array+0x44>)
 80009ba:	1b64      	subs	r4, r4, r5
 80009bc:	10a4      	asrs	r4, r4, #2
 80009be:	42a6      	cmp	r6, r4
 80009c0:	d105      	bne.n	80009ce <__libc_init_array+0x2e>
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	00b3      	lsls	r3, r6, #2
 80009c6:	58eb      	ldr	r3, [r5, r3]
 80009c8:	4798      	blx	r3
 80009ca:	3601      	adds	r6, #1
 80009cc:	e7ee      	b.n	80009ac <__libc_init_array+0xc>
 80009ce:	00b3      	lsls	r3, r6, #2
 80009d0:	58eb      	ldr	r3, [r5, r3]
 80009d2:	4798      	blx	r3
 80009d4:	3601      	adds	r6, #1
 80009d6:	e7f2      	b.n	80009be <__libc_init_array+0x1e>
 80009d8:	08000a28 	.word	0x08000a28
 80009dc:	08000a28 	.word	0x08000a28
 80009e0:	08000a28 	.word	0x08000a28
 80009e4:	08000a2c 	.word	0x08000a2c

080009e8 <_init>:
 80009e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ee:	bc08      	pop	{r3}
 80009f0:	469e      	mov	lr, r3
 80009f2:	4770      	bx	lr

080009f4 <_fini>:
 80009f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009fa:	bc08      	pop	{r3}
 80009fc:	469e      	mov	lr, r3
 80009fe:	4770      	bx	lr
